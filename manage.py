#!/usr/bin/env python3
"""
–¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è AI Platform
"""

import sys
import argparse
from pathlib import Path
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
BASE_DIR = Path(__file__).resolve().parent
load_dotenv(BASE_DIR / '.env')

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ PYTHONPATH
sys.path.insert(0, str(BASE_DIR))


def run_bot():
    """–ó–∞–ø—É—Å—Ç–∏—Ç—å Telegram –±–æ—Ç–∞"""
    print("üöÄ –ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞...")
    from telegram_bot.bot import run
    run()


def init_db():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
    print("üì¶ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
    import asyncio
    from database import Database
    from config import config
    
    async def init():
        db = Database(config.DATABASE_PATH)
        await db.init_db()
        print(f"‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞: {config.DATABASE_PATH}")
    
    asyncio.run(init())


def test_collector():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö...")
    from data_collectors import CryptoCollector, DataFormatter
    
    collector = CryptoCollector()
    symbol = "BTC"
    
    print(f"–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {symbol}...")
    data = collector.get_crypto_data(symbol)
    
    if data is not None:
        print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(data)} –∑–∞–ø–∏—Å–µ–π")
        current_price = collector.get_current_price(symbol)
        print(f"üí∞ –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: ${current_price:.2f}")
        
        formatter = DataFormatter()
        formatted = formatter.format_for_analysis(data, symbol, current_price)
        print("\nüìä –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:")
        print(formatted[:500] + "...")
    else:
        print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö")


def test_ai():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å AI –∞–Ω–∞–ª–∏–∑"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ AI –∞–Ω–∞–ª–∏–∑–∞...")
    import asyncio
    from data_collectors import CryptoCollector, DataFormatter
    from AI_block import AIAnalyzer
    from config import config
    
    async def test():
        try:
            # –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            config.validate()
            
            # –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            collector = CryptoCollector()
            symbol = "BTC"
            
            print(f"–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {symbol}...")
            data = collector.get_crypto_data(symbol)
            current_price = collector.get_current_price(symbol)
            
            if data is None:
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ")
                return
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º
            formatter = DataFormatter()
            formatted_data = formatter.format_for_analysis(data, symbol, current_price)
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º
            print("ü§ñ –ó–∞–ø—Ä–æ—Å –∞–Ω–∞–ª–∏–∑–∞ –æ—Ç AI...")
            analyzer = AIAnalyzer(
                api_key=config.OPENROUTER_API_KEY,
                model=config.AI_MODEL
            )
            
            result = await analyzer.analyze_crypto(formatted_data, symbol)
            
            if result:
                print("\n‚úÖ –ê–Ω–∞–ª–∏–∑ –ø–æ–ª—É—á–µ–Ω:\n")
                print(result)
            else:
                print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∞–Ω–∞–ª–∏–∑–∞")
                
        except ValueError as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    
    asyncio.run(test())


def debug_info():
    """–ü–æ–∫–∞–∑–∞—Ç—å debug –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é"""
    print("üîß Debug –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:")
    print("=" * 50)
    
    from config import config
    
    # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    print(f"Debug Mode: {config.DEBUG_MODE}")
    print(f"Log Level: {config.DEBUG_LOG_LEVEL}")
    print(f"Use Mock Data: {config.DEBUG_USE_MOCK_DATA}")
    print(f"Skip Validation: {config.DEBUG_SKIP_VALIDATION}")
    print()
    
    # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
    print("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:")
    print(f"  Database Path: {config.DATABASE_PATH}")
    print(f"  AI Model: {config.AI_MODEL}")
    print(f"  Free Analyses: {config.FREE_ANALYSES_PER_DAY}")
    print(f"  Premium Analyses: {config.PREMIUM_ANALYSES_PER_DAY}")
    print()
    
    # –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    print("–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è:")
    import os
    env_vars = [
        'TELEGRAM_BOT_TOKEN', 'OPENROUTER_API_KEY', 'AI_MODEL',
        'DATABASE_PATH', 'DEBUG_MODE', 'DEBUG_LOG_LEVEL',
        'DEBUG_USE_MOCK_DATA', 'DEBUG_SKIP_VALIDATION'
    ]
    
    for var in env_vars:
        value = os.getenv(var, '–ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù–û')
        if var in ['TELEGRAM_BOT_TOKEN', 'OPENROUTER_API_KEY'] and value != '–ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù–û':
            value = f"{value[:8]}..." if len(value) > 8 else value
        print(f"  {var}: {value}")


def debug_test():
    """–ó–∞–ø—É—Å—Ç–∏—Ç—å –ø–æ–ª–Ω—ã–π debug —Ç–µ—Å—Ç"""
    print("üîß –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ debug —Ç–µ—Å—Ç–∞...")
    print("=" * 50)
    
    # 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    print("1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...")
    try:
        from config import config
        config.validate()
        print("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –≤–∞–ª–∏–¥–Ω–∞")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
        return
    
    # 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    print("\n2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
    try:
        import asyncio
        from database import Database
        
        async def test_db():
            db = Database(config.DATABASE_PATH)
            await db.init_db()
            print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –¥–æ—Å—Ç—É–ø–Ω–∞")
        
        asyncio.run(test_db())
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
    
    # 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö
    print("\n3. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö...")
    try:
        from data_collectors import CryptoCollector
        collector = CryptoCollector()
        data = collector.get_crypto_data("BTC")
        if data is not None:
            print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(data)} –∑–∞–ø–∏—Å–µ–π –¥–ª—è BTC")
        else:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö: {e}")
    
    # 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ AI (–µ—Å–ª–∏ –Ω–µ debug —Ä–µ–∂–∏–º —Å mock –¥–∞–Ω–Ω—ã–º–∏)
    if not config.DEBUG_USE_MOCK_DATA:
        print("\n4. –ü—Ä–æ–≤–µ—Ä–∫–∞ AI –∞–Ω–∞–ª–∏–∑–∞...")
        try:
            import asyncio
            from data_collectors import CryptoCollector, DataFormatter
            from AI_block import AIAnalyzer
            
            async def test_ai():
                collector = CryptoCollector()
                data = collector.get_crypto_data("BTC")
                current_price = collector.get_current_price("BTC")
                
                if data is not None:
                    formatter = DataFormatter()
                    formatted_data = formatter.format_for_analysis(data, "BTC", current_price)
                    
                    analyzer = AIAnalyzer(
                        api_key=config.OPENROUTER_API_KEY,
                        model=config.AI_MODEL
                    )
                    
                    result = await analyzer.analyze_crypto(formatted_data, "BTC")
                    if result:
                        print("‚úÖ AI –∞–Ω–∞–ª–∏–∑ —Ä–∞–±–æ—Ç–∞–µ—Ç")
                    else:
                        print("‚ùå AI –∞–Ω–∞–ª–∏–∑ –Ω–µ –≤–µ—Ä–Ω—É–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç")
                else:
                    print("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è AI –∞–Ω–∞–ª–∏–∑–∞")
            
            asyncio.run(test_ai())
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ AI –∞–Ω–∞–ª–∏–∑–∞: {e}")
    else:
        print("\n4. –ü—Ä–æ–ø—É—Å–∫ AI —Ç–µ—Å—Ç–∞ (–∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è mock –¥–∞–Ω–Ω—ã–µ)")
    
    print("\nüéâ Debug —Ç–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!")


def debug_mock_data():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å —Å mock –¥–∞–Ω–Ω—ã–º–∏"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å mock –¥–∞–Ω–Ω—ã–º–∏...")
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    import pandas as pd
    import numpy as np
    from datetime import datetime, timedelta
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π
    dates = pd.date_range(start=datetime.now() - timedelta(days=30), end=datetime.now(), freq='1D')
    np.random.seed(42)  # –î–ª—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º–æ—Å—Ç–∏
    
    # –°–∏–º—É–ª–∏—Ä—É–µ–º —Ü–µ–Ω—É BTC —Å —Ç—Ä–µ–Ω–¥–æ–º
    base_price = 45000
    price_changes = np.random.normal(0, 0.05, len(dates))  # 5% –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å
    prices = [base_price]
    
    for change in price_changes[1:]:
        new_price = prices[-1] * (1 + change)
        prices.append(new_price)
    
    # –°–æ–∑–¥–∞–µ–º DataFrame
    mock_data = pd.DataFrame({
        'Date': dates,
        'Open': prices,
        'High': [p * (1 + abs(np.random.normal(0, 0.02))) for p in prices],
        'Low': [p * (1 - abs(np.random.normal(0, 0.02))) for p in prices],
        'Close': prices,
        'Volume': [np.random.randint(1000000, 5000000) for _ in prices]
    })
    
    print(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ {len(mock_data)} –∑–∞–ø–∏—Å–µ–π mock –¥–∞–Ω–Ω—ã—Ö")
    print(f"–¶–µ–Ω–∞ BTC: ${mock_data['Close'].iloc[-1]:.2f}")
    print(f"–ü–µ—Ä–∏–æ–¥: {mock_data['Date'].iloc[0].strftime('%Y-%m-%d')} - {mock_data['Date'].iloc[-1].strftime('%Y-%m-%d')}")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    print(f"\n–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ mock –¥–∞–Ω–Ω—ã—Ö:")
    print(f"  –°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞: ${mock_data['Close'].mean():.2f}")
    print(f"  –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞: ${mock_data['Close'].min():.2f}")
    print(f"  –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞: ${mock_data['Close'].max():.2f}")
    print(f"  –í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å: {mock_data['Close'].std():.2f}")
    
    return mock_data


def show_info():
    """–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–µ–∫—Ç–µ"""
    print("""
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë   AI Platform for Cryptocurrency Analysis                ‚ïë
‚ïë   –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞ –¥–ª—è AI –∞–Ω–∞–ª–∏–∑–∞ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç                   ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù

–ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã:
  üìä Data Collectors - –°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ Twelve Data API
  ü§ñ AI Block - –ê–Ω–∞–ª–∏–∑ —á–µ—Ä–µ–∑ OpenRouter API
  üí¨ Telegram Bot - –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  üíæ Database - SQLite —Ö—Ä–∞–Ω–∏–ª–∏—â–µ

–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
  python manage.py run         - –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞
  python manage.py init-db     - –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ë–î
  python manage.py test-data   - –¢–µ—Å—Ç —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö
  python manage.py test-ai     - –¢–µ—Å—Ç AI –∞–Ω–∞–ª–∏–∑–∞
  python manage.py info        - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞

Debug –∫–æ–º–∞–Ω–¥—ã:
  python manage.py debug-info  - –ü–æ–∫–∞–∑–∞—Ç—å debug –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
  python manage.py debug-test  - –ü–æ–ª–Ω—ã–π debug —Ç–µ—Å—Ç
  python manage.py debug-mock  - –¢–µ—Å—Ç —Å mock –¥–∞–Ω–Ω—ã–º–∏

–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:
  ‚úÖ Python 3.8+
  ‚úÖ –í–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ (.venv)
  ‚úÖ –ó–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã–π .env —Ñ–∞–π–ª

Debug —Ä–µ–∂–∏–º:
  üîß –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ DEBUG_MODE=true –≤ .env –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
  üìù –°–º. docs/ENV_EXAMPLE.md –¥–ª—è –ø—Ä–∏–º–µ—Ä–æ–≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏

–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: README.md
""")


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    parser = argparse.ArgumentParser(
        description='AI Platform –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç'
    )
    
    parser.add_argument(
        'command',
        choices=['run', 'init-db', 'test-data', 'test-ai', 'info', 
                'debug-info', 'debug-test', 'debug-mock'],
        help='–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è'
    )
    
    args = parser.parse_args()
    
    commands = {
        'run': run_bot,
        'init-db': init_db,
        'test-data': test_collector,
        'test-ai': test_ai,
        'info': show_info,
        'debug-info': debug_info,
        'debug-test': debug_test,
        'debug-mock': debug_mock_data
    }
    
    try:
        commands[args.command]()
    except KeyboardInterrupt:
        print("\n\n‚ö†Ô∏è  –ü—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞: {e}")
        sys.exit(1)


if __name__ == "__main__":
    if len(sys.argv) == 1:
        show_info()
    else:
        main()

