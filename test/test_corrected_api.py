"""
–¢–µ—Å—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ API NOWPayments —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
"""

import asyncio
import sys
import os
import aiohttp
import json

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from config import config


async def test_corrected_endpoints():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö endpoints"""
    print("üîß –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ API NOWPayments...")
    
    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    api_key = getattr(config, 'NOWPAYMENTS_API_KEY', None)
    public_api_key = getattr(config, 'NOWPAYMENTS_PUBLIC_API_KEY', None)
    sandbox = getattr(config, 'NOWPAYMENTS_SANDBOX', True)
    
    base_url = "https://api-sandbox.nowpayments.io/v1" if sandbox else "https://api.nowpayments.io/v1"
    
    print(f"üîë Private API Key: {'‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' if api_key else '‚ùå –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}")
    print(f"üîë Public API Key: {'‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' if public_api_key else '‚ùå –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}")
    print(f"üîó Sandbox: {'‚úÖ –í–∫–ª—é—á–µ–Ω' if sandbox else '‚ùå –í—ã–∫–ª—é—á–µ–Ω'}")
    print(f"üåê Base URL: {base_url}")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ endpoints
    await test_currencies_endpoint(base_url, public_api_key or api_key)
    await test_estimated_price_endpoint(base_url, public_api_key or api_key)
    await test_create_payment_endpoint(base_url, api_key)


async def test_currencies_endpoint(base_url, api_key):
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ endpoint –ø–æ–ª—É—á–µ–Ω–∏—è –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç"""
    print(f"\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ /currencies endpoint...")
    
    try:
        async with aiohttp.ClientSession() as session:
            headers = {
                "x-api-key": api_key,
                "Content-Type": "application/json"
            }
            
            async with session.get(f"{base_url}/currencies", headers=headers) as response:
                status = response.status
                text = await response.text()
                
                print(f"   üìä Status: {status}")
                
                if status == 200:
                    try:
                        data = json.loads(text)
                        currencies = data.get("currencies", [])
                        print(f"   ‚úÖ –£—Å–ø–µ—à–Ω–æ! –ü–æ–ª—É—á–µ–Ω–æ {len(currencies)} –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç")
                        
                        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5 –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç
                        for i, currency in enumerate(currencies[:5]):
                            print(f"      {i+1}. {currency}")
                        
                        if len(currencies) > 5:
                            print(f"      ... –∏ –µ—â–µ {len(currencies) - 5} –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç")
                            
                    except json.JSONDecodeError:
                        print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: {text[:100]}...")
                else:
                    print(f"   ‚ùå –û—à–∏–±–∫–∞ {status}: {text[:100]}...")
                    
    except Exception as e:
        print(f"   ‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {e}")


async def test_estimated_price_endpoint(base_url, api_key):
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ endpoint –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω—ã"""
    print(f"\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ /estimated-price endpoint...")
    
    try:
        async with aiohttp.ClientSession() as session:
            headers = {
                "x-api-key": api_key,
                "Content-Type": "application/json"
            }
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–Ω—ã–µ –≤–∞–ª—é—Ç–Ω—ã–µ –ø–∞—Ä—ã
            currency_pairs = [
                ("rub", "btc"),
                ("usd", "btc"),
                ("rub", "eth"),
            ]
            
            for currency_from, currency_to in currency_pairs:
                print(f"   üß™ –¢–µ—Å—Ç –ø–∞—Ä—ã {currency_from.upper()}/{currency_to.upper()}...")
                
                params = {
                    "amount": 500,
                    "currency_pair": f"{currency_from}_{currency_to}"
                }
                
                async with session.get(f"{base_url}/estimate", headers=headers, params=params) as response:
                    status = response.status
                    text = await response.text()
                    
                    print(f"      üìä Status: {status}")
                    
                    if status == 200:
                        try:
                            data = json.loads(text)
                            estimated_amount = data.get("estimated_amount")
                            if estimated_amount:
                                print(f"      ‚úÖ 500 {currency_from.upper()} = {estimated_amount} {currency_to.upper()}")
                            else:
                                print(f"      ‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Ü–µ–Ω–µ")
                        except json.JSONDecodeError:
                            print(f"      ‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: {text[:100]}...")
                    else:
                        print(f"      ‚ùå –û—à–∏–±–∫–∞ {status}: {text[:100]}...")
                        
    except Exception as e:
        print(f"   ‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {e}")


async def test_create_payment_endpoint(base_url, api_key):
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ endpoint —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞"""
    print(f"\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ /payment endpoint...")
    
    try:
        async with aiohttp.ClientSession() as session:
            headers = {
                "x-api-key": api_key,
                "Content-Type": "application/json"
            }
            
            # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–ª–∞—Ç–µ–∂–∞ –ø–æ–¥–ø–∏—Å–∫–∏
            payment_data = {
                "price_amount": 500,
                "price_currency": "rub",
                "pay_currency": "btc",
                "order_id": f"test_subscription_{int(asyncio.get_event_loop().time())}",
                "order_description": "Premium subscription for 30 days",
                "ipn_callback_url": "https://vextratrading.ru/nowpayments-webhook",
                "metadata": {
                    "user_id": "12345",
                    "subscription_type": "premium_30",
                    "payment_type": "subscription"
                }
            }
            
            print(f"   üìù –°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞ –ø–æ–¥–ø–∏—Å–∫–∏...")
            print(f"      Order ID: {payment_data['order_id']}")
            print(f"      Amount: {payment_data['price_amount']} {payment_data['price_currency']}")
            print(f"      Pay Currency: {payment_data['pay_currency']}")
            
            async with session.post(f"{base_url}/payment", json=payment_data, headers=headers) as response:
                status = response.status
                text = await response.text()
                
                print(f"      üìä Status: {status}")
                
                if status == 201:
                    try:
                        data = json.loads(text)
                        payment_id = data.get("payment_id")
                        payment_status = data.get("payment_status")
                        pay_url = data.get("pay_url")
                        
                        print(f"      ‚úÖ –ü–ª–∞—Ç–µ–∂ —Å–æ–∑–¥–∞–Ω!")
                        print(f"         Payment ID: {payment_id}")
                        print(f"         Status: {payment_status}")
                        print(f"         Pay URL: {pay_url}")
                        
                    except json.JSONDecodeError:
                        print(f"      ‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: {text[:100]}...")
                else:
                    print(f"      ‚ùå –û—à–∏–±–∫–∞ {status}: {text[:200]}...")
                    
    except Exception as e:
        print(f"   ‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {e}")


async def test_analyses_payment():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–æ–≤"""
    print(f"\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–æ–≤...")
    
    api_key = getattr(config, 'NOWPAYMENTS_API_KEY', None)
    sandbox = getattr(config, 'NOWPAYMENTS_SANDBOX', True)
    base_url = "https://api-sandbox.nowpayments.io/v1" if sandbox else "https://api.nowpayments.io/v1"
    
    try:
        async with aiohttp.ClientSession() as session:
            headers = {
                "x-api-key": api_key,
                "Content-Type": "application/json"
            }
            
            # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–ª–∞—Ç–µ–∂–∞ –∞–Ω–∞–ª–∏–∑–æ–≤
            payment_data = {
                "price_amount": 100,
                "price_currency": "rub",
                "pay_currency": "eth",
                "order_id": f"test_analyses_{int(asyncio.get_event_loop().time())}",
                "order_description": "Purchase 10 additional analyses",
                "ipn_callback_url": "https://vextratrading.ru/nowpayments-webhook",
                "metadata": {
                    "user_id": "12345",
                    "analyses_count": "10",
                    "payment_type": "analyses"
                }
            }
            
            print(f"   üìù –°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞ –∞–Ω–∞–ª–∏–∑–æ–≤...")
            print(f"      Order ID: {payment_data['order_id']}")
            print(f"      Amount: {payment_data['price_amount']} {payment_data['price_currency']}")
            print(f"      Pay Currency: {payment_data['pay_currency']}")
            
            async with session.post(f"{base_url}/payment", json=payment_data, headers=headers) as response:
                status = response.status
                text = await response.text()
                
                print(f"      üìä Status: {status}")
                
                if status == 201:
                    try:
                        data = json.loads(text)
                        payment_id = data.get("payment_id")
                        payment_status = data.get("payment_status")
                        pay_url = data.get("pay_url")
                        
                        print(f"      ‚úÖ –ü–ª–∞—Ç–µ–∂ —Å–æ–∑–¥–∞–Ω!")
                        print(f"         Payment ID: {payment_id}")
                        print(f"         Status: {payment_status}")
                        print(f"         Pay URL: {pay_url}")
                        
                    except json.JSONDecodeError:
                        print(f"      ‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: {text[:100]}...")
                else:
                    print(f"      ‚ùå –û—à–∏–±–∫–∞ {status}: {text[:200]}...")
                    
    except Exception as e:
        print(f"   ‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {e}")


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üîß –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ì–û API NOWPAYMENTS")
    print("=" * 60)
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ endpoints
    await test_corrected_endpoints()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–ª–∞—Ç–µ–∂ –¥–ª—è –∞–Ω–∞–ª–∏–∑–æ–≤
    await test_analyses_payment()
    
    print("\n" + "=" * 60)
    print("üìã –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:")
    print("‚úÖ –ï—Å–ª–∏ –≤—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ - API —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    print("‚ùå –ï—Å–ª–∏ –µ—Å—Ç—å –æ—à–∏–±–∫–∏ 403 - –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –≤ –ø–∞–Ω–µ–ª–∏ NOWPayments")
    print("üîß –ï—Å–ª–∏ –µ—Å—Ç—å –æ—à–∏–±–∫–∏ 429 - –ø–æ–¥–æ–∂–¥–∏—Ç–µ –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ —Ç–µ—Å—Ç")


if __name__ == "__main__":
    asyncio.run(main())
