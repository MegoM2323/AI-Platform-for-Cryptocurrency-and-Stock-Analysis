"""
–¢–µ—Å—Ç—ã –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ NOWPayments
"""

import asyncio
from unittest.mock import Mock, patch
import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from Payments.nowpayments_client import NOWPaymentsClient, NOWPaymentData, NOWPaymentStatus
from Payments.payment_system import PaymentManager


class TestNOWPaymentsClient:
    """–¢–µ—Å—Ç—ã –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ NOWPayments"""
    
    def setup_method(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–µ—Ä–µ–¥ –∫–∞–∂–¥—ã–º —Ç–µ—Å—Ç–æ–º"""
        self.client = NOWPaymentsClient(
            api_key="test_api_key",
            ipn_secret="test_ipn_secret",
            sandbox=True
        )
    
    def test_client_initialization(self):
        """–¢–µ—Å—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞"""
        assert self.client.api_key == "test_api_key"
        assert self.client.ipn_secret == "test_ipn_secret"
        assert self.client.sandbox is True
        assert "sandbox" in self.client.base_url
    
    def test_verify_ipn_signature(self):
        """–¢–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∏ IPN"""
        payload = '{"payment_id": "test123"}'
        signature = "test_signature"
        
        # –ú–æ–∫–∞–µ–º hmac.compare_digest
        with patch('Payments.nowpayments_client.hmac.compare_digest', return_value=True):
            result = self.client._verify_ipn_signature(payload, signature)
            assert result is True
    
    def test_is_payment_successful(self):
        """–¢–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏ –ø–ª–∞—Ç–µ–∂–∞"""
        # –£—Å–ø–µ—à–Ω—ã–µ —Å—Ç–∞—Ç—É—Å—ã
        successful_payment = NOWPaymentData(
            payment_id="test123",
            status=NOWPaymentStatus.CONFIRMED,
            amount=100.0,
            currency="RUB",
            pay_currency="BTC"
        )
        assert self.client.is_payment_successful(successful_payment) is True
        
        # –ù–µ—É—Å–ø–µ—à–Ω—ã–µ —Å—Ç–∞—Ç—É—Å—ã
        failed_payment = NOWPaymentData(
            payment_id="test123",
            status=NOWPaymentStatus.FAILED,
            amount=100.0,
            currency="RUB",
            pay_currency="BTC"
        )
        assert self.client.is_payment_successful(failed_payment) is False
    
    def test_is_payment_failed(self):
        """–¢–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–µ—É–¥–∞—á–Ω–æ—Å—Ç–∏ –ø–ª–∞—Ç–µ–∂–∞"""
        # –ù–µ—É–¥–∞—á–Ω—ã–µ —Å—Ç–∞—Ç—É—Å—ã
        failed_payment = NOWPaymentData(
            payment_id="test123",
            status=NOWPaymentStatus.FAILED,
            amount=100.0,
            currency="RUB",
            pay_currency="BTC"
        )
        assert self.client.is_payment_failed(failed_payment) is True
        
        # –£—Å–ø–µ—à–Ω—ã–µ —Å—Ç–∞—Ç—É—Å—ã
        successful_payment = NOWPaymentData(
            payment_id="test123",
            status=NOWPaymentStatus.CONFIRMED,
            amount=100.0,
            currency="RUB",
            pay_currency="BTC"
        )
        assert self.client.is_payment_failed(successful_payment) is False
    
    def test_is_payment_pending(self):
        """–¢–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–∂–∏–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞"""
        # –û–∂–∏–¥–∞—é—â–∏–µ —Å—Ç–∞—Ç—É—Å—ã
        pending_payment = NOWPaymentData(
            payment_id="test123",
            status=NOWPaymentStatus.WAITING,
            amount=100.0,
            currency="RUB",
            pay_currency="BTC"
        )
        assert self.client.is_payment_pending(pending_payment) is True
        
        # –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ —Å—Ç–∞—Ç—É—Å—ã
        finished_payment = NOWPaymentData(
            payment_id="test123",
            status=NOWPaymentStatus.FINISHED,
            amount=100.0,
            currency="RUB",
            pay_currency="BTC"
        )
        assert self.client.is_payment_pending(finished_payment) is False


class TestPaymentManager:
    """–¢–µ—Å—Ç—ã –¥–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –ø–ª–∞—Ç–µ–∂–µ–π"""
    
    def setup_method(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–µ—Ä–µ–¥ –∫–∞–∂–¥—ã–º —Ç–µ—Å—Ç–æ–º"""
        # –ú–æ–∫–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        with patch('Payments.payment_system.config') as mock_config:
            mock_config.NOWPAYMENTS_API_KEY = "test_api_key"
            mock_config.NOWPAYMENTS_IPN_SECRET = "test_ipn_secret"
            mock_config.NOWPAYMENTS_SANDBOX = True
            mock_config.NOWPAYMENTS_PAYOUT_ADDRESS = "test_address"
            mock_config.NOWPAYMENTS_PAYOUT_CURRENCY = "BTC"
            mock_config.TELEGRAM_BOT_USERNAME = "test_bot"
            
            self.manager = PaymentManager()
    
    async def test_get_available_crypto_currencies(self):
        """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç"""
        # –ú–æ–∫–∞–µ–º –∫–ª–∏–µ–Ω—Ç NOWPayments
        mock_currencies = [
            Mock(symbol="BTC", name="Bitcoin", is_available=True),
            Mock(symbol="ETH", name="Ethereum", is_available=True)
        ]
        
        with patch.object(self.manager.nowpayments, 'get_available_currencies', 
                         return_value=mock_currencies):
            currencies = await self.manager.get_available_crypto_currencies()
            assert len(currencies) == 2
            assert currencies[0].symbol == "BTC"
    
    async def test_create_crypto_subscription_payment(self):
        """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –∫—Ä–∏–ø—Ç–æ–ø–ª–∞—Ç–µ–∂–∞ –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏"""
        # –ú–æ–∫–∞–µ–º –∫–ª–∏–µ–Ω—Ç NOWPayments
        mock_payment = NOWPaymentData(
            payment_id="test123",
            status=NOWPaymentStatus.NEW,
            amount=500.0,
            currency="RUB",
            pay_currency="BTC"
        )
        
        with patch.object(self.manager.nowpayments, 'create_payment', 
                         return_value=mock_payment):
            payment = await self.manager.create_crypto_subscription_payment(
                user_id=12345,
                subscription_type="premium_30",
                amount=500.0,
                description="Test subscription",
                crypto_currency="BTC"
            )
            
            assert payment is not None
            assert payment.payment_id == "test123"
            assert payment.amount == 500.0
    
    async def test_check_crypto_payment_status(self):
        """–¢–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –∫—Ä–∏–ø—Ç–æ–ø–ª–∞—Ç–µ–∂–∞"""
        # –ú–æ–∫–∞–µ–º –∫–ª–∏–µ–Ω—Ç NOWPayments
        mock_payment = NOWPaymentData(
            payment_id="test123",
            status=NOWPaymentStatus.CONFIRMED,
            amount=500.0,
            currency="RUB",
            pay_currency="BTC"
        )
        
        with patch.object(self.manager.nowpayments, 'get_payment_status', 
                         return_value=mock_payment):
            payment = await self.manager.check_crypto_payment_status("test123")
            
            assert payment is not None
            assert payment.payment_id == "test123"
            assert payment.status == NOWPaymentStatus.CONFIRMED
    
    def test_is_crypto_payment_successful(self):
        """–¢–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏ –∫—Ä–∏–ø—Ç–æ–ø–ª–∞—Ç–µ–∂–∞"""
        # –£—Å–ø–µ—à–Ω—ã–π –ø–ª–∞—Ç–µ–∂
        successful_payment = NOWPaymentData(
            payment_id="test123",
            status=NOWPaymentStatus.CONFIRMED,
            amount=500.0,
            currency="RUB",
            pay_currency="BTC"
        )
        
        with patch.object(self.manager.nowpayments, 'is_payment_successful', 
                         return_value=True):
            result = self.manager.is_crypto_payment_successful(successful_payment)
            assert result is True
    
    async def test_get_crypto_price_estimate(self):
        """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–∏–º–µ—Ä–Ω–æ–π —Ü–µ–Ω—ã –≤ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–µ"""
        # –ú–æ–∫–∞–µ–º –∫–ª–∏–µ–Ω—Ç NOWPayments
        with patch.object(self.manager.nowpayments, 'get_estimated_price', 
                         return_value=0.00001234):
            price = await self.manager.get_crypto_price_estimate(500.0, "BTC")
            assert price == 0.00001234


def test_nowpayment_status_enum():
    """–¢–µ—Å—Ç enum —Å—Ç–∞—Ç—É—Å–æ–≤ NOWPayments"""
    assert NOWPaymentStatus.NEW.value == "new"
    assert NOWPaymentStatus.CONFIRMED.value == "confirmed"
    assert NOWPaymentStatus.FINISHED.value == "finished"
    assert NOWPaymentStatus.FAILED.value == "failed"


def test_nowpayment_data_dataclass():
    """–¢–µ—Å—Ç dataclass NOWPaymentData"""
    payment = NOWPaymentData(
        payment_id="test123",
        status=NOWPaymentStatus.NEW,
        amount=100.0,
        currency="RUB",
        pay_currency="BTC",
        description="Test payment"
    )
    
    assert payment.payment_id == "test123"
    assert payment.status == NOWPaymentStatus.NEW
    assert payment.amount == 100.0
    assert payment.currency == "RUB"
    assert payment.pay_currency == "BTC"
    assert payment.description == "Test payment"


if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
    print("üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ NOWPayments –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏...")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º enum
    test_nowpayment_status_enum()
    print("‚úÖ –¢–µ—Å—Ç enum —Å—Ç–∞—Ç—É—Å–æ–≤ –ø—Ä–æ—à–µ–ª")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º dataclass
    test_nowpayment_data_dataclass()
    print("‚úÖ –¢–µ—Å—Ç dataclass –ø—Ä–æ—à–µ–ª")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–ª–∏–µ–Ω—Ç
    client_test = TestNOWPaymentsClient()
    client_test.setup_method()
    client_test.test_client_initialization()
    print("‚úÖ –¢–µ—Å—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞ –ø—Ä–æ—à–µ–ª")
    
    client_test.test_verify_ipn_signature()
    print("‚úÖ –¢–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∏ –ø—Ä–æ—à–µ–ª")
    
    client_test.test_is_payment_successful()
    print("‚úÖ –¢–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏ –ø–ª–∞—Ç–µ–∂–∞ –ø—Ä–æ—à–µ–ª")
    
    client_test.test_is_payment_failed()
    print("‚úÖ –¢–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–µ—É–¥–∞—á–Ω–æ—Å—Ç–∏ –ø–ª–∞—Ç–µ–∂–∞ –ø—Ä–æ—à–µ–ª")
    
    client_test.test_is_payment_pending()
    print("‚úÖ –¢–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–∂–∏–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞ –ø—Ä–æ—à–µ–ª")
    
    print("\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã NOWPayments –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")
    print("\nüìã –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
    print("1. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –≤ .env —Ñ–∞–π–ª–µ")
    print("2. –ü–æ–ª—É—á–∏—Ç–µ API –∫–ª—é—á–∏ –æ—Ç NOWPayments")
    print("3. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é –≤ sandbox —Ä–µ–∂–∏–º–µ")
    print("4. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ webhook –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")
