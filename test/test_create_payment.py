"""
–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞ —á–µ—Ä–µ–∑ NOWPayments
"""

import asyncio
import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from Payments.payment_system import payment_manager
from config import config


async def test_create_subscription_payment():
    """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞ –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏"""
    print("üß™ –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞ –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏...")
    
    try:
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂
        payment = await payment_manager.create_crypto_subscription_payment(
            user_id=12345,
            subscription_type="premium_30",
            amount=500.0,
            description="Test Premium subscription payment",
            crypto_currency="BTC"
        )
        
        if payment:
            print("‚úÖ –ü–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!")
            print(f"   Payment ID: {payment.payment_id}")
            print(f"   Status: {payment.status.value}")
            print(f"   Amount: {payment.amount} {payment.currency}")
            print(f"   Pay Currency: {payment.pay_currency}")
            print(f"   Payment URL: {payment.payment_url}")
            return True
        else:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–ª–∞—Ç–µ–∂")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞: {e}")
        return False


async def test_create_analyses_payment():
    """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –∞–Ω–∞–ª–∏–∑–æ–≤"""
    print("\nüß™ –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–æ–≤...")
    
    try:
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂
        payment = await payment_manager.create_crypto_analyses_payment(
            user_id=12345,
            analyses_count=10,
            amount=100.0,
            description="Test analyses purchase payment",
            crypto_currency="ETH"
        )
        
        if payment:
            print("‚úÖ –ü–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!")
            print(f"   Payment ID: {payment.payment_id}")
            print(f"   Status: {payment.status.value}")
            print(f"   Amount: {payment.amount} {payment.currency}")
            print(f"   Pay Currency: {payment.pay_currency}")
            print(f"   Payment URL: {payment.payment_url}")
            return True
        else:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–ª–∞—Ç–µ–∂")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞: {e}")
        return False


async def test_get_crypto_price():
    """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω—ã –≤ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–µ"""
    print("\nüí∞ –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω—ã –≤ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–µ...")
    
    try:
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–Ω—ã–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã
        currencies = ["BTC", "ETH", "USDT"]
        
        for currency in currencies:
            price = await payment_manager.get_crypto_price_estimate(500.0, currency)
            if price:
                print(f"‚úÖ 500 RUB = {price:.8f} {currency}")
            else:
                print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ü–µ–Ω—É –¥–ª—è {currency}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω—ã: {e}")
        return False


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –°–û–ó–î–ê–ù–ò–Ø –ü–õ–ê–¢–ï–ñ–ï–ô")
    print("=" * 50)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    api_key = getattr(config, 'NOWPAYMENTS_API_KEY', None)
    if not api_key:
        print("‚ùå NOWPAYMENTS_API_KEY –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω!")
        return
    
    print(f"üîë API Key: {'‚úÖ –ù–∞—Å—Ç—Ä–æ–µ–Ω' if api_key else '‚ùå –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω'}")
    print(f"üîó Sandbox: {'‚úÖ –í–∫–ª—é—á–µ–Ω' if getattr(config, 'NOWPAYMENTS_SANDBOX', True) else '‚ùå –í—ã–∫–ª—é—á–µ–Ω'}")
    
    # –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω—ã
    price_ok = await test_get_crypto_price()
    
    if price_ok:
        # –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞ –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏
        subscription_ok = await test_create_subscription_payment()
        
        # –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–æ–≤
        analyses_ok = await test_create_analyses_payment()
        
        if subscription_ok and analyses_ok:
            print("\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–µ–π –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")
            print("\nüìã –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
            print("1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–ª–∞—Ç–µ–∂–∏ –≤ –ø–∞–Ω–µ–ª–∏ NOWPayments")
            print("2. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ —Ä–µ–∞–ª—å–Ω—É—é –æ–ø–ª–∞—Ç—É")
            print("3. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ webhook –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")
        else:
            print("\n‚ùå –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ—à–ª–∏")
    else:
        print("\n‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ü–µ–Ω—ã - –ø—Ä–æ–≤–µ—Ä—å—Ç–µ API –∫–ª—é—á–∏")


if __name__ == "__main__":
    asyncio.run(main())
