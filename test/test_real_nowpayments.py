"""
–¢–µ—Å—Ç —Ä–µ–∞–ª—å–Ω–æ–π —Ä–∞–±–æ—Ç—ã —Å NOWPayments API
"""

import asyncio
import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from Payments.nowpayments_client import NOWPaymentsClient
from Payments.payment_system import PaymentManager
from config import config


async def test_nowpayments_connection():
    """–¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ NOWPayments API"""
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ NOWPayments...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ API –∫–ª—é—á–µ–π
    api_key = getattr(config, 'NOWPAYMENTS_API_KEY', None)
    ipn_secret = getattr(config, 'NOWPAYMENTS_IPN_SECRET', None)
    sandbox = getattr(config, 'NOWPAYMENTS_SANDBOX', True)
    
    print(f"API Key: {'‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' if api_key else '‚ùå –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}")
    print(f"IPN Secret: {'‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' if ipn_secret else '‚ùå –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}")
    print(f"Sandbox —Ä–µ–∂–∏–º: {'‚úÖ –í–∫–ª—é—á–µ–Ω' if sandbox else '‚ùå –í—ã–∫–ª—é—á–µ–Ω'}")
    
    if not api_key or not ipn_secret:
        print("\n‚ùå –ü—Ä–æ–±–ª–µ–º–∞: API –∫–ª—é—á–∏ NOWPayments –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã!")
        print("üìã –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–æ–±–∞–≤–∏—Ç—å –≤ .env —Ñ–∞–π–ª:")
        print("NOWPAYMENTS_API_KEY=your_api_key")
        print("NOWPAYMENTS_IPN_SECRET=your_ipn_secret")
        return False
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç
    client = NOWPaymentsClient(api_key, ipn_secret, sandbox)
    print(f"\nüîó –ë–∞–∑–æ–≤—ã–π URL: {client.base_url}")
    
    try:
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç
        print("\nü™ô –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç...")
        currencies = await client.get_available_currencies()
        
        if currencies:
            print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(currencies)} –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç")
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5
            for i, currency in enumerate(currencies[:5]):
                print(f"  {i+1}. {currency.symbol} - {currency.name} ({'‚úÖ' if currency.is_available else '‚ùå'})")
            if len(currencies) > 5:
                print(f"  ... –∏ –µ—â–µ {len(currencies) - 5} –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç")
        else:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç")
            return False
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ —Ü–µ–Ω—ã
        print("\nüí∞ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω—ã...")
        price = await client.get_estimated_price(500.0, "RUB", "BTC")
        
        if price:
            print(f"‚úÖ –ü—Ä–∏–º–µ—Ä–Ω–∞—è —Ü–µ–Ω–∞: 500 RUB = {price:.8f} BTC")
        else:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–∏–º–µ—Ä–Ω—É—é —Ü–µ–Ω—É")
            return False
        
        print("\n‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã NOWPayments –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")
        return True
        
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ NOWPayments: {e}")
        return False


async def test_payment_manager():
    """–¢–µ—Å—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –ø–ª–∞—Ç–µ–∂–µ–π"""
    print("\nüîß –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ PaymentManager...")
    
    try:
        manager = PaymentManager()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é
        if manager.nowpayments:
            print("‚úÖ NOWPayments –∫–ª–∏–µ–Ω—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        else:
            print("‚ùå NOWPayments –∫–ª–∏–µ–Ω—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            return False
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç —á–µ—Ä–µ–∑ –º–µ–Ω–µ–¥–∂–µ—Ä
        print("ü™ô –ü–æ–ª—É—á–µ–Ω–∏–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç —á–µ—Ä–µ–∑ –º–µ–Ω–µ–¥–∂–µ—Ä...")
        currencies = await manager.get_available_crypto_currencies()
        
        if currencies:
            print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(currencies)} –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç —á–µ—Ä–µ–∑ –º–µ–Ω–µ–¥–∂–µ—Ä")
        else:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã —á–µ—Ä–µ–∑ –º–µ–Ω–µ–¥–∂–µ—Ä")
            return False
        
        print("‚úÖ PaymentManager —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ PaymentManager: {e}")
        return False


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∞–ª—å–Ω–æ–π —Ä–∞–±–æ—Ç—ã —Å NOWPayments...")
    print("=" * 50)
    
    # –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    connection_ok = await test_nowpayments_connection()
    
    if connection_ok:
        # –¢–µ—Å—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –ø–ª–∞—Ç–µ–∂–µ–π
        manager_ok = await test_payment_manager()
        
        if manager_ok:
            print("\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")
            print("\nüìã –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
            print("1. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ API –∫–ª—é—á–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã")
            print("2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ webhook –≤ –ø–∞–Ω–µ–ª–∏ NOWPayments")
            print("3. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ —Å–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞")
        else:
            print("\n‚ùå –ü—Ä–æ–±–ª–µ–º—ã —Å PaymentManager")
    else:
        print("\n‚ùå –ü—Ä–æ–±–ª–µ–º—ã —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∫ NOWPayments")
        print("\nüîß –í–æ–∑–º–æ–∂–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è:")
        print("1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å API –∫–ª—é—á–µ–π")
        print("2. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –∞–∫–∫–∞—É–Ω—Ç NOWPayments –∞–∫—Ç–∏–≤–µ–Ω")
        print("3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ sandbox/production —Ä–µ–∂–∏–º–∞")


if __name__ == "__main__":
    asyncio.run(main())
