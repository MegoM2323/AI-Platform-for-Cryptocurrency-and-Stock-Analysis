#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –∞–Ω–∞–ª–∏–∑–∞ —Ç–æ–∫–µ–Ω–æ–≤ —á–µ—Ä–µ–∑ –±–æ—Ç–∞
"""

import asyncio
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.append(str(Path(__file__).parent))

from config import config
from data_collectors import CryptoCollector, DataFormatter
from AI_block import AIAnalyzer


async def test_analysis():
    """–¢–µ—Å—Ç –ø–æ–ª–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ —Ç–æ–∫–µ–Ω–∞"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞ —Ç–æ–∫–µ–Ω–∞ BTC...")
    
    try:
        # –°–æ–∑–¥–∞–µ–º –∫–æ–ª–ª–µ–∫—Ç–æ—Ä
        collector = CryptoCollector()
        print("‚úÖ CryptoCollector —Å–æ–∑–¥–∞–Ω")
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        symbol = "BTC"
        data = collector.get_crypto_data(symbol)
        if data is None or data.empty:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ")
            return False
        
        print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(data)} –∑–∞–ø–∏—Å–µ–π –¥–∞–Ω–Ω—ã—Ö")
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É
        current_price = collector.get_current_price(symbol)
        print(f"‚úÖ –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: ${current_price:,.2f}")
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
        formatter = DataFormatter()
        formatted_data = formatter.format_for_analysis(data, symbol, current_price)
        print("‚úÖ –î–∞–Ω–Ω—ã–µ –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω—ã")
        
        # –°–æ–∑–¥–∞–µ–º –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä
        analyzer = AIAnalyzer(
            api_key=config.OPENROUTER_API_KEY,
            model=config.AI_MODEL
        )
        print("‚úÖ AIAnalyzer —Å–æ–∑–¥–∞–Ω")
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –∞–Ω–∞–ª–∏–∑
        analysis = await analyzer.analyze_crypto(formatted_data, symbol)
        if analysis:
            print("‚úÖ –ê–Ω–∞–ª–∏–∑ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
            print(f"üìä –î–ª–∏–Ω–∞ –∞–Ω–∞–ª–∏–∑–∞: {len(analysis)} —Å–∏–º–≤–æ–ª–æ–≤")
            print("\n" + "="*50)
            print("–ü–ï–†–í–´–ï 500 –°–ò–ú–í–û–õ–û–í –ê–ù–ê–õ–ò–ó–ê:")
            print("="*50)
            print(analysis[:500] + "...")
            print("="*50)
            return True
        else:
            print("‚ùå –ê–Ω–∞–ª–∏–∑ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
        return False


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ –¢–ï–°–¢ –ê–ù–ê–õ–ò–ó–ê –¢–û–ö–ï–ù–û–í")
    print("="*50)
    
    success = await test_analysis()
    
    if success:
        print("\nüéâ –¢–ï–°–¢ –ü–†–û–®–ï–õ –£–°–ü–ï–®–ù–û!")
        print("–ê–Ω–∞–ª–∏–∑ —Ç–æ–∫–µ–Ω–æ–≤ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
    else:
        print("\n‚ùå –¢–ï–°–¢ –ù–ï –ü–†–û–®–ï–õ!")
        print("–ï—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã —Å –∞–Ω–∞–ª–∏–∑–æ–º —Ç–æ–∫–µ–Ω–æ–≤.")


if __name__ == "__main__":
    asyncio.run(main())
