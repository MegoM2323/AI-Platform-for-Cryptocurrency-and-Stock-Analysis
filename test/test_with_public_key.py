"""
–¢–µ—Å—Ç NOWPayments —Å –ø—É–±–ª–∏—á–Ω—ã–º API –∫–ª—é—á–æ–º
"""

import asyncio
import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from Payments.nowpayments_client import NOWPaymentsClient
from Payments.payment_system import PaymentManager
from config import config


async def test_with_public_key():
    """–¢–µ—Å—Ç —Å –ø—É–±–ª–∏—á–Ω—ã–º API –∫–ª—é—á–æ–º"""
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å –ø—É–±–ª–∏—á–Ω—ã–º –∫–ª—é—á–æ–º...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≤—Å–µ—Ö –∫–ª—é—á–µ–π
    api_key = getattr(config, 'NOWPAYMENTS_API_KEY', None)
    public_api_key = getattr(config, 'NOWPAYMENTS_PUBLIC_API_KEY', None)
    ipn_secret = getattr(config, 'NOWPAYMENTS_IPN_SECRET', None)
    sandbox = getattr(config, 'NOWPAYMENTS_SANDBOX', True)
    
    print(f"üîë Private API Key: {'‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' if api_key else '‚ùå –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}")
    print(f"üîë Public API Key: {'‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' if public_api_key else '‚ùå –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}")
    print(f"üîê IPN Secret: {'‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' if ipn_secret else '‚ùå –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}")
    print(f"üîó Sandbox: {'‚úÖ –í–∫–ª—é—á–µ–Ω' if sandbox else '‚ùå –í—ã–∫–ª—é—á–µ–Ω'}")
    
    if not api_key or not ipn_secret:
        print("\n‚ùå –ü—Ä–æ–±–ª–µ–º–∞: –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –∫–ª—é—á–∏!")
        return False
    
    if not public_api_key:
        print("\n‚ö†Ô∏è  –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –ü—É–±–ª–∏—á–Ω—ã–π API –∫–ª—é—á –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        print("   –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –º–æ–≥—É—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞—Ç—å")
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç
    client = NOWPaymentsClient(api_key, ipn_secret, sandbox, public_api_key)
    print(f"\nüîó –ë–∞–∑–æ–≤—ã–π URL: {client.base_url}")
    
    try:
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç
        print("\nü™ô –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç...")
        currencies = await client.get_available_currencies()
        
        if currencies:
            print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(currencies)} –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç")
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5
            for i, currency in enumerate(currencies[:5]):
                status = "‚úÖ" if currency.is_available else "‚ùå"
                print(f"  {i+1}. {currency.symbol} - {currency.name} {status}")
            if len(currencies) > 5:
                print(f"  ... –∏ –µ—â–µ {len(currencies) - 5} –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç")
        else:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç")
            return False
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ —Ü–µ–Ω—ã
        print("\nüí∞ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω—ã...")
        price = await client.get_estimated_price(500.0, "RUB", "BTC")
        
        if price:
            print(f"‚úÖ –ü—Ä–∏–º–µ—Ä–Ω–∞—è —Ü–µ–Ω–∞: 500 RUB = {price:.8f} BTC")
        else:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–∏–º–µ—Ä–Ω—É—é —Ü–µ–Ω—É")
            return False
        
        print("\n‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã —Å –ø—É–±–ª–∏—á–Ω—ã–º –∫–ª—é—á–æ–º –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")
        return True
        
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")
        return False


async def test_payment_manager_with_public_key():
    """–¢–µ—Å—Ç PaymentManager —Å –ø—É–±–ª–∏—á–Ω—ã–º –∫–ª—é—á–æ–º"""
    print("\nüîß –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ PaymentManager —Å –ø—É–±–ª–∏—á–Ω—ã–º –∫–ª—é—á–æ–º...")
    
    try:
        manager = PaymentManager()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é
        if manager.nowpayments:
            print("‚úÖ NOWPayments –∫–ª–∏–µ–Ω—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        else:
            print("‚ùå NOWPayments –∫–ª–∏–µ–Ω—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            return False
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç —á–µ—Ä–µ–∑ –º–µ–Ω–µ–¥–∂–µ—Ä
        print("ü™ô –ü–æ–ª—É—á–µ–Ω–∏–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç —á–µ—Ä–µ–∑ –º–µ–Ω–µ–¥–∂–µ—Ä...")
        currencies = await manager.get_available_crypto_currencies()
        
        if currencies:
            print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(currencies)} –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç —á–µ—Ä–µ–∑ –º–µ–Ω–µ–¥–∂–µ—Ä")
        else:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã —á–µ—Ä–µ–∑ –º–µ–Ω–µ–¥–∂–µ—Ä")
            return False
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ —Ü–µ–Ω—ã
        print("üí∞ –ü–æ–ª—É—á–µ–Ω–∏–µ —Ü–µ–Ω—ã —á–µ—Ä–µ–∑ –º–µ–Ω–µ–¥–∂–µ—Ä...")
        price = await manager.get_crypto_price_estimate(500.0, "BTC")
        
        if price:
            print(f"‚úÖ –¶–µ–Ω–∞ —á–µ—Ä–µ–∑ –º–µ–Ω–µ–¥–∂–µ—Ä: 500 RUB = {price:.8f} BTC")
        else:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ü–µ–Ω—É —á–µ—Ä–µ–∑ –º–µ–Ω–µ–¥–∂–µ—Ä")
            return False
        
        print("‚úÖ PaymentManager —Å –ø—É–±–ª–∏—á–Ω—ã–º –∫–ª—é—á–æ–º —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ PaymentManager: {e}")
        return False


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï NOWPAYMENTS –° –ü–£–ë–õ–ò–ß–ù–´–ú –ö–õ–Æ–ß–û–ú")
    print("=" * 60)
    
    # –¢–µ—Å—Ç —Å –ø—É–±–ª–∏—á–Ω—ã–º –∫–ª—é—á–æ–º
    public_key_ok = await test_with_public_key()
    
    if public_key_ok:
        # –¢–µ—Å—Ç PaymentManager
        manager_ok = await test_payment_manager_with_public_key()
        
        if manager_ok:
            print("\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã —Å –ø—É–±–ª–∏—á–Ω—ã–º –∫–ª—é—á–æ–º –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")
            print("\nüìã –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
            print("1. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ø—É–±–ª–∏—á–Ω—ã–π API –∫–ª—é—á –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π")
            print("2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ webhook")
            print("3. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ —Å–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞")
        else:
            print("\n‚ùå –ü—Ä–æ–±–ª–µ–º—ã —Å PaymentManager")
    else:
        print("\n‚ùå –ü—Ä–æ–±–ª–µ–º—ã —Å –ø—É–±–ª–∏—á–Ω—ã–º –∫–ª—é—á–æ–º")
        print("\nüîß –í–æ–∑–º–æ–∂–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è:")
        print("1. –î–æ–±–∞–≤—å—Ç–µ NOWPAYMENTS_PUBLIC_API_KEY –≤ .env —Ñ–∞–π–ª")
        print("2. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ø—É–±–ª–∏—á–Ω—ã–π –∫–ª—é—á –∞–∫—Ç–∏–≤–µ–Ω")
        print("3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ sandbox/production —Ä–µ–∂–∏–º–∞")


if __name__ == "__main__":
    asyncio.run(main())
