"""
–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã —Å –ø—Ä–∞–≤–∞–º–∏ –¥–æ—Å—Ç—É–ø–∞ NOWPayments API
"""

import asyncio
import sys
import os
import aiohttp

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from config import config


async def test_with_correct_permissions():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –ø—Ä–∞–≤–∞–º–∏ –¥–æ—Å—Ç—É–ø–∞"""
    print("üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã —Å –ø—Ä–∞–≤–∞–º–∏ –¥–æ—Å—Ç—É–ø–∞...")
    
    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    api_key = getattr(config, 'NOWPAYMENTS_API_KEY', None)
    public_api_key = getattr(config, 'NOWPAYMENTS_PUBLIC_API_KEY', None)
    sandbox = getattr(config, 'NOWPAYMENTS_SANDBOX', True)
    
    base_url = "https://api-sandbox.nowpayments.io/v1" if sandbox else "https://api.nowpayments.io/v1"
    
    print(f"üîë Private API Key: {'‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' if api_key else '‚ùå –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}")
    print(f"üîë Public API Key: {'‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' if public_api_key else '‚ùå –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}")
    print(f"üîó Sandbox: {'‚úÖ –í–∫–ª—é—á–µ–Ω' if sandbox else '‚ùå –í—ã–∫–ª—é—á–µ–Ω'}")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å –ø—Ä–∏–≤–∞—Ç–Ω—ã–º –∫–ª—é—á–æ–º (–¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å –ø–æ–ª–Ω—ã–µ –ø—Ä–∞–≤–∞)
    print(f"\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å PRIVATE API KEY...")
    await test_endpoints_with_key(base_url, api_key, "Private")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å –ø—É–±–ª–∏—á–Ω—ã–º –∫–ª—é—á–æ–º (–º–æ–∂–µ—Ç –∏–º–µ—Ç—å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–µ –ø—Ä–∞–≤–∞)
    print(f"\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å PUBLIC API KEY...")
    await test_endpoints_with_key(base_url, public_api_key, "Public")


async def test_endpoints_with_key(base_url, api_key, key_type):
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ endpoints —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º –∫–ª—é—á–æ–º"""
    if not api_key:
        print(f"   ‚ùå {key_type} API –∫–ª—é—á –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        return
    
    endpoints = [
        ("/status", "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞"),
        ("/currencies", "–ü–æ–ª—É—á–µ–Ω–∏–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç"),
        ("/estimate", "–ü–æ–ª—É—á–µ–Ω–∏–µ —Ü–µ–Ω—ã"),
    ]
    
    for endpoint, description in endpoints:
        print(f"\n   üß™ {description} ({endpoint})")
        
        try:
            async with aiohttp.ClientSession() as session:
                headers = {
                    "x-api-key": api_key,
                    "Content-Type": "application/json"
                }
                
                if endpoint == "/estimate":
                    # –î–æ–±–∞–≤–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è estimate
                    params = {
                        "amount": 500,
                        "currency_from": "RUB",
                        "currency_to": "BTC"
                    }
                    async with session.get(f"{base_url}{endpoint}", headers=headers, params=params) as response:
                        await handle_endpoint_response(response, endpoint, key_type)
                else:
                    async with session.get(f"{base_url}{endpoint}", headers=headers) as response:
                        await handle_endpoint_response(response, endpoint, key_type)
                        
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞: {e}")


async def handle_endpoint_response(response, endpoint, key_type):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –æ—Ç endpoint"""
    status = response.status
    text = await response.text()
    
    print(f"      üìä Status: {status}")
    
    if status == 200:
        print(f"      ‚úÖ –£—Å–ø–µ—à–Ω–æ —Å {key_type} –∫–ª—é—á–æ–º!")
        if endpoint == "/currencies":
            try:
                import json
                data = json.loads(text)
                currencies = data.get("currencies", [])
                print(f"      üìä –ü–æ–ª—É—á–µ–Ω–æ {len(currencies)} –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç")
            except:
                pass
        elif endpoint == "/estimate":
            try:
                import json
                data = json.loads(text)
                estimated_amount = data.get("estimated_amount")
                if estimated_amount:
                    print(f"      üìä –¶–µ–Ω–∞: 500 RUB = {estimated_amount} BTC")
            except:
                pass
    elif status == 403:
        print(f"      ‚ùå 403 - –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ —Å {key_type} –∫–ª—é—á–æ–º")
        print(f"      üìÑ Response: {text}")
    elif status == 401:
        print(f"      ‚ùå 401 - –ù–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω —Å {key_type} –∫–ª—é—á–æ–º")
        print(f"      üìÑ Response: {text}")
    else:
        print(f"      ‚ùå –û—à–∏–±–∫–∞ {status} —Å {key_type} –∫–ª—é—á–æ–º")
        print(f"      üìÑ Response: {text[:100]}...")


async def check_api_key_permissions():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ API –∫–ª—é—á–µ–π"""
    print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ API –∫–ª—é—á–µ–π...")
    
    api_key = getattr(config, 'NOWPAYMENTS_API_KEY', None)
    public_api_key = getattr(config, 'NOWPAYMENTS_PUBLIC_API_KEY', None)
    sandbox = getattr(config, 'NOWPAYMENTS_SANDBOX', True)
    
    base_url = "https://api-sandbox.nowpayments.io/v1" if sandbox else "https://api.nowpayments.io/v1"
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–Ω—ã–µ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏ –∫–ª—é—á–µ–π
    key_combinations = [
        (api_key, "Private API Key"),
        (public_api_key, "Public API Key"),
    ]
    
    for key, key_name in key_combinations:
        if not key:
            continue
            
        print(f"\nüîë –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ {key_name}:")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤—Å–µ endpoints
        await test_all_endpoints_with_key(base_url, key, key_name)


async def test_all_endpoints_with_key(base_url, api_key, key_name):
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö endpoints —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º –∫–ª—é—á–æ–º"""
    endpoints = [
        ("/status", "GET", "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞"),
        ("/currencies", "GET", "–ü–æ–ª—É—á–µ–Ω–∏–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç"),
        ("/estimate", "GET", "–ü–æ–ª—É—á–µ–Ω–∏–µ —Ü–µ–Ω—ã"),
    ]
    
    for endpoint, method, description in endpoints:
        print(f"   üß™ {description}...")
        
        try:
            async with aiohttp.ClientSession() as session:
                headers = {
                    "x-api-key": api_key,
                    "Content-Type": "application/json"
                }
                
                if endpoint == "/estimate":
                    params = {
                        "amount": 500,
                        "currency_from": "RUB",
                        "currency_to": "BTC"
                    }
                    async with session.get(f"{base_url}{endpoint}", headers=headers, params=params) as response:
                        status = response.status
                        text = await response.text()
                        
                        if status == 200:
                            print(f"      ‚úÖ –£—Å–ø–µ—à–Ω–æ!")
                        else:
                            print(f"      ‚ùå –û—à–∏–±–∫–∞ {status}: {text[:50]}...")
                else:
                    async with session.get(f"{base_url}{endpoint}", headers=headers) as response:
                        status = response.status
                        text = await response.text()
                        
                        if status == 200:
                            print(f"      ‚úÖ –£—Å–ø–µ—à–Ω–æ!")
                        else:
                            print(f"      ‚ùå –û—à–∏–±–∫–∞ {status}: {text[:50]}...")
                            
        except Exception as e:
            print(f"      ‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {e}")


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ü–†–û–ë–õ–ï–ú–´ –° –ü–†–ê–í–ê–ú–ò –î–û–°–¢–£–ü–ê")
    print("=" * 60)
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –ø—Ä–∞–≤–∞–º–∏
    await test_with_correct_permissions()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ API –∫–ª—é—á–µ–π
    await check_api_key_permissions()
    
    print("\n" + "=" * 60)
    print("üìã –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê")
    print("\nüîß –í–û–ó–ú–û–ñ–ù–´–ï –†–ï–®–ï–ù–ò–Ø:")
    print("1. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π API –∫–ª—é—á –¥–ª—è –Ω—É–∂–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π")
    print("2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –≤ –ø–∞–Ω–µ–ª–∏ NOWPayments")
    print("3. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –∞–∫–∫–∞—É–Ω—Ç –ø–æ–ª–Ω–æ—Å—Ç—å—é –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω")
    print("4. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ API –∫–ª—é—á –∏–º–µ–µ—Ç –ø—Ä–∞–≤–∞ –Ω–∞ —á—Ç–µ–Ω–∏–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç –∏ —Ü–µ–Ω")
    print("5. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π API –∫–ª—é—á —Å –ø–æ–ª–Ω—ã–º–∏ –ø—Ä–∞–≤–∞–º–∏")


if __name__ == "__main__":
    asyncio.run(main())
