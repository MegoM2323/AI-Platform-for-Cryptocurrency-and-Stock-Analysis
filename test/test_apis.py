#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Å–µ—Ö API –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö –≤ –ø—Ä–æ–µ–∫—Ç–µ
–ü–æ–º–æ–≥–∞–µ—Ç –Ω–∞–π—Ç–∏ –ø—Ä–æ–±–ª–µ–º—ã —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è–º–∏ –∏ –∫–ª—é—á–∞–º–∏
"""

import asyncio
import sys
import os
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.append(str(Path(__file__).parent))

from config import config
from data_collectors import CryptoCollector, DataFormatter
from AI_block import AIAnalyzer
from database import Database


class APITester:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Å–µ—Ö API"""
    
    def __init__(self):
        self.results = {}
        self.errors = []
    
    def print_header(self, title):
        """–ü–µ—á–∞—Ç—å –∑–∞–≥–æ–ª–æ–≤–∫–∞ —Ç–µ—Å—Ç–∞"""
        print(f"\n{'='*60}")
        print(f"üß™ {title}")
        print(f"{'='*60}")
    
    def print_result(self, test_name, success, message="", error=None):
        """–ü–µ—á–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Ç–µ—Å—Ç–∞"""
        status = "‚úÖ –£–°–ü–ï–•" if success else "‚ùå –û–®–ò–ë–ö–ê"
        print(f"{status} {test_name}")
        if message:
            print(f"   üìù {message}")
        if error:
            print(f"   üî• –û—à–∏–±–∫–∞: {error}")
            self.errors.append(f"{test_name}: {error}")
        
        self.results[test_name] = success
    
    async def test_config(self):
        """–¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        self.print_header("–ü–†–û–í–ï–†–ö–ê –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò")
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≥—Ä—É–∑–∫—É –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            config.validate()
            self.print_result("–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏", True, "–í—Å–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–ª—é—á–µ–π
            keys_status = {
                "TELEGRAM_BOT_TOKEN": bool(config.TELEGRAM_BOT_TOKEN),
                "OPENROUTER_API_KEY": bool(config.OPENROUTER_API_KEY),
                "TWELVE_DATA_API_KEY": bool(config.TWELVE_DATA_API_KEY)
            }
            
            for key, present in keys_status.items():
                if present:
                    self.print_result(f"–ö–ª—é—á {key}", True, "–ù–∞–π–¥–µ–Ω")
                else:
                    self.print_result(f"–ö–ª—é—á {key}", False, "–û–¢–°–£–¢–°–¢–í–£–ï–¢!")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º debug –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            debug_info = config.get_debug_info()
            self.print_result("Debug –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", True, f"–†–µ–∂–∏–º: {debug_info}")
            
        except Exception as e:
            self.print_result("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è", False, error=str(e))
    
    async def test_database(self):
        """–¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        self.print_header("–ü–†–û–í–ï–†–ö–ê –ë–ê–ó–´ –î–ê–ù–ù–´–•")
        
        try:
            db = Database(config.DATABASE_PATH)
            self.print_result("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î", True, "–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∞")
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü
            await db.init_db()
            self.print_result("–°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü", True, "–¢–∞–±–ª–∏—Ü—ã —Å–æ–∑–¥–∞–Ω—ã/–ø—Ä–æ–≤–µ—Ä–µ–Ω—ã")
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–æ—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å
            test_user_id = 12345
            user_data = await db.get_user(test_user_id)
            self.print_result("–ß—Ç–µ–Ω–∏–µ –∏–∑ –ë–î", True, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_data}")
            
        except Exception as e:
            self.print_result("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö", False, error=str(e))
    
    async def test_twelvedata_api(self):
        """–¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ Twelve Data API"""
        self.print_header("–ü–†–û–í–ï–†–ö–ê TWELVE DATA API")
        
        try:
            collector = CryptoCollector()
            self.print_result("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–ª–ª–µ–∫—Ç–æ—Ä–∞", True, "CryptoCollector —Å–æ–∑–¥–∞–Ω")
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏—é —Å–∏–º–≤–æ–ª–∞
            test_symbol = "BTC"
            is_valid = collector.validate_symbol(test_symbol)
            self.print_result(f"–í–∞–ª–∏–¥–∞—Ü–∏—è —Å–∏–º–≤–æ–ª–∞ {test_symbol}", is_valid, 
                            "–°–∏–º–≤–æ–ª –Ω–∞–π–¥–µ–Ω" if is_valid else "–°–∏–º–≤–æ–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
            
            if is_valid:
                # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
                data = collector.get_crypto_data(test_symbol)
                if data is not None and not data.empty:
                    self.print_result(f"–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö {test_symbol}", True, 
                                    f"–ü–æ–ª—É—á–µ–Ω–æ {len(data)} –∑–∞–ø–∏—Å–µ–π")
                else:
                    self.print_result(f"–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö {test_symbol}", False, 
                                    "–î–∞–Ω–Ω—ã–µ –Ω–µ –ø–æ–ª—É—á–µ–Ω—ã")
                
                # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω—ã
                current_price = collector.get_current_price(test_symbol)
                if current_price:
                    self.print_result(f"–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞ {test_symbol}", True, 
                                    f"–¶–µ–Ω–∞: ${current_price:,.2f}")
                else:
                    self.print_result(f"–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞ {test_symbol}", False, 
                                    "–¶–µ–Ω–∞ –Ω–µ –ø–æ–ª—É—á–µ–Ω–∞")
            
        except Exception as e:
            self.print_result("Twelve Data API", False, error=str(e))
    
    async def test_openrouter_api(self):
        """–¢–µ—Å—Ç 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ OpenRouter API"""
        self.print_header("–ü–†–û–í–ï–†–ö–ê OPENROUTER API")
        
        try:
            analyzer = AIAnalyzer(
                api_key=config.OPENROUTER_API_KEY,
                model=config.AI_MODEL
            )
            self.print_result("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞", True, "AIAnalyzer —Å–æ–∑–¥–∞–Ω")
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–æ—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å
            test_data = "BTC: $45,000, Volume: 1,000,000"
            test_symbol = "BTC"
            
            analysis = await analyzer.analyze_crypto(test_data, test_symbol)
            if analysis:
                self.print_result("AI –∞–Ω–∞–ª–∏–∑", True, f"–ê–Ω–∞–ª–∏–∑ –ø–æ–ª—É—á–µ–Ω ({len(analysis)} —Å–∏–º–≤–æ–ª–æ–≤)")
            else:
                self.print_result("AI –∞–Ω–∞–ª–∏–∑", False, "–ê–Ω–∞–ª–∏–∑ –Ω–µ –ø–æ–ª—É—á–µ–Ω")
            
        except Exception as e:
            self.print_result("OpenRouter API", False, error=str(e))
    
    async def test_telegram_bot(self):
        """–¢–µ—Å—Ç 5: –ü—Ä–æ–≤–µ—Ä–∫–∞ Telegram Bot API"""
        self.print_header("–ü–†–û–í–ï–†–ö–ê TELEGRAM BOT API")
        
        try:
            # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞ —á–µ—Ä–µ–∑ requests
            import requests
            
            url = f"https://api.telegram.org/bot{config.TELEGRAM_BOT_TOKEN}/getMe"
            response = requests.get(url, timeout=10)
            
            if response.status_code == 200:
                data = response.json()
                if data.get('ok'):
                    bot_info = data.get('result', {})
                    self.print_result("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Telegram", True, 
                                    f"–ë–æ—Ç: @{bot_info.get('username', 'N/A')} ({bot_info.get('first_name', 'N/A')})")
                else:
                    self.print_result("Telegram Bot API", False, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω –±–æ—Ç–∞")
            else:
                self.print_result("Telegram Bot API", False, f"HTTP {response.status_code}")
            
        except Exception as e:
            self.print_result("Telegram Bot API", False, error=str(e))
    
    async def test_full_analysis_flow(self):
        """–¢–µ—Å—Ç 6: –ü–æ–ª–Ω—ã–π –ø–æ—Ç–æ–∫ –∞–Ω–∞–ª–∏–∑–∞"""
        self.print_header("–ü–û–õ–ù–´–ô –ü–û–¢–û–ö –ê–ù–ê–õ–ò–ó–ê")
        
        try:
            # –°–æ–∑–¥–∞–µ–º –≤—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
            collector = CryptoCollector()
            formatter = DataFormatter()
            analyzer = AIAnalyzer(
                api_key=config.OPENROUTER_API_KEY,
                model=config.AI_MODEL
            )
            
            test_symbol = "BTC"
            
            # –®–∞–≥ 1: –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
            data = collector.get_crypto_data(test_symbol)
            if data is None or data.empty:
                self.print_result("–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö", False, "–î–∞–Ω–Ω—ã–µ –Ω–µ –ø–æ–ª—É—á–µ–Ω—ã")
                return
            
            self.print_result("–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö", True, f"–ü–æ–ª—É—á–µ–Ω–æ {len(data)} –∑–∞–ø–∏—Å–µ–π")
            
            # –®–∞–≥ 2: –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
            current_price = collector.get_current_price(test_symbol)
            formatted_data = formatter.format_for_analysis(data, test_symbol, current_price)
            self.print_result("–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö", True, f"–î–∞–Ω–Ω—ã–µ –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω—ã")
            
            # –®–∞–≥ 3: AI –∞–Ω–∞–ª–∏–∑
            analysis = await analyzer.analyze_crypto(formatted_data, test_symbol)
            if analysis:
                self.print_result("AI –∞–Ω–∞–ª–∏–∑", True, f"–ê–Ω–∞–ª–∏–∑ –ø–æ–ª—É—á–µ–Ω ({len(analysis)} —Å–∏–º–≤–æ–ª–æ–≤)")
                print(f"\nüìä –ü—Ä–∏–º–µ—Ä –∞–Ω–∞–ª–∏–∑–∞ (–ø–µ—Ä–≤—ã–µ 200 —Å–∏–º–≤–æ–ª–æ–≤):")
                print(f"{analysis[:200]}...")
            else:
                self.print_result("AI –∞–Ω–∞–ª–∏–∑", False, "–ê–Ω–∞–ª–∏–∑ –Ω–µ –ø–æ–ª—É—á–µ–Ω")
            
        except Exception as e:
            self.print_result("–ü–æ–ª–Ω—ã–π –ø–æ—Ç–æ–∫ –∞–Ω–∞–ª–∏–∑–∞", False, error=str(e))
    
    def print_summary(self):
        """–ü–µ—á–∞—Ç—å –∏—Ç–æ–≥–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
        self.print_header("–ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢")
        
        total_tests = len(self.results)
        passed_tests = sum(1 for success in self.results.values() if success)
        failed_tests = total_tests - passed_tests
        
        print(f"üìä –í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: {total_tests}")
        print(f"‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö: {passed_tests}")
        print(f"‚ùå –ù–µ—É–¥–∞—á–Ω—ã—Ö: {failed_tests}")
        
        if self.errors:
            print(f"\nüî• –û–®–ò–ë–ö–ò:")
            for error in self.errors:
                print(f"   ‚Ä¢ {error}")
        
        if failed_tests == 0:
            print(f"\nüéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–®–õ–ò –£–°–ü–ï–®–ù–û!")
            print(f"   –ê–Ω–∞–ª–∏–∑ —Ç–æ–∫–µ–Ω–æ–≤ –¥–æ–ª–∂–µ–Ω —Ä–∞–±–æ—Ç–∞—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.")
        else:
            print(f"\n‚ö†Ô∏è  –ù–ê–ô–î–ï–ù–´ –ü–†–û–ë–õ–ï–ú–´!")
            print(f"   –ò—Å–ø—Ä–∞–≤—å—Ç–µ –æ—à–∏–±–∫–∏ –≤—ã—à–µ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã –∞–Ω–∞–ª–∏–∑–∞.")
    
    async def run_all_tests(self):
        """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤"""
        print("üöÄ –ó–ê–ü–£–°–ö –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø API")
        print("–≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –ø—Ä–æ–≤–µ—Ä–∏—Ç –≤—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Å–∏—Å—Ç–µ–º—ã –∞–Ω–∞–ª–∏–∑–∞ —Ç–æ–∫–µ–Ω–æ–≤")
        
        await self.test_config()
        await self.test_database()
        await self.test_twelvedata_api()
        await self.test_openrouter_api()
        await self.test_telegram_bot()
        await self.test_full_analysis_flow()
        
        self.print_summary()


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    tester = APITester()
    await tester.run_all_tests()


if __name__ == "__main__":
    asyncio.run(main())
