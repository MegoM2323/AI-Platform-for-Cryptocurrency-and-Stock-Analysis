"""
–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø—Ä–æ–±–ª–µ–º—ã —Å NOWPayments API
"""

import asyncio
import sys
import os
import aiohttp

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from config import config


async def test_api_endpoints():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö API endpoints"""
    print("üîç –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ NOWPayments API...")
    
    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    api_key = getattr(config, 'NOWPAYMENTS_API_KEY', None)
    public_api_key = getattr(config, 'NOWPAYMENTS_PUBLIC_API_KEY', None)
    sandbox = getattr(config, 'NOWPAYMENTS_SANDBOX', True)
    
    print(f"üîë Private API Key: {'‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' if api_key else '‚ùå –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}")
    print(f"üîë Public API Key: {'‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' if public_api_key else '‚ùå –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}")
    print(f"üîó Sandbox: {'‚úÖ –í–∫–ª—é—á–µ–Ω' if sandbox else '‚ùå –í—ã–∫–ª—é—á–µ–Ω'}")
    
    base_url = "https://api-sandbox.nowpayments.io/v1" if sandbox else "https://api.nowpayments.io/v1"
    print(f"üåê Base URL: {base_url}")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–Ω—ã–µ endpoints
    endpoints_to_test = [
        ("/status", "GET", "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ API"),
        ("/currencies", "GET", "–ü–æ–ª—É—á–µ–Ω–∏–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç"),
        ("/estimate", "GET", "–ü–æ–ª—É—á–µ–Ω–∏–µ —Ü–µ–Ω—ã"),
    ]
    
    for endpoint, method, description in endpoints_to_test:
        print(f"\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: {description}")
        print(f"   Endpoint: {method} {base_url}{endpoint}")
        
        try:
            async with aiohttp.ClientSession() as session:
                headers = {
                    "x-api-key": public_api_key if public_api_key else api_key,
                    "Content-Type": "application/json"
                }
                
                if method == "GET":
                    if endpoint == "/estimate":
                        # –î–æ–±–∞–≤–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è estimate
                        params = {
                            "amount": 500,
                            "currency_from": "RUB",
                            "currency_to": "BTC"
                        }
                        async with session.get(f"{base_url}{endpoint}", headers=headers, params=params) as response:
                            await handle_response(response, endpoint)
                    else:
                        async with session.get(f"{base_url}{endpoint}", headers=headers) as response:
                            await handle_response(response, endpoint)
                            
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞: {e}")


async def handle_response(response, endpoint):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –æ—Ç API"""
    status = response.status
    text = await response.text()
    
    print(f"   üìä Status: {status}")
    
    if status == 200:
        print(f"   ‚úÖ –£—Å–ø–µ—à–Ω–æ!")
        if endpoint == "/status":
            print(f"   üìÑ Response: {text[:200]}...")
    elif status == 403:
        print(f"   ‚ùå 403 - Invalid API Key")
        print(f"   üìÑ Response: {text}")
    elif status == 401:
        print(f"   ‚ùå 401 - Unauthorized")
        print(f"   üìÑ Response: {text}")
    elif status == 429:
        print(f"   ‚ö†Ô∏è  429 - Too Many Requests")
        print(f"   üìÑ Response: {text}")
    else:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ {status}")
        print(f"   üìÑ Response: {text[:200]}...")


async def test_different_auth_methods():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏"""
    print("\nüîê –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–µ—Ç–æ–¥–æ–≤ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏...")
    
    api_key = getattr(config, 'NOWPAYMENTS_API_KEY', None)
    public_api_key = getattr(config, 'NOWPAYMENTS_PUBLIC_API_KEY', None)
    sandbox = getattr(config, 'NOWPAYMENTS_SANDBOX', True)
    
    base_url = "https://api-sandbox.nowpayments.io/v1" if sandbox else "https://api.nowpayments.io/v1"
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏
    auth_methods = [
        ("x-api-key", api_key, "Private API Key"),
        ("x-api-key", public_api_key, "Public API Key"),
        ("Authorization", f"Bearer {api_key}", "Bearer Token (Private)"),
        ("Authorization", f"Bearer {public_api_key}", "Bearer Token (Public)"),
        ("X-API-Key", api_key, "X-API-Key header (Private)"),
        ("X-API-Key", public_api_key, "X-API-Key header (Public)"),
    ]
    
    for header_name, key, description in auth_methods:
        if not key:
            continue
            
        print(f"\nüß™ –¢–µ—Å—Ç: {description}")
        print(f"   Header: {header_name}: ***{key[-4:] if len(key) > 4 else '***'}")
        
        try:
            async with aiohttp.ClientSession() as session:
                headers = {
                    header_name: key,
                    "Content-Type": "application/json"
                }
                
                async with session.get(f"{base_url}/status", headers=headers) as response:
                    status = response.status
                    text = await response.text()
                    
                    if status == 200:
                        print(f"   ‚úÖ –£—Å–ø–µ—à–Ω–æ! Status: {status}")
                    else:
                        print(f"   ‚ùå –û—à–∏–±–∫–∞ {status}: {text[:100]}...")
                        
        except Exception as e:
            print(f"   ‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {e}")


async def check_sandbox_vs_production():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–ª–∏—á–∏–π –º–µ–∂–¥—É sandbox –∏ production"""
    print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ sandbox vs production...")
    
    api_key = getattr(config, 'NOWPAYMENTS_API_KEY', None)
    public_api_key = getattr(config, 'NOWPAYMENTS_PUBLIC_API_KEY', None)
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º sandbox
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ SANDBOX API...")
    await test_specific_url("https://api-sandbox.nowpayments.io/v1/status", public_api_key or api_key)
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º production
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ PRODUCTION API...")
    await test_specific_url("https://api.nowpayments.io/v1/status", public_api_key or api_key)


async def test_specific_url(url, api_key):
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ URL"""
    try:
        async with aiohttp.ClientSession() as session:
            headers = {
                "x-api-key": api_key,
                "Content-Type": "application/json"
            }
            
            async with session.get(url, headers=headers) as response:
                status = response.status
                text = await response.text()
                
                print(f"   üìä URL: {url}")
                print(f"   üìä Status: {status}")
                print(f"   üìÑ Response: {text[:200]}...")
                
                if status == 200:
                    print(f"   ‚úÖ –£—Å–ø–µ—à–Ω–æ!")
                else:
                    print(f"   ‚ùå –û—à–∏–±–∫–∞ {status}")
                    
    except Exception as e:
        print(f"   ‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {e}")


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏"""
    print("üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê NOWPAYMENTS API")
    print("=" * 50)
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º API endpoints
    await test_api_endpoints()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –º–µ—Ç–æ–¥—ã –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
    await test_different_auth_methods()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º sandbox vs production
    await check_sandbox_vs_production()
    
    print("\n" + "=" * 50)
    print("üìã –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
    print("1. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π API –∫–ª—é—á –¥–ª—è sandbox/production")
    print("2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ –∞–∫–∫–∞—É–Ω—Ç NOWPayments –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω")
    print("3. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ API –∫–ª—é—á –∞–∫—Ç–∏–≤–µ–Ω –∏ –Ω–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω")
    print("4. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–∏–º–∏—Ç—ã API –∑–∞–ø—Ä–æ—Å–æ–≤")
    print("5. –î–ª—è sandbox –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ sandbox –∫–ª—é—á–∏, –¥–ª—è production - production –∫–ª—é—á–∏")


if __name__ == "__main__":
    asyncio.run(main())
