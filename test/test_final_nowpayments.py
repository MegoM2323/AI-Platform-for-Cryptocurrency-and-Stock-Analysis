"""
–§–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç NOWPayments API —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
"""

import asyncio
import sys
import os
import aiohttp
import json
import time

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from config import config


async def test_final_api():
    """–§–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç API NOWPayments"""
    print("üéØ –§–ò–ù–ê–õ–¨–ù–´–ô –¢–ï–°–¢ NOWPAYMENTS API")
    print("=" * 50)
    
    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    api_key = getattr(config, 'NOWPAYMENTS_API_KEY', None)
    public_api_key = getattr(config, 'NOWPAYMENTS_PUBLIC_API_KEY', None)
    sandbox = getattr(config, 'NOWPAYMENTS_SANDBOX', True)
    
    base_url = "https://api-sandbox.nowpayments.io/v1" if sandbox else "https://api.nowpayments.io/v1"
    
    print(f"üîë Private API Key: {'‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' if api_key else '‚ùå –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}")
    print(f"üîë Public API Key: {'‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' if public_api_key else '‚ùå –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}")
    print(f"üîó Sandbox: {'‚úÖ –í–∫–ª—é—á–µ–Ω' if sandbox else '‚ùå –í—ã–∫–ª—é—á–µ–Ω'}")
    print(f"üåê Base URL: {base_url}")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤—Å–µ endpoints
    await test_status_endpoint(base_url, public_api_key or api_key)
    await test_currencies_endpoint(base_url, public_api_key or api_key)
    await test_estimate_endpoint(base_url, public_api_key or api_key)
    await test_create_subscription_payment(base_url, api_key)
    await test_create_analyses_payment(base_url, api_key)


async def test_status_endpoint(base_url, api_key):
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ /status endpoint"""
    print(f"\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ /status endpoint...")
    
    try:
        async with aiohttp.ClientSession() as session:
            headers = {
                "x-api-key": api_key,
                "Content-Type": "application/json"
            }
            
            async with session.get(f"{base_url}/status", headers=headers) as response:
                status = response.status
                text = await response.text()
                
                print(f"   üìä Status: {status}")
                
                if status == 200:
                    print(f"   ‚úÖ API —Ä–∞–±–æ—Ç–∞–µ—Ç!")
                    try:
                        data = json.loads(text)
                        print(f"   üìÑ Response: {data}")
                    except:
                        print(f"   üìÑ Response: {text}")
                else:
                    print(f"   ‚ùå –û—à–∏–±–∫–∞ {status}: {text[:100]}...")
                    
    except Exception as e:
        print(f"   ‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {e}")


async def test_currencies_endpoint(base_url, api_key):
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ /currencies endpoint"""
    print(f"\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ /currencies endpoint...")
    
    try:
        async with aiohttp.ClientSession() as session:
            headers = {
                "x-api-key": api_key,
                "Content-Type": "application/json"
            }
            
            async with session.get(f"{base_url}/currencies", headers=headers) as response:
                status = response.status
                text = await response.text()
                
                print(f"   üìä Status: {status}")
                
                if status == 200:
                    try:
                        data = json.loads(text)
                        currencies = data.get("currencies", [])
                        print(f"   ‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(currencies)} –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç!")
                        
                        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10 –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç
                        for i, currency in enumerate(currencies[:10]):
                            print(f"      {i+1}. {currency}")
                        
                        if len(currencies) > 10:
                            print(f"      ... –∏ –µ—â–µ {len(currencies) - 10} –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç")
                            
                    except json.JSONDecodeError:
                        print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: {text[:100]}...")
                else:
                    print(f"   ‚ùå –û—à–∏–±–∫–∞ {status}: {text[:100]}...")
                    
    except Exception as e:
        print(f"   ‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {e}")


async def test_estimate_endpoint(base_url, api_key):
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ /estimate endpoint"""
    print(f"\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ /estimate endpoint...")
    
    try:
        async with aiohttp.ClientSession() as session:
            headers = {
                "x-api-key": api_key,
                "Content-Type": "application/json"
            }
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤–∞–ª—é—Ç–Ω—É—é –ø–∞—Ä—É RUB/BTC
            params = {
                "amount": 500,
                "currency_pair": "rub_btc"
            }
            
            print(f"   üß™ –¢–µ—Å—Ç: 500 RUB -> BTC")
            
            async with session.get(f"{base_url}/estimate", headers=headers, params=params) as response:
                status = response.status
                text = await response.text()
                
                print(f"      üìä Status: {status}")
                
                if status == 200:
                    try:
                        data = json.loads(text)
                        estimated_amount = data.get("estimated_amount")
                        if estimated_amount:
                            print(f"      ‚úÖ 500 RUB = {estimated_amount} BTC")
                        else:
                            print(f"      ‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Ü–µ–Ω–µ")
                            print(f"      üìÑ Response: {data}")
                    except json.JSONDecodeError:
                        print(f"      ‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: {text[:100]}...")
                else:
                    print(f"      ‚ùå –û—à–∏–±–∫–∞ {status}: {text[:100]}...")
                    
    except Exception as e:
        print(f"   ‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {e}")


async def test_create_subscription_payment(base_url, api_key):
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞ –ø–æ–¥–ø–∏—Å–∫–∏"""
    print(f"\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞ –ø–æ–¥–ø–∏—Å–∫–∏...")
    
    try:
        async with aiohttp.ClientSession() as session:
            headers = {
                "x-api-key": api_key,
                "Content-Type": "application/json"
            }
            
            # –î–∞–Ω–Ω—ã–µ –¥–ª—è –ø–ª–∞—Ç–µ–∂–∞ –ø–æ–¥–ø–∏—Å–∫–∏
            payment_data = {
                "price_amount": 500,
                "price_currency": "rub",
                "pay_currency": "btc",
                "order_id": f"subscription_{int(time.time())}",
                "order_description": "Premium subscription for 30 days",
                "ipn_callback_url": "https://vextratrading.ru/nowpayments-webhook",
                "metadata": {
                    "user_id": "12345",
                    "subscription_type": "premium_30",
                    "payment_type": "subscription"
                }
            }
            
            print(f"   üìù –°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞ –ø–æ–¥–ø–∏—Å–∫–∏...")
            print(f"      Order ID: {payment_data['order_id']}")
            print(f"      Amount: {payment_data['price_amount']} {payment_data['price_currency']}")
            print(f"      Pay Currency: {payment_data['pay_currency']}")
            
            async with session.post(f"{base_url}/payment", json=payment_data, headers=headers) as response:
                status = response.status
                text = await response.text()
                
                print(f"      üìä Status: {status}")
                
                if status == 201:
                    try:
                        data = json.loads(text)
                        payment_id = data.get("payment_id")
                        payment_status = data.get("payment_status")
                        pay_url = data.get("pay_url")
                        
                        print(f"      ‚úÖ –ü–ª–∞—Ç–µ–∂ –ø–æ–¥–ø–∏—Å–∫–∏ —Å–æ–∑–¥–∞–Ω!")
                        print(f"         Payment ID: {payment_id}")
                        print(f"         Status: {payment_status}")
                        print(f"         Pay URL: {pay_url}")
                        
                    except json.JSONDecodeError:
                        print(f"      ‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: {text[:100]}...")
                else:
                    print(f"      ‚ùå –û—à–∏–±–∫–∞ {status}: {text[:200]}...")
                    
    except Exception as e:
        print(f"   ‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {e}")


async def test_create_analyses_payment(base_url, api_key):
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞ –∞–Ω–∞–ª–∏–∑–æ–≤"""
    print(f"\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞ –∞–Ω–∞–ª–∏–∑–æ–≤...")
    
    try:
        async with aiohttp.ClientSession() as session:
            headers = {
                "x-api-key": api_key,
                "Content-Type": "application/json"
            }
            
            # –î–∞–Ω–Ω—ã–µ –¥–ª—è –ø–ª–∞—Ç–µ–∂–∞ –∞–Ω–∞–ª–∏–∑–æ–≤
            payment_data = {
                "price_amount": 100,
                "price_currency": "rub",
                "pay_currency": "eth",
                "order_id": f"analyses_{int(time.time())}",
                "order_description": "Purchase 10 additional analyses",
                "ipn_callback_url": "https://vextratrading.ru/nowpayments-webhook",
                "metadata": {
                    "user_id": "12345",
                    "analyses_count": "10",
                    "payment_type": "analyses"
                }
            }
            
            print(f"   üìù –°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞ –∞–Ω–∞–ª–∏–∑–æ–≤...")
            print(f"      Order ID: {payment_data['order_id']}")
            print(f"      Amount: {payment_data['price_amount']} {payment_data['price_currency']}")
            print(f"      Pay Currency: {payment_data['pay_currency']}")
            
            async with session.post(f"{base_url}/payment", json=payment_data, headers=headers) as response:
                status = response.status
                text = await response.text()
                
                print(f"      üìä Status: {status}")
                
                if status == 201:
                    try:
                        data = json.loads(text)
                        payment_id = data.get("payment_id")
                        payment_status = data.get("payment_status")
                        pay_url = data.get("pay_url")
                        
                        print(f"      ‚úÖ –ü–ª–∞—Ç–µ–∂ –∞–Ω–∞–ª–∏–∑–æ–≤ —Å–æ–∑–¥–∞–Ω!")
                        print(f"         Payment ID: {payment_id}")
                        print(f"         Status: {payment_status}")
                        print(f"         Pay URL: {pay_url}")
                        
                    except json.JSONDecodeError:
                        print(f"      ‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: {text[:100]}...")
                else:
                    print(f"      ‚ùå –û—à–∏–±–∫–∞ {status}: {text[:200]}...")
                    
    except Exception as e:
        print(f"   ‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {e}")


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üéØ –§–ò–ù–ê–õ–¨–ù–´–ô –¢–ï–°–¢ NOWPAYMENTS API")
    print("=" * 50)
    
    await test_final_api()
    
    print("\n" + "=" * 50)
    print("üìã –†–ï–ó–£–õ–¨–¢–ê–¢–´:")
    print("‚úÖ –ï—Å–ª–∏ –≤—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ - API —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    print("‚ùå –ï—Å–ª–∏ –µ—Å—Ç—å –æ—à–∏–±–∫–∏ 403 - –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞")
    print("‚ö†Ô∏è  –ï—Å–ª–∏ –µ—Å—Ç—å –æ—à–∏–±–∫–∏ 429 - –ø–æ–¥–æ–∂–¥–∏—Ç–µ –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ")
    print("üîß –ï—Å–ª–∏ –µ—Å—Ç—å –æ—à–∏–±–∫–∏ 404 - –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å endpoints")


if __name__ == "__main__":
    asyncio.run(main())
