"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ /start –∏ /help
"""

from aiogram import Router, F
from aiogram.filters import Command
from aiogram.types import Message
from aiogram.fsm.context import FSMContext

from ..keyboards import get_main_keyboard
from database import Database
from config import config

router = Router()


@router.message(Command("start"))
async def cmd_start(message: Message, state: FSMContext, db: Database):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∏–ª–∏ –ø–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user = message.from_user
    await db.get_or_create_user(
        user_id=user.id,
        username=user.username,
        first_name=user.first_name,
        last_name=user.last_name
    )
    
    welcome_text = f"""
üëã <b>–ü—Ä–∏–≤–µ—Ç, {user.first_name}!</b>

–Ø ‚Äî AI –±–æ—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç. –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ:

üìä –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–∫–µ–Ω—ã
üìà –û—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Ç—Ä–µ–Ω–¥—ã
üí° –ü—Ä–∏–Ω–∏–º–∞—Ç—å –≤–∑–≤–µ—à–µ–Ω–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è

<b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>
/analyze - –ê–Ω–∞–ª–∏–∑ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã
/help - –ü–æ–º–æ—â—å
/profile - –¢–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å
/subscribe - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–æ–π

<b>–¢–∞—Ä–∏—Ñ–Ω—ã–µ –ø–ª–∞–Ω—ã:</b>
üÜì Free: {config.FREE_ANALYSES_PER_MONTH} –∞–Ω–∞–ª–∏–∑–æ–≤ –≤ –º–µ—Å—è—Ü
ü•â Basic: {config.BASIC_ANALYSES_PER_MONTH} –∞–Ω–∞–ª–∏–∑–æ–≤ –≤ –º–µ—Å—è—Ü - 299‚ÇΩ
ü•à Trader: {config.TRADER_ANALYSES_PER_MONTH} –∞–Ω–∞–ª–∏–∑–æ–≤ –≤ –º–µ—Å—è—Ü - 899‚ÇΩ
ü•á Pro: {config.PRO_ANALYSES_PER_MONTH} –∞–Ω–∞–ª–∏–∑–æ–≤ –≤ –º–µ—Å—è—Ü - 1590‚ÇΩ
üíé Elite: {config.ELITE_ANALYSES_PER_MONTH} –∞–Ω–∞–ª–∏–∑–æ–≤ –≤ –º–µ—Å—è—Ü - 2990‚ÇΩ

–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ üëá
"""
    
    await message.answer(
        welcome_text,
        reply_markup=get_main_keyboard(),
        parse_mode="HTML"
    )


@router.message(F.text == "‚ùì –ü–æ–º–æ—â—å")
@router.message(Command("help"))
async def cmd_help(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    await state.clear()
    
    help_text = """
üìñ <b>–†–£–ö–û–í–û–î–°–¢–í–û –ü–û –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Æ</b>

<b>–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞:</b>

1Ô∏è‚É£ <b>–ê–Ω–∞–ª–∏–∑ —Ç–æ–∫–µ–Ω–∞</b>
   ‚Ä¢ –ù–∞–∂–º–∏ "üìä –ê–Ω–∞–ª–∏–∑ —Ç–æ–∫–µ–Ω–∞"
   ‚Ä¢ –í–≤–µ–¥–∏ —Å–∏–º–≤–æ–ª –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä: BTC, ETH, SOL)
   ‚Ä¢ –ü–æ–ª—É—á–∏ AI –∞–Ω–∞–ª–∏–∑

2Ô∏è‚É£ <b>–ü–æ–¥–ø–∏—Å–∫–∞</b>
   ‚Ä¢ –ù–∞–∂–º–∏ "üíé –ü–æ–¥–ø–∏—Å–∫–∞"
   ‚Ä¢ –í—ã–±–µ—Ä–∏ —Ç–∞—Ä–∏—Ñ
   ‚Ä¢ –°–ª–µ–¥—É–π –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º –ø–æ –æ–ø–ª–∞—Ç–µ

3Ô∏è‚É£ <b>–ü—Ä–æ—Ñ–∏–ª—å</b>
   ‚Ä¢ –ù–∞–∂–º–∏ "üìà –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å"
   ‚Ä¢ –ü–æ—Å–º–æ—Ç—Ä–∏ —Å–≤–æ—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É

<b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>
/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É
/analyze - –ê–Ω–∞–ª–∏–∑ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã
/profile - –¢–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å
/subscribe - –ü–æ–¥–ø–∏—Å–∫–∞
/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞

<b>–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:</b>
‚Ä¢ BTC - Bitcoin
‚Ä¢ ETH - Ethereum
‚Ä¢ SOL - Solana
‚Ä¢ BNB - Binance Coin

‚ö†Ô∏è <b>–í–∞–∂–Ω–æ:</b>
–ê–Ω–∞–ª–∏–∑ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–º —Å–æ–≤–µ—Ç–æ–º!
–í—Å–µ–≥–¥–∞ –ø—Ä–æ–≤–æ–¥–∏ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ.

‚ùì –í–æ–ø—Ä–æ—Å—ã? –ù–∞–ø–∏—à–∏ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É: @your_support
"""
    
    await message.answer(
        help_text,
        reply_markup=get_main_keyboard(),
        parse_mode="HTML"
    )


@router.message(F.text == "üìà –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å")
@router.message(Command("profile"))
async def cmd_profile(message: Message, db: Database):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = message.from_user.id
    user_data = await db.get_user(user_id)
    
    if not user_data:
        await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π /start")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–ª–∞–Ω –ø–æ–¥–ø–∏—Å–∫–∏
    subscription_plan = await db.get_user_subscription_plan(user_id)
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ª–∏–º–∏—Ç—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø–ª–∞–Ω–∞
    if subscription_plan == 'free':
        max_analyses = config.FREE_ANALYSES_PER_MONTH
    elif subscription_plan == 'basic':
        max_analyses = config.BASIC_ANALYSES_PER_MONTH
    elif subscription_plan == 'trader':
        max_analyses = config.TRADER_ANALYSES_PER_MONTH
    elif subscription_plan == 'pro':
        max_analyses = config.PRO_ANALYSES_PER_MONTH
    elif subscription_plan == 'elite':
        max_analyses = config.ELITE_ANALYSES_PER_MONTH
    else:
        max_analyses = config.FREE_ANALYSES_PER_MONTH
    
    # –ü–æ–ª—É—á–∞–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –∞–Ω–∞–ª–∏–∑—ã
    remaining = await db.get_remaining_analyses(
        user_id, 
        config.FREE_ANALYSES_PER_MONTH,
        max_analyses
    )
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–∞—Ä–∏—Ñ–µ
    plan_name = config.SUBSCRIPTION_PLANS.get(subscription_plan, {}).get('name', 'Free')
    is_premium = user_data.get('is_premium', 0)
    premium_text = "‚úÖ –ê–∫—Ç–∏–≤–Ω–∞" if is_premium else "‚ùå –ù–µ –∞–∫—Ç–∏–≤–Ω–∞"
    
    if is_premium and user_data.get('premium_until'):
        from datetime import datetime
        premium_until = datetime.fromisoformat(user_data['premium_until'])
        premium_text += f"\nüìÖ –î–æ: {premium_until.strftime('%d.%m.%Y')}"
    
    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–Ω–∞–ª–∏–∑–æ–≤ –∑–∞ –º–µ—Å—è—Ü
    from datetime import date
    current_month = date.today().replace(day=1)
    monthly_analyses = await db.get_monthly_analyses_count(user_id, current_month)
    
    # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –∞–Ω–∞–ª–∏–∑–æ–≤
    analyses = await db.get_user_analyses(user_id, limit=5)
    
    profile_text = f"""
üë§ <b>–¢–í–û–ô –ü–†–û–§–ò–õ–¨</b>

<b>ID:</b> {user_id}
<b>–ò–º—è:</b> {user_data.get('first_name', 'N/A')}
<b>Username:</b> @{user_data.get('username', 'N/A')}

üíé <b>–¢–∞—Ä–∏—Ñ:</b> {plan_name}
<b>–°—Ç–∞—Ç—É—Å:</b> {premium_text}

üìä <b>–ê–Ω–∞–ª–∏–∑—ã –≤ –º–µ—Å—è—Ü–µ:</b>
‚Ä¢ –û—Å—Ç–∞–ª–æ—Å—å: {remaining}
‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: {monthly_analyses}
‚Ä¢ –õ–∏–º–∏—Ç: {max_analyses}

üìà <b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ –∞–Ω–∞–ª–∏–∑—ã ({len(analyses)}):</b>
"""
    
    if analyses:
        for i, analysis in enumerate(analyses, 1):
            from datetime import datetime
            created_at = datetime.fromisoformat(analysis['created_at'])
            profile_text += f"\n{i}. {analysis['token_symbol']} - {created_at.strftime('%d.%m %H:%M')}"
    else:
        profile_text += "\n–ü–æ–∫–∞ –Ω–µ—Ç –∞–Ω–∞–ª–∏–∑–æ–≤"
    
    await message.answer(
        profile_text,
        reply_markup=get_main_keyboard(),
        parse_mode="HTML"
    )

