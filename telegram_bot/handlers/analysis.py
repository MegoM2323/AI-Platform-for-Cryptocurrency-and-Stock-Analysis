"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç
"""

from aiogram import Router, F
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext

from ..states import AnalysisStates
from ..keyboards import get_main_keyboard, get_cancel_keyboard
from database import Database
from config import config
from data_collectors import CryptoCollector, DataFormatter
from AI_block import AIAnalyzer

router = Router()


@router.message(Command("analyze"))
@router.message(F.text == "üìä –ê–Ω–∞–ª–∏–∑ —Ç–æ–∫–µ–Ω–∞")
async def start_analysis(message: Message, state: FSMContext, db: Database):
    """–ù–∞—á–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å –∞–Ω–∞–ª–∏–∑–∞"""
    user_id = message.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç –∞–Ω–∞–ª–∏–∑–æ–≤
    can_analyze = await db.check_analysis_limit(
        user_id,
        config.FREE_ANALYSES_PER_DAY,
        config.PREMIUM_ANALYSES_PER_DAY
    )
    
    if not can_analyze:
        user_data = await db.get_user(user_id)
        is_premium = user_data.get('is_premium', 0)
        
        limit_text = f"""
‚ùå <b>–õ–∏–º–∏—Ç –∞–Ω–∞–ª–∏–∑–æ–≤ –∏—Å—á–µ—Ä–ø–∞–Ω!</b>

–¢—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∞–Ω–∞–ª–∏–∑—ã –Ω–∞ —Å–µ–≥–æ–¥–Ω—è.

{'üíé Premium: ' + str(config.PREMIUM_ANALYSES_PER_DAY) + ' –∞–Ω–∞–ª–∏–∑–æ–≤/–¥–µ–Ω—å' if is_premium else 'üéÅ –ë–µ—Å–ø–ª–∞—Ç–Ω–æ: ' + str(config.FREE_ANALYSES_PER_DAY) + ' –∞–Ω–∞–ª–∏–∑–æ–≤/–¥–µ–Ω—å'}

<b>–ß—Ç–æ –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å:</b>
‚Ä¢ –ü–æ–¥–æ–∂–¥–∞—Ç—å –¥–æ –∑–∞–≤—Ç—Ä–∞
‚Ä¢ –û—Ñ–æ—Ä–º–∏—Ç—å Premium –ø–æ–¥–ø–∏—Å–∫—É (/subscribe)
‚Ä¢ –î–æ–∫—É–ø–∏—Ç—å –∞–Ω–∞–ª–∏–∑—ã

–ò—Å–ø–æ–ª—å–∑—É–π /subscribe –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è —Ç–∞—Ä–∏—Ñ–∞
"""
        await message.answer(
            limit_text,
            reply_markup=get_main_keyboard(),
            parse_mode="HTML"
        )
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –∞–Ω–∞–ª–∏–∑—ã
    remaining = await db.get_remaining_analyses(
        user_id,
        config.FREE_ANALYSES_PER_DAY,
        config.PREMIUM_ANALYSES_PER_DAY
    )
    
    await state.set_state(AnalysisStates.waiting_for_symbol)
    await message.answer(
        f"üìä <b>–ê–Ω–∞–ª–∏–∑ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã</b>\n\n"
        f"–û—Å—Ç–∞–ª–æ—Å—å –∞–Ω–∞–ª–∏–∑–æ–≤ —Å–µ–≥–æ–¥–Ω—è: <b>{remaining - 1}</b>\n\n"
        f"–í–≤–µ–¥–∏ —Å–∏–º–≤–æ–ª –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞\n"
        f"(–Ω–∞–ø—Ä–∏–º–µ—Ä: BTC, ETH, SOL, BNB)\n\n"
        f"–ò–ª–∏ –Ω–∞–∂–º–∏ \"–û—Ç–º–µ–Ω–∞\" –¥–ª—è –≤—ã—Ö–æ–¥–∞",
        reply_markup=get_cancel_keyboard(),
        parse_mode="HTML"
    )


@router.message(AnalysisStates.waiting_for_symbol, F.text == "‚ùå –û—Ç–º–µ–Ω–∞")
async def cancel_analysis(message: Message, state: FSMContext):
    """–û—Ç–º–µ–Ω–∏—Ç—å –∞–Ω–∞–ª–∏–∑"""
    await state.clear()
    await message.answer(
        "‚ùå –ê–Ω–∞–ª–∏–∑ –æ—Ç–º–µ–Ω–µ–Ω",
        reply_markup=get_main_keyboard()
    )


@router.message(AnalysisStates.waiting_for_symbol)
async def process_symbol(message: Message, state: FSMContext, db: Database):
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤–≤–µ–¥–µ–Ω–Ω—ã–π —Å–∏–º–≤–æ–ª –∏ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∞–ª–∏–∑"""
    symbol = message.text.strip().upper()
    user_id = message.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç
    if len(symbol) > 10 or not symbol.isalnum():
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å–∏–º–≤–æ–ª–∞.\n"
            "–í–≤–µ–¥–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Å–∏–º–≤–æ–ª (–Ω–∞–ø—Ä–∏–º–µ—Ä: BTC, ETH)"
        )
        return
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –∞–Ω–∞–ª–∏–∑–∞
    processing_msg = await message.answer(
        f"üîÑ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é {symbol}...\n"
        f"–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥",
        parse_mode="HTML"
    )
    
    try:
        # –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        collector = CryptoCollector(
            timeframe=config.DEFAULT_TIMEFRAME,
            period=config.DEFAULT_PERIOD
        )
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞
        if not collector.validate_symbol(symbol):
            await processing_msg.edit_text(
                f"‚ùå –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞ {symbol} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.\n\n"
                f"–ü—Ä–æ–≤–µ—Ä—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å —Å–∏–º–≤–æ–ª–∞ –∏ –ø–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞.\n"
                f"–ü—Ä–∏–º–µ—Ä—ã: BTC, ETH, SOL, BNB"
            )
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        data = collector.get_crypto_data(symbol)
        if data is None or data.empty:
            await processing_msg.edit_text(
                f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è {symbol}"
            )
            return
        
        current_price = collector.get_current_price(symbol)
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
        formatter = DataFormatter()
        formatted_data = formatter.format_for_analysis(data, symbol, current_price)
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º AI –∞–Ω–∞–ª–∏–∑
        analyzer = AIAnalyzer(
            api_key=config.OPENROUTER_API_KEY,
            model=config.AI_MODEL
        )
        
        analysis_result = await analyzer.analyze_crypto(formatted_data, symbol)
        
        if analysis_result is None:
            await processing_msg.edit_text(
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∞–Ω–∞–ª–∏–∑–∞.\n"
                "–ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ."
            )
            return
        
        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –∞–Ω–∞–ª–∏–∑–æ–≤
        await db.increment_analysis_count(user_id)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞–Ω–∞–ª–∏–∑ –≤ –ë–î
        await db.save_analysis(user_id, symbol, analysis_result)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        await processing_msg.edit_text(
            f"‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω –¥–ª—è {symbol}"
        )
        
        # –†–∞–∑–±–∏–≤–∞–µ–º –¥–ª–∏–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        if len(analysis_result) > 4096:
            # Telegram –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–æ 4096 —Å–∏–º–≤–æ–ª–æ–≤
            chunks = [analysis_result[i:i+4096] for i in range(0, len(analysis_result), 4096)]
            for chunk in chunks:
                await message.answer(chunk, parse_mode="HTML")
        else:
            await message.answer(analysis_result, parse_mode="HTML")
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        await state.clear()
        await message.answer(
            "–ß—Ç–æ –¥–∞–ª—å—à–µ?",
            reply_markup=get_main_keyboard()
        )
        
    except Exception as e:
        import traceback
        error_details = traceback.format_exc()
        print(f"Error in analysis: {e}")
        print(f"Full traceback: {error_details}")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –æ—à–∏–±–∫—É –≤ debug —Ä–µ–∂–∏–º–µ
        if config.DEBUG_MODE:
            await processing_msg.edit_text(
                f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ:\n"
                f"<code>{str(e)}</code>\n\n"
                f"–ü–æ–ª–Ω–∞—è –æ—à–∏–±–∫–∞:\n"
                f"<code>{error_details[:1000]}</code>",
                parse_mode="HTML"
            )
        else:
            await processing_msg.edit_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ.\n"
                "–ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É."
            )
        await state.clear()

