"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç
"""

from aiogram import Router, F
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery, ReplyKeyboardRemove
from aiogram.fsm.context import FSMContext

from ..states import AnalysisStates
from ..keyboards import get_main_keyboard, get_cancel_keyboard
from database import Database
from config import config
from data_collectors import CryptoCollector, DataFormatter
from AI_block import AIAnalyzer

router = Router()


@router.message(F.text == "üìä –ê–Ω–∞–ª–∏–∑ —Ç–æ–∫–µ–Ω–∞")
@router.message(Command("analyze"))
async def start_analysis(message: Message, state: FSMContext, db: Database):
    """–ù–∞—á–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å –∞–Ω–∞–ª–∏–∑–∞"""
    user_id = message.from_user.id
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–ª–∞–Ω –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    subscription_plan = await db.get_user_subscription_plan(user_id)
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ª–∏–º–∏—Ç—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø–ª–∞–Ω–∞
    if subscription_plan == 'free':
        max_analyses = config.FREE_ANALYSES_PER_MONTH
    elif subscription_plan == 'basic':
        max_analyses = config.BASIC_ANALYSES_PER_MONTH
    elif subscription_plan == 'trader':
        max_analyses = config.TRADER_ANALYSES_PER_MONTH
    elif subscription_plan == 'pro':
        max_analyses = config.PRO_ANALYSES_PER_MONTH
    elif subscription_plan == 'elite':
        max_analyses = config.ELITE_ANALYSES_PER_MONTH
    elif subscription_plan == 'premium':
        # –î–ª—è –æ–±—â–µ–≥–æ –ø—Ä–µ–º–∏—É–º —Å—Ç–∞—Ç—É—Å–∞ –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º –∞–Ω–∞–ª–∏–∑–∞–º
        additional_analyses = await db.get_additional_analyses(user_id)
        if additional_analyses >= 500:
            max_analyses = config.ELITE_ANALYSES_PER_MONTH
        elif additional_analyses >= 150:
            max_analyses = config.PRO_ANALYSES_PER_MONTH
        elif additional_analyses >= 50:
            max_analyses = config.TRADER_ANALYSES_PER_MONTH
        else:
            max_analyses = config.BASIC_ANALYSES_PER_MONTH
    else:
        max_analyses = config.FREE_ANALYSES_PER_MONTH
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç –∞–Ω–∞–ª–∏–∑–æ–≤
    can_analyze = await db.check_analysis_limit(
        user_id,
        config.FREE_ANALYSES_PER_MONTH,
        max_analyses
    )
    
    if not can_analyze:
        plan_name = config.SUBSCRIPTION_PLANS.get(subscription_plan, {}).get('name', 'Free')
        
        # –ü–æ–ª—É—á–∞–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –∞–Ω–∞–ª–∏–∑—ã
        remaining = await db.get_remaining_analyses(
            user_id,
            config.FREE_ANALYSES_PER_MONTH,
            max_analyses
        )
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∞–Ω–∞–ª–∏–∑—ã
        additional_analyses = await db.get_additional_analyses(user_id)
        
        if additional_analyses > 0:
            # –ï—Å—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∞–Ω–∞–ª–∏–∑—ã, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –∏—Ö –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å
            limit_text = f"""
‚ùå <b>–õ–∏–º–∏—Ç –∞–Ω–∞–ª–∏–∑–æ–≤ –∏—Å—á–µ—Ä–ø–∞–Ω!</b>

–¢—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∞–Ω–∞–ª–∏–∑—ã –≤ —ç—Ç–æ–º –º–µ—Å—è—Ü–µ.

<b>–¢–≤–æ–π —Ç–∞—Ä–∏—Ñ:</b> {plan_name}
<b>–õ–∏–º–∏—Ç:</b> {max_analyses} –∞–Ω–∞–ª–∏–∑–æ–≤ –≤ –º–µ—Å—è—Ü
<b>–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∞–Ω–∞–ª–∏–∑—ã:</b> {additional_analyses}

–£ —Ç–µ–±—è –µ—Å—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∞–Ω–∞–ª–∏–∑—ã! –•–æ—á–µ—à—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –æ–¥–∏–Ω?
"""
            from ..keyboards import InlineKeyboardMarkup, InlineKeyboardButton
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚úÖ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑", callback_data=f"use_additional_analysis_{user_id}")],
                [InlineKeyboardButton(text="üíé –ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="show_subscriptions")],
                [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_analysis")]
            ])
            
            # –£–±–∏—Ä–∞–µ–º reply-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–µ—Ä–µ–¥ –ø–æ–∫–∞–∑–æ–º inline-–∫–Ω–æ–ø–æ–∫
            await message.answer(
                limit_text,
                reply_markup=ReplyKeyboardRemove(),
                parse_mode="HTML"
            )
            # –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å inline-–∫–Ω–æ–ø–∫–∞–º–∏
            await message.answer(
                "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                reply_markup=keyboard
            )
        else:
            # –ù–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∞–Ω–∞–ª–∏–∑–æ–≤, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –ø–æ–¥–ø–∏—Å–∫—É
            limit_text = f"""
‚ùå <b>–õ–∏–º–∏—Ç –∞–Ω–∞–ª–∏–∑–æ–≤ –∏—Å—á–µ—Ä–ø–∞–Ω!</b>

–¢—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∞–Ω–∞–ª–∏–∑—ã –≤ —ç—Ç–æ–º –º–µ—Å—è—Ü–µ.

<b>–¢–≤–æ–π —Ç–∞—Ä–∏—Ñ:</b> {plan_name}
<b>–õ–∏–º–∏—Ç:</b> {max_analyses} –∞–Ω–∞–ª–∏–∑–æ–≤ –≤ –º–µ—Å—è—Ü

<b>üíé –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∞—Ä–∏—Ñ—ã:</b>
‚Ä¢ ü•â Basic - 299‚ÇΩ/–º–µ—Å (15 –∞–Ω–∞–ª–∏–∑–æ–≤)
‚Ä¢ ü•à Trader - 899‚ÇΩ/–º–µ—Å (50 –∞–Ω–∞–ª–∏–∑–æ–≤)  
‚Ä¢ ü•á Pro - 1590‚ÇΩ/–º–µ—Å (150 –∞–Ω–∞–ª–∏–∑–æ–≤)
‚Ä¢ üíé Elite - 2990‚ÇΩ/–º–µ—Å (500 –∞–Ω–∞–ª–∏–∑–æ–≤)

–í—ã–±–µ—Ä–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Ç–∞—Ä–∏—Ñ:
"""
            from ..keyboards import InlineKeyboardMarkup, InlineKeyboardButton
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üíé –í—ã–±—Ä–∞—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="show_subscriptions")],
                [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_analysis")]
            ])
            
            # –£–±–∏—Ä–∞–µ–º reply-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–µ—Ä–µ–¥ –ø–æ–∫–∞–∑–æ–º inline-–∫–Ω–æ–ø–æ–∫
            await message.answer(
                limit_text,
                reply_markup=ReplyKeyboardRemove(),
                parse_mode="HTML"
            )
            # –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å inline-–∫–Ω–æ–ø–∫–∞–º–∏
            await message.answer(
                "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                reply_markup=keyboard
            )
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –∞–Ω–∞–ª–∏–∑—ã
    remaining = await db.get_remaining_analyses(
        user_id,
        config.FREE_ANALYSES_PER_MONTH,
        max_analyses
    )
    
    await state.set_state(AnalysisStates.waiting_for_symbol)
    await message.answer(
        f"üìä <b>–ê–Ω–∞–ª–∏–∑ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã</b>\n\n"
        f"–û—Å—Ç–∞–ª–æ—Å—å –∞–Ω–∞–ª–∏–∑–æ–≤ –≤ –º–µ—Å—è—Ü–µ: <b>{remaining - 1}</b>\n\n"
        f"–í–≤–µ–¥–∏ —Å–∏–º–≤–æ–ª –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞\n"
        f"(–Ω–∞–ø—Ä–∏–º–µ—Ä: BTC, ETH, SOL, BNB)\n\n"
        f"–ò–ª–∏ –Ω–∞–∂–º–∏ \"–û—Ç–º–µ–Ω–∞\" –¥–ª—è –≤—ã—Ö–æ–¥–∞",
        reply_markup=get_cancel_keyboard(),
        parse_mode="HTML"
    )


@router.message(AnalysisStates.waiting_for_symbol, F.text == "‚ùå –û—Ç–º–µ–Ω–∞")
async def cancel_analysis(message: Message, state: FSMContext):
    """–û—Ç–º–µ–Ω–∏—Ç—å –∞–Ω–∞–ª–∏–∑"""
    await state.clear()
    await message.answer(
        "‚ùå –ê–Ω–∞–ª–∏–∑ –æ—Ç–º–µ–Ω–µ–Ω",
        reply_markup=get_main_keyboard()
    )


@router.message(AnalysisStates.waiting_for_symbol)
async def process_symbol(message: Message, state: FSMContext, db: Database):
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤–≤–µ–¥–µ–Ω–Ω—ã–π —Å–∏–º–≤–æ–ª –∏ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∞–ª–∏–∑"""
    import logging
    logger = logging.getLogger(__name__)
    
    symbol = message.text.strip().upper()
    user_id = message.from_user.id
    
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–ø—Ä–æ—Å–∏–ª –∞–Ω–∞–ª–∏–∑ {symbol}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –æ–∂–∏–¥–∞–Ω–∏—è —Å–∏–º–≤–æ–ª–∞
    current_state = await state.get_state()
    if current_state != AnalysisStates.waiting_for_symbol:
        logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –æ–∂–∏–¥–∞–Ω–∏—è —Å–∏–º–≤–æ–ª–∞. –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {current_state}")
        await message.answer(
            "‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏ –∞–Ω–∞–ª–∏–∑ –∑–∞–Ω–æ–≤–æ.",
            reply_markup=get_main_keyboard()
        )
        await state.clear()
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç
    if len(symbol) > 10 or not symbol.isalnum():
        logger.warning(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å–∏–º–≤–æ–ª–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {symbol}")
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å–∏–º–≤–æ–ª–∞.\n"
            "–í–≤–µ–¥–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Å–∏–º–≤–æ–ª (–Ω–∞–ø—Ä–∏–º–µ—Ä: BTC, ETH)"
        )
        return
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –∞–Ω–∞–ª–∏–∑–∞
    processing_msg = await message.answer(
        f"üîÑ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é {symbol}...\n"
        f"–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥",
        parse_mode="HTML"
    )
    
    # –≠—Ç–∞–ø 1: –°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö
    try:
        logger.info(f"–ù–∞—á–∏–Ω–∞–µ–º —Å–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {symbol}")
        
        # –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        collector = CryptoCollector(
            timeframe=config.DEFAULT_TIMEFRAME,
            period=config.DEFAULT_PERIOD
        )
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞
        logger.info(f"–ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å —Å–∏–º–≤–æ–ª–∞ {symbol}")
        if not collector.validate_symbol(symbol):
            logger.warning(f"–°–∏–º–≤–æ–ª {symbol} –Ω–µ –ø—Ä–æ—à–µ–ª –≤–∞–ª–∏–¥–∞—Ü–∏—é")
            await processing_msg.edit_text(
                f"‚ùå –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞ {symbol} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.\n\n"
                f"–ü—Ä–æ–≤–µ—Ä—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å —Å–∏–º–≤–æ–ª–∞ –∏ –ø–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞.\n"
                f"–ü—Ä–∏–º–µ—Ä—ã: BTC, ETH, SOL, BNB"
            )
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        logger.info(f"–ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è {symbol}")
        data = collector.get_crypto_data(symbol)
        if data is None or data.empty:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è {symbol}")
            await processing_msg.edit_text(
                f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è {symbol}"
            )
            return
        
        logger.info(f"–î–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã: {data.shape[0]} –∑–∞–ø–∏—Å–µ–π")
        
        current_price = collector.get_current_price(symbol)
        logger.info(f"–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞ {symbol}: {current_price}")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±–æ—Ä–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {symbol}: {e}")
        await processing_msg.edit_text(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö.\n"
            "–ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ."
        )
        return
    
    # –≠—Ç–∞–ø 2: –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
    try:
        logger.info("–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
        formatter = DataFormatter()
        formatted_data = formatter.format_for_analysis(data, symbol, current_price)
        logger.info(f"–î–∞–Ω–Ω—ã–µ –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω—ã: {len(formatted_data)} —Å–∏–º–≤–æ–ª–æ–≤")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {symbol}: {e}")
        await processing_msg.edit_text(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö.\n"
            "–ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ."
        )
        return
    
    # –≠—Ç–∞–ø 3: AI –∞–Ω–∞–ª–∏–∑
    try:
        logger.info("–ó–∞–ø—É—Å–∫–∞–µ–º AI –∞–Ω–∞–ª–∏–∑")
        analyzer = AIAnalyzer(
            api_key=config.OPENROUTER_API_KEY,
            model=config.AI_MODEL
        )
        
        analysis_result = await analyzer.analyze_crypto(formatted_data, symbol)
        
        logger.info(f"AI –∞–Ω–∞–ª–∏–∑ –≤–µ—Ä–Ω—É–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {type(analysis_result)}")
        if analysis_result:
            logger.info(f"–î–ª–∏–Ω–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞: {len(analysis_result)} —Å–∏–º–≤–æ–ª–æ–≤")
            logger.info(f"–ü–µ—Ä–≤—ã–µ 100 —Å–∏–º–≤–æ–ª–æ–≤: {analysis_result[:100]}")
        else:
            logger.warning("AI –∞–Ω–∞–ª–∏–∑ –≤–µ—Ä–Ω—É–ª None –∏–ª–∏ –ø—É—Å—Ç–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç")
        
        if analysis_result is None or not analysis_result.strip():
            logger.error(f"AI –∞–Ω–∞–ª–∏–∑ –Ω–µ –≤–µ—Ä–Ω—É–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è {symbol}")
            await processing_msg.edit_text(
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∞–Ω–∞–ª–∏–∑–∞.\n"
                "–ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ."
            )
            return
        
        logger.info(f"AI –∞–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω: {len(analysis_result)} —Å–∏–º–≤–æ–ª–æ–≤")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ AI –∞–Ω–∞–ª–∏–∑–µ –¥–ª—è {symbol}: {e}")
        await processing_msg.edit_text(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∞–Ω–∞–ª–∏–∑–∞.\n"
            "–ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ."
        )
        return
    
    # –≠—Ç–∞–ø 4: –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    try:
        logger.info(f"–ù–∞—á–∏–Ω–∞–µ–º —ç—Ç–∞–ø 4 –¥–ª—è {symbol}")
        logger.info(f"analysis_result —Ç–∏–ø: {type(analysis_result)}, –¥–ª–∏–Ω–∞: {len(analysis_result) if analysis_result else 'None'}")
        
        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –∞–Ω–∞–ª–∏–∑–æ–≤
        logger.info("–£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –∞–Ω–∞–ª–∏–∑–æ–≤")
        await db.increment_analysis_count(user_id)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞–Ω–∞–ª–∏–∑ –≤ –ë–î
        logger.info("–°–æ—Ö—Ä–∞–Ω—è–µ–º –∞–Ω–∞–ª–∏–∑ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö")
        await db.save_analysis(user_id, symbol, analysis_result)
        logger.info("–ê–Ω–∞–ª–∏–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –ë–î")
        
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ—Ü–µ—Å—Å–µ –∞–Ω–∞–ª–∏–∑–∞
        try:
            await processing_msg.delete()
            logger.info("–°–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ—Ü–µ—Å—Å–µ –∞–Ω–∞–ª–∏–∑–∞ —É–¥–∞–ª–µ–Ω–æ")
        except Exception as delete_error:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ—Ü–µ—Å—Å–µ: {delete_error}")
        
        # –û—á–∏—â–∞–µ–º HTML —Ç–µ–≥–∏ –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∞–Ω–∞–ª–∏–∑–∞
        import re
        import html
        
        # –£–±–∏—Ä–∞–µ–º HTML —Ç–µ–≥–∏ –∏ —ç–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
        clean_result = re.sub(r'<[^>]+>', '', analysis_result)
        clean_result = html.escape(clean_result)
        
        logger.info(f"–û—á–∏—â–µ–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {len(clean_result)} —Å–∏–º–≤–æ–ª–æ–≤")
        
        # –†–∞–∑–±–∏–≤–∞–µ–º –¥–ª–∏–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        logger.info(f"–ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞: {len(clean_result)} —Å–∏–º–≤–æ–ª–æ–≤")
        if len(clean_result) > 4096:
            # Telegram –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–æ 4096 —Å–∏–º–≤–æ–ª–æ–≤
            logger.info(f"–†–∞–∑–±–∏–≤–∞–µ–º –¥–ª–∏–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —á–∞—Å—Ç–∏")
            chunks = [clean_result[i:i+4096] for i in range(0, len(clean_result), 4096)]
            logger.info(f"–°–æ–∑–¥–∞–Ω–æ {len(chunks)} —á–∞—Å—Ç–µ–π")
            for i, chunk in enumerate(chunks):
                logger.info(f"–û—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–∞—Å—Ç—å {i+1}/{len(chunks)}")
                # –î–æ–±–∞–≤–ª—è–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Ç–æ–ª—å–∫–æ –∫ –ø–æ—Å–ª–µ–¥–Ω–µ–π —á–∞—Å—Ç–∏
                if i == len(chunks) - 1:
                    await message.answer(f"üìÑ –ß–∞—Å—Ç—å {i+1}/{len(chunks)}\n\n{chunk}", reply_markup=get_main_keyboard())
                else:
                    await message.answer(f"üìÑ –ß–∞—Å—Ç—å {i+1}/{len(chunks)}\n\n{chunk}")
        else:
            logger.info("–û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ü–µ–ª–∏–∫–æ–º")
            await message.answer(clean_result, reply_markup=get_main_keyboard())
            logger.info("–†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")
        
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        logger.info("–û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ")
        await state.clear()
        
        logger.info(f"–ê–Ω–∞–ª–∏–∑ {symbol} —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        
    except Exception as e:
        import traceback
        error_details = traceback.format_exc()
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏/–æ—Ç–ø—Ä–∞–≤–∫–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –¥–ª—è {symbol}: {e}")
        logger.error(f"–ü–æ–ª–Ω–∞—è –æ—à–∏–±–∫–∞: {error_details}")
        
        # –î–∞–∂–µ –µ—Å–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        logger.info("–ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω–µ—Å–º–æ—Ç—Ä—è –Ω–∞ –æ—à–∏–±–∫—É")
        
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ—Ü–µ—Å—Å–µ –∞–Ω–∞–ª–∏–∑–∞
        try:
            await processing_msg.delete()
        except Exception:
            pass
        
        # –û—á–∏—â–∞–µ–º HTML —Ç–µ–≥–∏ –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∞–Ω–∞–ª–∏–∑–∞
        import re
        import html
        
        # –£–±–∏—Ä–∞–µ–º HTML —Ç–µ–≥–∏ –∏ —ç–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
        clean_result = re.sub(r'<[^>]+>', '', analysis_result)
        clean_result = html.escape(clean_result)
        
        if len(clean_result) > 4096:
            chunks = [clean_result[i:i+4096] for i in range(0, len(clean_result), 4096)]
            for i, chunk in enumerate(chunks):
                # –î–æ–±–∞–≤–ª—è–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Ç–æ–ª—å–∫–æ –∫ –ø–æ—Å–ª–µ–¥–Ω–µ–π —á–∞—Å—Ç–∏
                if i == len(chunks) - 1:
                    await message.answer(f"üìÑ –ß–∞—Å—Ç—å {i+1}/{len(chunks)}\n\n{chunk}", reply_markup=get_main_keyboard())
                else:
                    await message.answer(f"üìÑ –ß–∞—Å—Ç—å {i+1}/{len(chunks)}\n\n{chunk}")
        else:
            await message.answer(clean_result, reply_markup=get_main_keyboard())
        
        await state.clear()


@router.callback_query(F.data.startswith("use_additional_analysis_"))
async def use_additional_analysis(callback: CallbackQuery, state: FSMContext, db: Database):
    """–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑"""
    await callback.answer()
    
    user_id = callback.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∞–Ω–∞–ª–∏–∑—ã
    additional_analyses = await db.get_additional_analyses(user_id)
    if additional_analyses <= 0:
        # –£–¥–∞–ª—è–µ–º inline-—Å–æ–æ–±—â–µ–Ω–∏–µ
        try:
            await callback.message.delete()
        except:
            pass
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≥–ª–∞–≤–Ω—ã–º –º–µ–Ω—é
        await callback.message.answer(
            "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∞–Ω–∞–ª–∏–∑–æ–≤",
            reply_markup=get_main_keyboard()
        )
        return
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑
    success = await db.use_additional_analysis(user_id)
    if not success:
        # –£–¥–∞–ª—è–µ–º inline-—Å–æ–æ–±—â–µ–Ω–∏–µ
        try:
            await callback.message.delete()
        except:
            pass
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≥–ª–∞–≤–Ω—ã–º –º–µ–Ω—é
        await callback.message.answer(
            "‚ùå –û—à–∏–±–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞",
            reply_markup=get_main_keyboard()
        )
        return
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –∞–Ω–∞–ª–∏–∑—É
    await state.set_state(AnalysisStates.waiting_for_symbol)
    # –£–¥–∞–ª—è–µ–º inline-—Å–æ–æ–±—â–µ–Ω–∏–µ
    try:
        await callback.message.delete()
    except:
        pass
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π –æ—Ç–º–µ–Ω—ã
    await callback.message.answer(
        f"‚úÖ <b>–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω!</b>\n\n"
        f"–û—Å—Ç–∞–ª–æ—Å—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∞–Ω–∞–ª–∏–∑–æ–≤: <b>{additional_analyses - 1}</b>\n\n"
        f"–í–≤–µ–¥–∏ —Å–∏–º–≤–æ–ª –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞\n"
        f"(–Ω–∞–ø—Ä–∏–º–µ—Ä: BTC, ETH, SOL, BNB)\n\n"
        f"–ò–ª–∏ –Ω–∞–∂–º–∏ \"–û—Ç–º–µ–Ω–∞\" –¥–ª—è –≤—ã—Ö–æ–¥–∞",
        reply_markup=get_cancel_keyboard(),
        parse_mode="HTML"
    )


@router.callback_query(F.data == "cancel_analysis")
async def cancel_analysis_callback(callback: CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ–Ω–∏—Ç—å –∞–Ω–∞–ª–∏–∑ —á–µ—Ä–µ–∑ callback"""
    await callback.answer()
    await state.clear()
    # –£–¥–∞–ª—è–µ–º inline-—Å–æ–æ–±—â–µ–Ω–∏–µ
    try:
        await callback.message.delete()
    except:
        pass
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≥–ª–∞–≤–Ω—ã–º –º–µ–Ω—é
    await callback.message.answer(
        "‚ùå –ê–Ω–∞–ª–∏–∑ –æ—Ç–º–µ–Ω–µ–Ω",
        reply_markup=get_main_keyboard()
    )

