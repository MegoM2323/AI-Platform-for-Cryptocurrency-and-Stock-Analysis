"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –ø–æ–¥–ø–∏—Å–æ–∫ –∏ –ø–ª–∞—Ç–µ–∂–µ–π
"""

from aiogram import Router, F
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.fsm.context import FSMContext

from ..states import SubscriptionStates, PurchaseStates
from ..keyboards import (
    get_main_keyboard, 
    get_subscription_keyboard, 
    get_subscription_plans_keyboard,
    get_payment_method_keyboard,
    get_crypto_currency_keyboard,
    get_all_crypto_currencies_keyboard
)
from database import Database
from config import config
from Payments.payment_system import payment_manager, PaymentStatus
import logging

logger = logging.getLogger(__name__)
router = Router()


@router.message(Command("subscribe"))
@router.message(F.text == "üíé –ü–æ–¥–ø–∏—Å–∫–∞")
async def show_subscription_options(message: Message, state: FSMContext, db: Database):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç—ã –ø–æ–¥–ø–∏—Å–∫–∏"""
    await state.clear()
    
    user_id = message.from_user.id
    user_data = await db.get_user(user_id)
    
    is_premium = user_data.get('is_premium', 0)
    premium_until = user_data.get('premium_until')
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å
    if is_premium and premium_until:
        from datetime import datetime
        try:
            premium_until_dt = datetime.fromisoformat(premium_until.replace('Z', '+00:00'))
            if premium_until_dt > datetime.now():
                status_text = f"‚úÖ Premium –∞–∫—Ç–∏–≤–Ω–∞ –¥–æ {premium_until_dt.strftime('%d.%m.%Y')}"
            else:
                status_text = "‚ùå Premium –∏—Å—Ç–µ–∫–ª–∞"
        except:
            status_text = "‚úÖ Premium –∞–∫—Ç–∏–≤–Ω–∞"
    else:
        status_text = "‚ùå –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π —Ç–∞—Ä–∏—Ñ"
    
    subscription_text = f"""
üíé <b>–¢–ê–†–ò–§–ù–´–ï –ü–õ–ê–ù–´</b>

<b>–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å:</b> {status_text}

<b>üÜì Free:</b>
‚Ä¢ 3 –∞–Ω–∞–ª–∏–∑–∞ –≤ –º–µ—Å—è—Ü
‚Ä¢ –ë–∞–∑–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑

<b>üíé –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∞—Ä–∏—Ñ—ã:</b>
‚Ä¢ ü•â Basic - 299‚ÇΩ/–º–µ—Å (15 –∞–Ω–∞–ª–∏–∑–æ–≤)
‚Ä¢ ü•à Trader - 899‚ÇΩ/–º–µ—Å (50 –∞–Ω–∞–ª–∏–∑–æ–≤)
‚Ä¢ ü•á Pro - 1590‚ÇΩ/–º–µ—Å (150 –∞–Ω–∞–ª–∏–∑–æ–≤)
‚Ä¢ üíé Elite - 2990‚ÇΩ/–º–µ—Å (500 –∞–Ω–∞–ª–∏–∑–æ–≤)

–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Ç–∞—Ä–∏—Ñ:
"""
    
    await message.answer(
        subscription_text,
        reply_markup=get_subscription_keyboard(),
        parse_mode="HTML"
    )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –ø–æ–∫—É–ø–∫–∏
@router.callback_query(F.data == "show_subscriptions")
async def show_subscription_plans(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø–ª–∞–Ω—ã –ø–æ–¥–ø–∏—Å–∫–∏"""
    await callback.answer()
    
    plans_text = """
üíé <b>–¢–ê–†–ò–§–ù–´–ï –ü–õ–ê–ù–´</b>

<b>üÜì Free - 0‚ÇΩ/–º–µ—Å</b>
‚Ä¢ 3 –∞–Ω–∞–ª–∏–∑–∞ –≤ –º–µ—Å—è—Ü
‚Ä¢ –ë–∞–∑–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑

<b>ü•â Basic - 299‚ÇΩ/–º–µ—Å</b>
‚Ä¢ 15 –∞–Ω–∞–ª–∏–∑–æ–≤ –≤ –º–µ—Å—è—Ü
‚Ä¢ –ë–∞–∑–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑
‚Ä¢ Email –ø–æ–¥–¥–µ—Ä–∂–∫–∞

<b>ü•à Trader - 899‚ÇΩ/–º–µ—Å</b>
‚Ä¢ 50 –∞–Ω–∞–ª–∏–∑–æ–≤ –≤ –º–µ—Å—è—Ü
‚Ä¢ –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑
‚Ä¢ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞
‚Ä¢ –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã

<b>ü•á Pro - 1590‚ÇΩ/–º–µ—Å</b>
‚Ä¢ 150 –∞–Ω–∞–ª–∏–∑–æ–≤ –≤ –º–µ—Å—è—Ü
‚Ä¢ –ü–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑
‚Ä¢ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞
‚Ä¢ –†–∞–Ω–Ω–∏–π –¥–æ—Å—Ç—É–ø –∫ –Ω–æ–≤—ã–º —Ñ—É–Ω–∫—Ü–∏—è–º
‚Ä¢ API –¥–æ—Å—Ç—É–ø

<b>üíé Elite - 2990‚ÇΩ/–º–µ—Å</b>
‚Ä¢ 500 –∞–Ω–∞–ª–∏–∑–æ–≤ –≤ –º–µ—Å—è—Ü
‚Ä¢ VIP –∞–Ω–∞–ª–∏–∑
‚Ä¢ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä
‚Ä¢ –≠–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
‚Ä¢ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–π API
‚Ä¢ –ö–∞—Å—Ç–æ–º–Ω—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã

–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ:
    """
    
    await callback.message.edit_text(
        plans_text,
        reply_markup=get_subscription_plans_keyboard(),
        parse_mode="HTML"
    )




@router.callback_query(F.data == "back_to_subscription_menu")
async def back_to_subscription_menu(callback: CallbackQuery):
    """–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≥–ª–∞–≤–Ω–æ–º—É –º–µ–Ω—é –ø–æ–¥–ø–∏—Å–∫–∏"""
    await callback.answer()
    
    subscription_text = """
üíé <b>–¢–ê–†–ò–§–ù–´–ï –ü–õ–ê–ù–´</b>

<b>üÜì Free:</b>
‚Ä¢ 3 –∞–Ω–∞–ª–∏–∑–∞ –≤ –º–µ—Å—è—Ü
‚Ä¢ –ë–∞–∑–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑

<b>üíé –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∞—Ä–∏—Ñ—ã:</b>
‚Ä¢ ü•â Basic - 299‚ÇΩ/–º–µ—Å (15 –∞–Ω–∞–ª–∏–∑–æ–≤)
‚Ä¢ ü•à Trader - 899‚ÇΩ/–º–µ—Å (50 –∞–Ω–∞–ª–∏–∑–æ–≤)
‚Ä¢ ü•á Pro - 1590‚ÇΩ/–º–µ—Å (150 –∞–Ω–∞–ª–∏–∑–æ–≤)
‚Ä¢ üíé Elite - 2990‚ÇΩ/–º–µ—Å (500 –∞–Ω–∞–ª–∏–∑–æ–≤)

–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Ç–∞—Ä–∏—Ñ:
    """
    
    await callback.message.edit_text(
        subscription_text,
        reply_markup=get_subscription_keyboard(),
        parse_mode="HTML"
    )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –ø–ª–∞–Ω–æ–≤ –ø–æ–¥–ø–∏—Å–∫–∏
@router.callback_query(F.data == "subscribe_free")
async def process_free_subscription(callback: CallbackQuery, db: Database, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ Free —Ç–∞—Ä–∏—Ñ–∞"""
    await callback.answer()
    
    # Free —Ç–∞—Ä–∏—Ñ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç –æ–ø–ª–∞—Ç—ã
    await callback.message.edit_text(
        "üÜì <b>Free —Ç–∞—Ä–∏—Ñ —É–∂–µ –∞–∫—Ç–∏–≤–µ–Ω!</b>\n\n"
        "–í–∞–º –¥–æ—Å—Ç—É–ø–Ω–æ:\n"
        "‚Ä¢ 3 –∞–Ω–∞–ª–∏–∑–∞ –≤ –º–µ—Å—è—Ü\n"
        "‚Ä¢ –ë–∞–∑–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑\n\n"
        "–î–ª—è —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π –≤—ã–±–µ—Ä–∏—Ç–µ –ø–ª–∞—Ç–Ω—ã–π —Ç–∞—Ä–∏—Ñ.",
        reply_markup=get_main_keyboard(),
        parse_mode="HTML"
    )


@router.callback_query(F.data == "subscribe_basic")
async def process_basic_subscription(callback: CallbackQuery, db: Database, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ Basic"""
    await callback.answer()
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –ø–ª–∞–Ω–µ
    await state.update_data(
        purchase_type="subscription",
        plan_id="basic",
        plan_name="Basic",
        amount=299,
        days=30
    )
    
    plan = config.SUBSCRIPTION_PLANS['basic']
    payment_text = f"""
ü•â <b>{plan['name']}</b>

<b>–°—Ç–æ–∏–º–æ—Å—Ç—å:</b> {plan['price']}‚ÇΩ/–º–µ—Å

<b>–ß—Ç–æ –≤—Ö–æ–¥–∏—Ç:</b>
{chr(10).join([f"‚úÖ {feature}" for feature in plan['features']])}

–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:
    """
    
    await callback.message.edit_text(
        payment_text,
        reply_markup=get_payment_method_keyboard(),
        parse_mode="HTML"
    )


@router.callback_query(F.data == "subscribe_trader")
async def process_trader_subscription(callback: CallbackQuery, db: Database, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ Trader"""
    await callback.answer()
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –ø–ª–∞–Ω–µ
    await state.update_data(
        purchase_type="subscription",
        plan_id="trader",
        plan_name="Trader",
        amount=899,
        days=30
    )
    
    plan = config.SUBSCRIPTION_PLANS['trader']
    payment_text = f"""
ü•à <b>{plan['name']}</b>

<b>–°—Ç–æ–∏–º–æ—Å—Ç—å:</b> {plan['price']}‚ÇΩ/–º–µ—Å

<b>–ß—Ç–æ –≤—Ö–æ–¥–∏—Ç:</b>
{chr(10).join([f"‚úÖ {feature}" for feature in plan['features']])}

–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:
    """
    
    await callback.message.edit_text(
        payment_text,
        reply_markup=get_payment_method_keyboard(),
        parse_mode="HTML"
    )


@router.callback_query(F.data == "subscribe_pro")
async def process_pro_subscription(callback: CallbackQuery, db: Database, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ Pro"""
    await callback.answer()
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –ø–ª–∞–Ω–µ
    await state.update_data(
        purchase_type="subscription",
        plan_id="pro",
        plan_name="Pro",
        amount=1590,
        days=30
    )
    
    plan = config.SUBSCRIPTION_PLANS['pro']
    payment_text = f"""
ü•á <b>{plan['name']}</b>

<b>–°—Ç–æ–∏–º–æ—Å—Ç—å:</b> {plan['price']}‚ÇΩ/–º–µ—Å

<b>–ß—Ç–æ –≤—Ö–æ–¥–∏—Ç:</b>
{chr(10).join([f"‚úÖ {feature}" for feature in plan['features']])}

–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:
    """
    
    await callback.message.edit_text(
        payment_text,
        reply_markup=get_payment_method_keyboard(),
        parse_mode="HTML"
    )


@router.callback_query(F.data == "subscribe_elite")
async def process_elite_subscription(callback: CallbackQuery, db: Database, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ Elite"""
    await callback.answer()
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –ø–ª–∞–Ω–µ
    await state.update_data(
        purchase_type="subscription",
        plan_id="elite",
        plan_name="Elite",
        amount=2990,
        days=30
    )
    
    plan = config.SUBSCRIPTION_PLANS['elite']
    payment_text = f"""
üíé <b>{plan['name']}</b>

<b>–°—Ç–æ–∏–º–æ—Å—Ç—å:</b> {plan['price']}‚ÇΩ/–º–µ—Å

<b>–ß—Ç–æ –≤—Ö–æ–¥–∏—Ç:</b>
{chr(10).join([f"‚úÖ {feature}" for feature in plan['features']])}

–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:
    """
    
    await callback.message.edit_text(
        payment_text,
        reply_markup=get_payment_method_keyboard(),
        parse_mode="HTML"
    )




@router.callback_query(F.data.startswith("check_payment_"))
async def check_payment_status(callback: CallbackQuery, db: Database):
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞"""
    await callback.answer()
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –ø–ª–∞—Ç–µ–∂–∞ –∏–∑ callback_data
    payment_id = callback.data.replace("check_payment_", "")
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞
        payment = await payment_manager.check_payment_status(payment_id)
        
        if not payment:
            await callback.message.edit_text(
                "‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–ª–∞—Ç–µ–∂–∞</b>\n\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π.",
                parse_mode="HTML"
            )
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ø–µ—à–Ω–æ—Å—Ç—å –ø–ª–∞—Ç–µ–∂–∞
        if payment_manager.is_payment_successful(payment):
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —É—Å–ø–µ—à–Ω—ã–π –ø–ª–∞—Ç–µ–∂
            user_id = callback.from_user.id
            metadata = payment.metadata or {}
            payment_type = metadata.get("payment_type", "")
            
            if payment_type == "subscription":
                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–¥–ø–∏—Å–∫–µ –∏–∑ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
                subscription_type = metadata.get("subscription_type", "basic")
                plan = config.SUBSCRIPTION_PLANS.get(subscription_type, config.SUBSCRIPTION_PLANS['basic'])
                days = plan['days']
                
                # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø–æ–¥–ø–∏—Å–∫—É
                await db.grant_premium(user_id, days=days)
                await db.create_subscription(user_id, subscription_type, plan['price'])
                
                success_text = f"""
‚úÖ <b>–ü–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω!</b>

üíé <b>{plan['name']} –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞</b>

–¢–µ–ø–µ—Ä—å –≤–∞–º –¥–æ—Å—Ç—É–ø–Ω–æ:
‚Ä¢ {plan['analyses_per_month']} –∞–Ω–∞–ª–∏–∑–æ–≤ –≤ –º–µ—Å—è—Ü
{chr(10).join([f"‚Ä¢ {feature}" for feature in plan['features']])}

<b>ID –ø–ª–∞—Ç–µ–∂–∞:</b> <code>{payment.id}</code>
                """
            else:
                success_text = f"""
‚úÖ <b>–ü–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω!</b>

<b>ID –ø–ª–∞—Ç–µ–∂–∞:</b> <code>{payment.id}</code>
                """
            
            await callback.message.edit_text(
                success_text,
                reply_markup=get_main_keyboard(),
                parse_mode="HTML"
            )
            
        else:
            # –ü–ª–∞—Ç–µ–∂ –µ—â–µ –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω
            status_text = f"""
üîÑ <b>–°—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞: {payment.status.value}</b>

<b>ID –ø–ª–∞—Ç–µ–∂–∞:</b> <code>{payment.id}</code>

–ü–ª–∞—Ç–µ–∂ –µ—â–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç.
            """
            
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(
                    text="üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–Ω–æ–≤–∞",
                    callback_data=f"check_payment_{payment.id}"
                )],
                [InlineKeyboardButton(
                    text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å",
                    callback_data="cancel_subscription"
                )]
            ])
            
            await callback.message.edit_text(
                status_text,
                reply_markup=keyboard,
                parse_mode="HTML"
            )
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞: {e}")
        await callback.message.edit_text(
            "‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–ª–∞—Ç–µ–∂–∞</b>\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π.",
            parse_mode="HTML"
        )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å–ø–æ—Å–æ–±–∞ –æ–ø–ª–∞—Ç—ã
@router.callback_query(F.data == "payment_method_yookassa")
async def process_yookassa_payment(callback: CallbackQuery, db: Database, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–ø–ª–∞—Ç—ã —á–µ—Ä–µ–∑ –Æ–ö–∞—Å—Å–∞"""
    await callback.answer()
    
    user_id = callback.from_user.id
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–∫—É–ø–∫–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    purchase_type = data.get('purchase_type')
    plan_id = data.get('plan_id')
    plan_name = data.get('plan_name')
    amount = data.get('amount')
    
    try:
        if purchase_type == "subscription":
            # –°–æ–∑–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂ –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏
            days = data.get('days')
            payment = await payment_manager.create_subscription_payment(
                user_id=user_id,
                subscription_type=plan_id,
                amount=float(amount),
                description=f"{plan_name} –Ω–∞ {days} –¥–Ω–µ–π"
            )
        else:
            raise ValueError("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –ø–æ–∫—É–ø–∫–∏")
        
        if not payment:
            await callback.message.edit_text(
                "‚ùå <b>–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞</b>\n\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π.",
                parse_mode="HTML"
            )
            return
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –æ–ø–ª–∞—Ç—ã
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(
                text="üí≥ –û–ø–ª–∞—Ç–∏—Ç—å –∫–∞—Ä—Ç–æ–π",
                url=payment.confirmation_url
            )],
            [InlineKeyboardButton(
                text="üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å",
                callback_data=f"check_payment_{payment.id}"
            )],
            [InlineKeyboardButton(
                text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å",
                callback_data="cancel_subscription"
            )]
        ])
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏
        plan = config.SUBSCRIPTION_PLANS.get(plan_id, {})
        features = plan.get('features', [])
        payment_text = f"""
üíé <b>{plan_name}</b>

<b>–°—Ç–æ–∏–º–æ—Å—Ç—å:</b> {amount}‚ÇΩ/–º–µ—Å
<b>–°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:</b> üí≥ –ë–∞–Ω–∫–æ–≤—Å–∫–∞—è –∫–∞—Ä—Ç–∞

<b>–ß—Ç–æ –≤—Ö–æ–¥–∏—Ç:</b>
{chr(10).join([f"‚úÖ {feature}" for feature in features])}

<b>–°—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞:</b> {payment.status.value}
<b>ID –ø–ª–∞—Ç–µ–∂–∞:</b> <code>{payment.id}</code>

–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–û–ø–ª–∞—Ç–∏—Ç—å –∫–∞—Ä—Ç–æ–π" –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –æ–ø–ª–∞—Ç–µ.
–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å".
        """
        
        await callback.message.edit_text(
            payment_text,
            reply_markup=keyboard,
            parse_mode="HTML"
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞ –Æ–ö–∞—Å—Å–∞: {e}")
        await callback.message.edit_text(
            "‚ùå <b>–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞</b>\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π.",
            parse_mode="HTML"
        )


@router.callback_query(F.data == "payment_method_crypto")
async def process_crypto_payment_selection(callback: CallbackQuery, db: Database):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫—Ä–∏–ø—Ç–æ–ø–ª–∞—Ç–µ–∂–∞"""
    await callback.answer()
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã
        available_currencies = await payment_manager.get_available_crypto_currencies()
        
        if not available_currencies:
            await callback.message.edit_text(
                "‚ùå <b>–ö—Ä–∏–ø—Ç–æ–ø–ª–∞—Ç–µ–∂–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã</b>\n\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–ø–ª–∞—Ç–∏—Ç—å –∫–∞—Ä—Ç–æ–π –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π.",
                parse_mode="HTML"
            )
            return
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã
        crypto_text = """
‚Çø <b>–û–ø–ª–∞—Ç–∞ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–æ–π</b>

–í—ã–±–µ—Ä–∏—Ç–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É –¥–ª—è –æ–ø–ª–∞—Ç—ã:

<b>–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã:</b>
        """
        
        await callback.message.edit_text(
            crypto_text,
            reply_markup=get_crypto_currency_keyboard(available_currencies),
            parse_mode="HTML"
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç: {e}")
        await callback.message.edit_text(
            "‚ùå <b>–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç</b>\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –æ–ø–ª–∞—Ç—É –∫–∞—Ä—Ç–æ–π.",
            parse_mode="HTML"
        )


@router.callback_query(F.data.startswith("crypto_currency_"))
async def process_crypto_currency_selection(callback: CallbackQuery, db: Database, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã"""
    await callback.answer()
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –≤–∞–ª—é—Ç—É –∏–∑ callback_data
    currency = callback.data.replace("crypto_currency_", "")
    user_id = callback.from_user.id
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–∫—É–ø–∫–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    purchase_type = data.get('purchase_type')
    plan_id = data.get('plan_id')
    plan_name = data.get('plan_name')
    amount = data.get('amount')
    
    try:
        if purchase_type == "subscription":
            # –°–æ–∑–¥–∞–µ–º –∫—Ä–∏–ø—Ç–æ–ø–ª–∞—Ç–µ–∂ –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏
            days = data.get('days')
            payment = await payment_manager.create_crypto_subscription_payment(
                user_id=user_id,
                subscription_type=plan_id,
                amount=float(amount),
                description=f"{plan_name} –Ω–∞ {days} –¥–Ω–µ–π",
                crypto_currency=currency
            )
        else:
            raise ValueError("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –ø–æ–∫—É–ø–∫–∏")
        
        if not payment:
            await callback.message.edit_text(
                "‚ùå <b>–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫—Ä–∏–ø—Ç–æ–ø–ª–∞—Ç–µ–∂–∞</b>\n\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π.",
                parse_mode="HTML"
            )
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∏–º–µ—Ä–Ω—É—é —Ü–µ–Ω—É –≤ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–µ
        crypto_amount = await payment_manager.get_crypto_price_estimate(float(amount), currency)
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –æ–ø–ª–∞—Ç—ã
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(
                text=f"‚Çø –û–ø–ª–∞—Ç–∏—Ç—å {currency}",
                url=payment.payment_url
            )],
            [InlineKeyboardButton(
                text="üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å",
                callback_data=f"check_crypto_payment_{payment.payment_id}"
            )],
            [InlineKeyboardButton(
                text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å",
                callback_data="cancel_subscription"
            )]
        ])
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏
        plan = config.SUBSCRIPTION_PLANS.get(plan_id, {})
        features = plan.get('features', [])
        payment_text = f"""
üíé <b>{plan_name}</b>

<b>–°—Ç–æ–∏–º–æ—Å—Ç—å:</b> {amount}‚ÇΩ/–º–µ—Å
<b>–°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:</b> ‚Çø {currency}
{f'<b>–ü—Ä–∏–º–µ—Ä–Ω–∞—è —Å—É–º–º–∞:</b> {crypto_amount:.8f} {currency}' if crypto_amount else ''}

<b>–ß—Ç–æ –≤—Ö–æ–¥–∏—Ç:</b>
{chr(10).join([f"‚úÖ {feature}" for feature in features])}

<b>–°—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞:</b> {payment.status.value}
<b>ID –ø–ª–∞—Ç–µ–∂–∞:</b> <code>{payment.payment_id}</code>

–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–û–ø–ª–∞—Ç–∏—Ç—å {currency}" –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –æ–ø–ª–∞—Ç–µ.
–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å".
        """
        
        await callback.message.edit_text(
            payment_text,
            reply_markup=keyboard,
            parse_mode="HTML"
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫—Ä–∏–ø—Ç–æ–ø–ª–∞—Ç–µ–∂–∞: {e}")
        await callback.message.edit_text(
            "‚ùå <b>–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫—Ä–∏–ø—Ç–æ–ø–ª–∞—Ç–µ–∂–∞</b>\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π.",
            parse_mode="HTML"
        )


@router.callback_query(F.data.startswith("check_crypto_payment_"))
async def check_crypto_payment_status(callback: CallbackQuery, db: Database):
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∫—Ä–∏–ø—Ç–æ–ø–ª–∞—Ç–µ–∂–∞"""
    await callback.answer()
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –ø–ª–∞—Ç–µ–∂–∞ –∏–∑ callback_data
    payment_id = callback.data.replace("check_crypto_payment_", "")
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∫—Ä–∏–ø—Ç–æ–ø–ª–∞—Ç–µ–∂–∞
        payment = await payment_manager.check_crypto_payment_status(payment_id)
        
        if not payment:
            await callback.message.edit_text(
                "‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫—Ä–∏–ø—Ç–æ–ø–ª–∞—Ç–µ–∂–∞</b>\n\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π.",
                parse_mode="HTML"
            )
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ø–µ—à–Ω–æ—Å—Ç—å –ø–ª–∞—Ç–µ–∂–∞
        if payment_manager.is_crypto_payment_successful(payment):
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —É—Å–ø–µ—à–Ω—ã–π –ø–ª–∞—Ç–µ–∂
            user_id = callback.from_user.id
            metadata = payment.metadata or {}
            payment_type = metadata.get("payment_type", "")
            
            if payment_type == "subscription":
                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–¥–ø–∏—Å–∫–µ –∏–∑ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
                subscription_type = metadata.get("subscription_type", "basic")
                plan = config.SUBSCRIPTION_PLANS.get(subscription_type, config.SUBSCRIPTION_PLANS['basic'])
                days = plan['days']
                
                # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø–æ–¥–ø–∏—Å–∫—É
                await db.grant_premium(user_id, days=days)
                await db.create_subscription(user_id, subscription_type, plan['price'])
                
                success_text = f"""
‚úÖ <b>–ö—Ä–∏–ø—Ç–æ–ø–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω!</b>

üíé <b>{plan['name']} –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞</b>

–¢–µ–ø–µ—Ä—å –≤–∞–º –¥–æ—Å—Ç—É–ø–Ω–æ:
‚Ä¢ {plan['analyses_per_month']} –∞–Ω–∞–ª–∏–∑–æ–≤ –≤ –º–µ—Å—è—Ü
{chr(10).join([f"‚Ä¢ {feature}" for feature in plan['features']])}

<b>ID –ø–ª–∞—Ç–µ–∂–∞:</b> <code>{payment.payment_id}</code>
                """
            else:
                success_text = f"""
‚úÖ <b>–ö—Ä–∏–ø—Ç–æ–ø–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω!</b>

<b>ID –ø–ª–∞—Ç–µ–∂–∞:</b> <code>{payment.payment_id}</code>
                """
            
            await callback.message.edit_text(
                success_text,
                reply_markup=get_main_keyboard(),
                parse_mode="HTML"
            )
            
        else:
            # –ü–ª–∞—Ç–µ–∂ –µ—â–µ –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω
            status_text = f"""
üîÑ <b>–°—Ç–∞—Ç—É—Å –∫—Ä–∏–ø—Ç–æ–ø–ª–∞—Ç–µ–∂–∞: {payment.status.value}</b>

<b>ID –ø–ª–∞—Ç–µ–∂–∞:</b> <code>{payment.payment_id}</code>

–ö—Ä–∏–ø—Ç–æ–ø–ª–∞—Ç–µ–∂ –µ—â–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç.
            """
            
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(
                    text="üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–Ω–æ–≤–∞",
                    callback_data=f"check_crypto_payment_{payment.payment_id}"
                )],
                [InlineKeyboardButton(
                    text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å",
                    callback_data="cancel_subscription"
                )]
            ])
            
            await callback.message.edit_text(
                status_text,
                reply_markup=keyboard,
                parse_mode="HTML"
            )
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –∫—Ä–∏–ø—Ç–æ–ø–ª–∞—Ç–µ–∂–∞: {e}")
        await callback.message.edit_text(
            "‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫—Ä–∏–ø—Ç–æ–ø–ª–∞—Ç–µ–∂–∞</b>\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π.",
            parse_mode="HTML"
        )


@router.callback_query(F.data == "show_all_crypto")
async def show_all_crypto_currencies(callback: CallbackQuery, db: Database):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã"""
    await callback.answer()
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã
        available_currencies = await payment_manager.get_available_crypto_currencies()
        
        if not available_currencies:
            await callback.message.edit_text(
                "‚ùå <b>–ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã</b>\n\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –æ–ø–ª–∞—Ç—É –∫–∞—Ä—Ç–æ–π.",
                parse_mode="HTML"
            )
            return
        
        crypto_text = f"""
‚Çø <b>–í—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã</b>

–í—ã–±–µ—Ä–∏—Ç–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É –¥–ª—è –æ–ø–ª–∞—Ç—ã:

<b>–î–æ—Å—Ç—É–ø–Ω–æ:</b> {len(available_currencies)} –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç
        """
        
        await callback.message.edit_text(
            crypto_text,
            reply_markup=get_all_crypto_currencies_keyboard(available_currencies),
            parse_mode="HTML"
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç: {e}")
        await callback.message.edit_text(
            "‚ùå <b>–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç</b>\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –æ–ø–ª–∞—Ç—É –∫–∞—Ä—Ç–æ–π.",
            parse_mode="HTML"
        )


@router.callback_query(F.data == "cancel_subscription")
async def cancel_subscription(callback: CallbackQuery):
    """–û—Ç–º–µ–Ω–∏—Ç—å –≤—ã–±–æ—Ä –ø–æ–¥–ø–∏—Å–∫–∏"""
    await callback.answer("–û—Ç–º–µ–Ω–µ–Ω–æ")
    await callback.message.edit_text(
        "‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ",
    )


# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–π –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø—Ä–µ–º–∏—É–º–∞ (–¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏)
@router.message(Command("activate_premium_test"))
async def activate_premium_test(message: Message, db: Database):
    """–¢–µ—Å—Ç–æ–≤–∞—è –∞–∫—Ç–∏–≤–∞—Ü–∏—è –ø—Ä–µ–º–∏—É–º–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏)"""
    user_id = message.from_user.id
    
    # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø—Ä–µ–º–∏—É–º –Ω–∞ 30 –¥–Ω–µ–π
    await db.grant_premium(user_id, days=30)
    
    await message.answer(
        "‚úÖ Premium –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –Ω–∞ 30 –¥–Ω–µ–π!\n\n"
        "–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏.\n"
        f"–¢–µ–ø–µ—Ä—å –¥–æ—Å—Ç—É–ø–Ω–æ {config.PREMIUM_ANALYSES_PER_DAY} –∞–Ω–∞–ª–∏–∑–æ–≤ –≤ –¥–µ–Ω—å.",
        reply_markup=get_main_keyboard()
    )


@router.message(Command("deactivate_premium_test"))
async def deactivate_premium_test(message: Message, db: Database):
    """–¢–µ—Å—Ç–æ–≤–∞—è –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏—è –ø—Ä–µ–º–∏—É–º–∞"""
    user_id = message.from_user.id
    
    await db.revoke_premium(user_id)
    
    await message.answer(
        "‚ùå Premium –ø–æ–¥–ø–∏—Å–∫–∞ –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞.\n\n"
        f"–í–µ—Ä–Ω—É–ª–∏—Å—å {config.FREE_ANALYSES_PER_DAY} –∞–Ω–∞–ª–∏–∑–æ–≤ –≤ –¥–µ–Ω—å.",
        reply_markup=get_main_keyboard()
    )

