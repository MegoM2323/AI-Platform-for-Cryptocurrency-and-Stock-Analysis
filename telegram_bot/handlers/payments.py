"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –ø–æ–¥–ø–∏—Å–æ–∫ –∏ –ø–ª–∞—Ç–µ–∂–µ–π
"""

from aiogram import Router, F
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup, WebhookInfo
from aiogram.fsm.context import FSMContext
from aiogram.webhook.aiohttp_server import SimpleRequestHandler
from aiohttp import web
import json
import aiosqlite
import asyncio
from datetime import datetime, timedelta

from ..states import SubscriptionStates, PurchaseStates
from ..keyboards import (
    get_main_keyboard, 
    get_subscription_keyboard, 
    get_subscription_plans_keyboard,
    get_payment_method_keyboard,
    get_crypto_currency_keyboard,
    get_all_crypto_currencies_keyboard
)
from database import Database
from config import config
from Payments.payment_system import payment_manager, PaymentStatus
import logging

logger = logging.getLogger(__name__)
router = Router()

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫ –ø–ª–∞—Ç–µ–∂–µ–π
active_payment_checks = {}

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π (–∑–∞—â–∏—Ç–∞ –æ—Ç –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è)
processed_payments = {}

async def start_payment_monitoring(payment_id: str, user_id: int, payment_type: str, db: Database, bot, timeout_minutes: int = 10):
    """–ó–∞–ø—É—Å—Ç–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø–ª–∞—Ç–µ–∂–∞ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π"""
    try:
        start_time = datetime.now()
        timeout = timedelta(minutes=timeout_minutes)
        
        logger.info(f"–ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø–ª–∞—Ç–µ–∂–∞ {payment_id} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–≤–µ—Ä–∫–µ
        active_payment_checks[payment_id] = {
            'user_id': user_id,
            'payment_type': payment_type,
            'start_time': start_time,
            'timeout': timeout,
            'db': db,
            'bot': bot,
            'status': 'monitoring'
        }
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—É—é –∑–∞–¥–∞—á—É –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        asyncio.create_task(monitor_payment_status(payment_id))
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø–ª–∞—Ç–µ–∂–∞ {payment_id}: {e}")


async def monitor_payment_status(payment_id: str):
    """–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞ –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ"""
    try:
        if payment_id not in active_payment_checks:
            logger.warning(f"–ü–ª–∞—Ç–µ–∂ {payment_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ–≤–µ—Ä–∫–∞—Ö")
            return
            
        check_info = active_payment_checks[payment_id]
        user_id = check_info['user_id']
        payment_type = check_info['payment_type']
        db = check_info['db']
        bot = check_info['bot']
        start_time = check_info['start_time']
        timeout = check_info['timeout']
        
        logger.info(f"–ù–∞—á–∞–ª–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø–ª–∞—Ç–µ–∂–∞ {payment_id} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}, —Ç–∏–ø: {payment_type}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥ –≤ —Ç–µ—á–µ–Ω–∏–µ 10 –º–∏–Ω—É—Ç
        check_interval = 30  # —Å–µ–∫—É–Ω–¥
        max_checks = int(timeout.total_seconds() / check_interval)
        
        for attempt in range(max_checks):
            await asyncio.sleep(check_interval)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∏—Å—Ç–µ–∫ –ª–∏ —Ç–∞–π–º–∞—É—Ç
            if datetime.now() - start_time > timeout:
                logger.info(f"–¢–∞–π–º–∞—É—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø–ª–∞—Ç–µ–∂–∞ {payment_id} (–ø—Ä–æ—à–ª–æ {timeout.total_seconds()/60} –º–∏–Ω—É—Ç)")
                await handle_payment_timeout(payment_id, user_id, bot)
                break
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞
            try:
                logger.info(f"–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ {attempt + 1}/{max_checks} –¥–ª—è –ø–ª–∞—Ç–µ–∂–∞ {payment_id}")
                
                if payment_type == "yookassa":
                    payment = await payment_manager.check_payment_status(payment_id)
                    if payment:
                        logger.info(f"–ü–æ–ª—É—á–µ–Ω —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞ {payment_id}: {payment.status.value}")
                        if payment_manager.is_payment_successful(payment):
                            logger.info(f"–ü–ª–∞—Ç–µ–∂ {payment_id} —É—Å–ø–µ—à–Ω–æ –æ–ø–ª–∞—á–µ–Ω, –Ω–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É")
                            await handle_successful_payment(payment_id, user_id, payment, db, bot)
                            break
                    else:
                        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞ {payment_id} –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ {attempt + 1}")
                        
                elif payment_type == "crypto":
                    payment = await payment_manager.check_crypto_payment_status(payment_id)
                    if payment:
                        logger.info(f"–ü–æ–ª—É—á–µ–Ω —Å—Ç–∞—Ç—É—Å –∫—Ä–∏–ø—Ç–æ–ø–ª–∞—Ç–µ–∂–∞ {payment_id}: {payment.status.value}")
                        if payment_manager.is_crypto_payment_successful(payment):
                            logger.info(f"–ö—Ä–∏–ø—Ç–æ–ø–ª–∞—Ç–µ–∂ {payment_id} —É—Å–ø–µ—à–Ω–æ –æ–ø–ª–∞—á–µ–Ω, –Ω–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É")
                            await handle_successful_crypto_payment(payment_id, user_id, payment, db, bot)
                            break
                    else:
                        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∫—Ä–∏–ø—Ç–æ–ø–ª–∞—Ç–µ–∂–∞ {payment_id} –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ {attempt + 1}")
                        
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞ {payment_id} –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ {attempt + 1}: {e}", exc_info=True)
                # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –¥–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
            
            if attempt < max_checks - 1:
                logger.debug(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ {attempt + 1}/{max_checks} –¥–ª—è –ø–ª–∞—Ç–µ–∂–∞ {payment_id} - –ø–ª–∞—Ç–µ–∂ –µ—â–µ –Ω–µ –æ–ø–ª–∞—á–µ–Ω, —Å–ª–µ–¥—É—é—â–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ {check_interval} —Å–µ–∫—É–Ω–¥")
        
        # –£–¥–∞–ª—è–µ–º –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫
        if payment_id in active_payment_checks:
            del active_payment_checks[payment_id]
            logger.info(f"–ü–ª–∞—Ç–µ–∂ {payment_id} —É–¥–∞–ª–µ–Ω –∏–∑ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞")
            
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø–ª–∞—Ç–µ–∂–∞ {payment_id}: {e}", exc_info=True)
        if payment_id in active_payment_checks:
            del active_payment_checks[payment_id]


async def handle_successful_payment(payment_id: str, user_id: int, payment, db: Database, bot):
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å —É—Å–ø–µ—à–Ω—ã–π –ø–ª–∞—Ç–µ–∂ (–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞)"""
    try:
        logger.info(f"ü§ñ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞ {payment_id} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        
        # ‚úÖ –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –±—ã–ª –ª–∏ –ø–ª–∞—Ç–µ–∂ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω (—Ä—É—á–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π –∏–ª–∏ –¥—Ä—É–≥–∏–º –ø—Ä–æ—Ü–µ—Å—Å–æ–º)
        already_processed = await db.is_payment_processed(payment_id)
        if already_processed:
            logger.info(f"‚è≠Ô∏è –ü–ª–∞—Ç–µ–∂ {payment_id} —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω (–≤–æ–∑–º–æ–∂–Ω–æ, —Ä—É—á–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π), –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É")
            # –£–¥–∞–ª—è–µ–º –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫
            if payment_id in active_payment_checks:
                del active_payment_checks[payment_id]
            return
        
        metadata = payment.metadata or {}
        payment_type = metadata.get("payment_type", "")
        
        if payment_type == "subscription":
            subscription_type = metadata.get("subscription_type", "basic")
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —É—Å–ø–µ—à–Ω—ã–π –ø–ª–∞—Ç–µ–∂
            success, plan_name, monthly_limit = await process_successful_payment(
                payment_id, payment_type, user_id, db, subscription_type
            )
            
            if success:
                # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –º—ã —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–ª–∏ –ø–ª–∞—Ç–µ–∂
                await notify_user_about_payment_success(user_id, payment_id, plan_name, monthly_limit, bot, db)
                
                # –£–¥–∞–ª—è–µ–º –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫
                if payment_id in active_payment_checks:
                    del active_payment_checks[payment_id]
                
                logger.info(f"‚úÖ –ü–ª–∞—Ç–µ–∂ {payment_id} —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            else:
                logger.warning(f"‚ö†Ô∏è –ü–ª–∞—Ç–µ–∂ {payment_id} –Ω–µ –±—ã–ª –æ–±—Ä–∞–±–æ—Ç–∞–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ (–≤–æ–∑–º–æ–∂–Ω–æ, —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω)")
        else:
            logger.warning(f"‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –ø–ª–∞—Ç–µ–∂–∞ {payment_type} –¥–ª—è –ø–ª–∞—Ç–µ–∂–∞ {payment_id}")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞ {payment_id}: {e}", exc_info=True)


async def handle_successful_crypto_payment(payment_id: str, user_id: int, payment, db: Database, bot):
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å —É—Å–ø–µ—à–Ω—ã–π –∫—Ä–∏–ø—Ç–æ–ø–ª–∞—Ç–µ–∂ (–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞)"""
    try:
        logger.info(f"ü§ñ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ–≥–æ –∫—Ä–∏–ø—Ç–æ–ø–ª–∞—Ç–µ–∂–∞ {payment_id} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        
        # ‚úÖ –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –±—ã–ª –ª–∏ –ø–ª–∞—Ç–µ–∂ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω (—Ä—É—á–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π –∏–ª–∏ –¥—Ä—É–≥–∏–º –ø—Ä–æ—Ü–µ—Å—Å–æ–º)
        already_processed = await db.is_payment_processed(payment_id)
        if already_processed:
            logger.info(f"‚è≠Ô∏è –ö—Ä–∏–ø—Ç–æ–ø–ª–∞—Ç–µ–∂ {payment_id} —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω (–≤–æ–∑–º–æ–∂–Ω–æ, —Ä—É—á–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π), –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É")
            # –£–¥–∞–ª—è–µ–º –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫
            if payment_id in active_payment_checks:
                del active_payment_checks[payment_id]
            return
        
        metadata = payment.metadata or {}
        payment_type = metadata.get("payment_type", "")
        
        if payment_type == "subscription":
            subscription_type = metadata.get("subscription_type", "basic")
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —É—Å–ø–µ—à–Ω—ã–π –∫—Ä–∏–ø—Ç–æ–ø–ª–∞—Ç–µ–∂
            success, plan_name, monthly_limit = await process_successful_payment(
                payment_id, payment_type, user_id, db, subscription_type
            )
            
            if success:
                # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –º—ã —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–ª–∏ –ø–ª–∞—Ç–µ–∂
                await notify_user_about_payment_success(user_id, payment_id, plan_name, monthly_limit, bot, db)
                
                # –£–¥–∞–ª—è–µ–º –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫
                if payment_id in active_payment_checks:
                    del active_payment_checks[payment_id]
                
                logger.info(f"‚úÖ –ö—Ä–∏–ø—Ç–æ–ø–ª–∞—Ç–µ–∂ {payment_id} —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            else:
                logger.warning(f"‚ö†Ô∏è –ö—Ä–∏–ø—Ç–æ–ø–ª–∞—Ç–µ–∂ {payment_id} –Ω–µ –±—ã–ª –æ–±—Ä–∞–±–æ—Ç–∞–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ (–≤–æ–∑–º–æ–∂–Ω–æ, —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω)")
        else:
            logger.warning(f"‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –∫—Ä–∏–ø—Ç–æ–ø–ª–∞—Ç–µ–∂–∞ {payment_type} –¥–ª—è –ø–ª–∞—Ç–µ–∂–∞ {payment_id}")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ —É—Å–ø–µ—à–Ω–æ–≥–æ –∫—Ä–∏–ø—Ç–æ–ø–ª–∞—Ç–µ–∂–∞ {payment_id}: {e}", exc_info=True)


async def handle_payment_timeout(payment_id: str, user_id: int, bot):
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ç–∞–π–º–∞—É—Ç –ø–ª–∞—Ç–µ–∂–∞"""
    try:
        timeout_text = f"""
‚è∞ <b>–í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞ –∏—Å—Ç–µ–∫–ª–æ</b>

–ü–ª–∞—Ç–µ–∂ <code>{payment_id}</code> –Ω–µ –±—ã–ª –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω –≤ —Ç–µ—á–µ–Ω–∏–µ 10 –º–∏–Ω—É—Ç.

<b>–ß—Ç–æ –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å:</b>
‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞ –≤—Ä—É—á–Ω—É—é
‚Ä¢ –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂
‚Ä¢ –û–±—Ä–∞—Ç–∏—Ç—å—Å—è –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É

–ï—Å–ª–∏ –≤—ã —É–∂–µ –æ–ø–ª–∞—Ç–∏–ª–∏, –Ω–∞–∂–º–∏—Ç–µ "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤—Ä—É—á–Ω—É—é"
        """
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(
                text="üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤—Ä—É—á–Ω—É—é",
                callback_data=f"manual_check_payment_{payment_id}"
            )],
            [InlineKeyboardButton(
                text="üíé –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂",
                callback_data="show_subscriptions"
            )],
            [InlineKeyboardButton(
                text="‚ùå –û—Ç–º–µ–Ω–∞",
                callback_data="cancel_subscription"
            )]
        ])
        
        await bot.send_message(
            chat_id=user_id,
            text=timeout_text,
            reply_markup=keyboard,
            parse_mode="HTML"
        )
        
        # –£–¥–∞–ª—è–µ–º –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫
        if payment_id in active_payment_checks:
            del active_payment_checks[payment_id]
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–∞–π–º–∞—É—Ç–∞ –ø–ª–∞—Ç–µ–∂–∞ {payment_id}: {e}")


async def process_successful_payment(payment_id: str, payment_type: str, user_id: int, db: Database, subscription_type: str = None):
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å —É—Å–ø–µ—à–Ω—ã–π –ø–ª–∞—Ç–µ–∂ –∏ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø–æ–¥–ø–∏—Å–∫—É"""
    try:
        # ‚úÖ –ü–†–û–í–ï–†–ö–ê 1: –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö, –Ω–µ –±—ã–ª –ª–∏ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω —ç—Ç–æ—Ç –ø–ª–∞—Ç—ë–∂
        is_processed = await db.is_payment_processed(payment_id)
        if is_processed:
            logger.warning(f"‚ö†Ô∏è –ü–ª–∞—Ç—ë–∂ {payment_id} —É–∂–µ –±—ã–ª –æ–±—Ä–∞–±–æ—Ç–∞–Ω —Ä–∞–Ω–µ–µ (–Ω–∞–π–¥–µ–Ω –≤ –ë–î), –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–æ–≤—Ç–æ—Ä–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É")
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–º –ø–ª–∞—Ç–µ–∂–µ
            processed_info = await db.get_processed_payment(payment_id)
            if processed_info:
                return (True, processed_info['plan_name'], processed_info['analyses_added'])
            return (False, None, 0)
        
        # ‚úÖ –ü–†–û–í–ï–†–ö–ê 2: –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤ –ø–∞–º—è—Ç–∏ (–Ω–∞ —Å–ª—É—á–∞–π –±—ã—Å—Ç—Ä—ã—Ö –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –≤—ã–∑–æ–≤–æ–≤)
        if payment_id in processed_payments:
            logger.warning(f"‚ö†Ô∏è –ü–ª–∞—Ç—ë–∂ {payment_id} —É–∂–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç (–Ω–∞–π–¥–µ–Ω –≤ –ø–∞–º—è—Ç–∏), –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
            return processed_payments[payment_id]
        
        # –ë–ª–æ–∫–∏—Ä—É–µ–º –ø–ª–∞—Ç–µ–∂ –≤ –ø–∞–º—è—Ç–∏ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
        processed_payments[payment_id] = (False, None, 0)
        
        if payment_type == "subscription":
            # –ï—Å–ª–∏ —Ç–∏–ø –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω, –ø–æ–ª—É—á–∞–µ–º –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            if not subscription_type:
                async with aiosqlite.connect(db.db_path) as db_conn:
                    db_conn.row_factory = aiosqlite.Row
                    async with db_conn.execute(
                        "SELECT subscription_type FROM subscriptions WHERE user_id = ? ORDER BY created_at DESC LIMIT 1",
                        (user_id,)
                    ) as cursor:
                        row = await cursor.fetchone()
                        if row:
                            subscription_type = row['subscription_type']
                        else:
                            subscription_type = 'basic'  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–ª–∞–Ω –ø–æ–¥–ø–∏—Å–∫–∏
            plan = config.SUBSCRIPTION_PLANS.get(subscription_type, config.SUBSCRIPTION_PLANS['basic'])
            days = plan['days']
            
            logger.info(f"üîÑ –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–ª–∞—Ç–µ–∂–∞ {payment_id}: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id}, –ø–ª–∞–Ω {subscription_type}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞
            user_data = await db.get_user(user_id)
            is_premium = user_data.get('is_premium', 0)
            premium_until = user_data.get('premium_until')
            current_additional_analyses = user_data.get('additional_analyses', 0)
            
            # –ï—Å–ª–∏ –ø–æ–¥–ø–∏—Å–∫–∞ —É–∂–µ –∞–∫—Ç–∏–≤–Ω–∞, –ø—Ä–æ–¥–ª–µ–≤–∞–µ–º –µ—ë
            if is_premium and premium_until:
                try:
                    from datetime import datetime
                    premium_until_dt = datetime.fromisoformat(premium_until.replace('Z', '+00:00'))
                    if premium_until_dt > datetime.now():
                        # –ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞, –ø—Ä–æ–¥–ª–µ–≤–∞–µ–º
                        from datetime import timedelta
                        new_premium_until = premium_until_dt + timedelta(days=days)
                        async with aiosqlite.connect(db.db_path) as db_conn:
                            await db_conn.execute(
                                """UPDATE users 
                                   SET premium_until = ?
                                   WHERE user_id = ?""",
                                (new_premium_until.isoformat(), user_id)
                            )
                            await db_conn.commit()
                        logger.info(f"üìÖ –ü–æ–¥–ø–∏—Å–∫–∞ –ø—Ä–æ–¥–ª–µ–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –¥–æ {new_premium_until}")
                    else:
                        # –ü–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞, –∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –Ω–æ–≤—É—é
                        await db.grant_premium(user_id, days=days)
                        logger.info(f"‚ú® –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –Ω–æ–≤–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                except Exception as e:
                    # –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∞—Ç—ã, –∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –Ω–æ–≤—É—é –ø–æ–¥–ø–∏—Å–∫—É
                    logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∞—Ç—ã premium_until: {e}")
                    await db.grant_premium(user_id, days=days)
            else:
                # –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏, –∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –Ω–æ–≤—É—é
                await db.grant_premium(user_id, days=days)
                logger.info(f"‚ú® –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –ø–µ—Ä–≤–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            
            # ‚úÖ –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –°–ù–ê–ß–ê–õ–ê –ø–æ–º–µ—á–∞–µ–º –ø–ª–∞—Ç–µ–∂ –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π –í –ë–ê–ó–ï –î–ê–ù–ù–´–•
            # –≠—Ç–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –î–û –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è!
            
            # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü–æ–¥–ø–∏—Å–∫–∞ –ù–ï –Ω–∞—á–∏—Å–ª—è–µ—Ç additional_analyses
            # –ü–æ–¥–ø–∏—Å–∫–∞ —Ç–æ–ª—å–∫–æ –¥–∞–µ—Ç –º–µ—Å—è—á–Ω—ã–π –ª–∏–º–∏—Ç –∞–Ω–∞–ª–∏–∑–æ–≤ —Å–æ–≥–ª–∞—Å–Ω–æ —Ç–∞—Ä–∏—Ñ—É
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∞–Ω–∞–ª–∏–∑—ã –Ω–∞—á–∏—Å–ª—è—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –ø–∞–∫–µ—Ç–æ–≤!
            analyses_added = 0  # –î–ª—è –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–µ –Ω–∞—á–∏—Å–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∞–Ω–∞–ª–∏–∑—ã
            
            payment_marked = await db.mark_payment_processed(
                payment_id=payment_id,
                user_id=user_id,
                payment_type=payment_type,
                subscription_type=subscription_type,
                analyses_added=analyses_added,
                plan_name=plan['name']
            )
            
            if not payment_marked:
                # –ü–ª–∞—Ç–µ–∂ —É–∂–µ –±—ã–ª –æ–±—Ä–∞–±–æ—Ç–∞–Ω –¥—Ä—É–≥–∏–º –ø—Ä–æ—Ü–µ—Å—Å–æ–º (race condition)
                logger.warning(f"‚ö†Ô∏è –ü–ª–∞—Ç–µ–∂ {payment_id} —É–∂–µ –ø–æ–º–µ—á–µ–Ω –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π –¥—Ä—É–≥–∏–º –ø—Ä–æ—Ü–µ—Å—Å–æ–º, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∞–∫—Ç–∏–≤–∞—Ü–∏—é")
                processed_info = await db.get_processed_payment(payment_id)
                if processed_info:
                    result = (True, processed_info['plan_name'], processed_info['analyses_added'])
                    processed_payments[payment_id] = result
                    return result
                return (False, None, 0)
            
            logger.info(f"üîí –ü–ª–∞—Ç–µ–∂ {payment_id} –ø–æ–º–µ—á–µ–Ω –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö (–∞—Ç–æ–º–∞—Ä–Ω–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è)")
            
            # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ –ø–æ–¥–ø–∏—Å–∫–µ
            await db.create_subscription(user_id, subscription_type, plan['price'])
            logger.info(f"üìù –°–æ–∑–¥–∞–Ω–∞ –∑–∞–ø–∏—Å—å –æ –ø–æ–¥–ø–∏—Å–∫–µ {subscription_type} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            
            # –ü–æ–ª—É—á–∞–µ–º –º–µ—Å—è—á–Ω—ã–π –ª–∏–º–∏—Ç –∞–Ω–∞–ª–∏–∑–æ–≤ –¥–ª—è —Ç–∞—Ä–∏—Ñ–∞
            monthly_limit = plan['analyses_per_month']
            
            logger.info(f"‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ {subscription_type} –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            logger.info(f"üìä –î–æ—Å—Ç—É–ø–Ω–æ {monthly_limit} –∞–Ω–∞–ª–∏–∑–æ–≤ –≤ –º–µ—Å—è—Ü —Å–æ–≥–ª–∞—Å–Ω–æ —Ç–∞—Ä–∏—Ñ—É {subscription_type}")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–ª–∞—Ç–µ–∂–∞ –≤ –ø–∞–º—è—Ç–∏
            result = (True, plan['name'], monthly_limit)  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –º–µ—Å—è—á–Ω—ã–π –ª–∏–º–∏—Ç –¥–ª—è –∏–Ω—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è
            processed_payments[payment_id] = result
            
            return result
        
        return False, None, 0
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞ {payment_id}: {e}", exc_info=True)
        # –£–¥–∞–ª—è–µ–º –∏–∑ –ø–∞–º—è—Ç–∏ –ø—Ä–∏ –æ—à–∏–±–∫–µ, —á—Ç–æ–±—ã –º–æ–∂–Ω–æ –±—ã–ª–æ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ–ø—ã—Ç–∫—É
        if payment_id in processed_payments:
            del processed_payments[payment_id]
        return False, None, 0


async def notify_user_about_payment_success(user_id: int, payment_id: str, plan_name: str, monthly_limit: int, bot, db: Database = None):
    """–£–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–± —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç–µ"""
    try:
        logger.info(f"üìß –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} –æ –ø–ª–∞—Ç–µ–∂–µ {payment_id}")
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        if db:
            user_data = await db.get_user(user_id)
            additional_analyses = user_data.get('additional_analyses', 0) if user_data else 0
        else:
            additional_analyses = 0
        
        success_text = f"""
‚úÖ <b>–ü–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω!</b>

üíé <b>–ü–æ–¥–ø–∏—Å–∫–∞ {plan_name} –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞!</b>

üìä <b>–î–æ—Å—Ç—É–ø–Ω–æ –∞–Ω–∞–ª–∏–∑–æ–≤ –≤ –º–µ—Å—è—Ü:</b> {monthly_limit}
{f'üí∞ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∞–Ω–∞–ª–∏–∑—ã –Ω–∞ —Å—á–µ—Ç—É: <b>{additional_analyses}</b>' if additional_analyses > 0 else ''}

<b>ID –ø–ª–∞—Ç–µ–∂–∞:</b> <code>{payment_id}</code>

üí° <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:</b>
‚Ä¢ –ú–µ—Å—è—á–Ω—ã–π –ª–∏–º–∏—Ç –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –∫–∞–∂–¥—ã–π –º–µ—Å—è—Ü
‚Ä¢ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∞–Ω–∞–ª–∏–∑—ã –º–æ–∂–Ω–æ –∫—É–ø–∏—Ç—å –æ—Ç–¥–µ–ª—å–Ω–æ
‚Ä¢ –ù–µ–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∞–Ω–∞–ª–∏–∑—ã –Ω–µ —Å–≥–æ—Ä–∞—é—Ç

–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∞–Ω–∞–ª–∏–∑—ã –¥–ª—è –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç!
        """
        
        await bot.send_message(
            chat_id=user_id,
            text=success_text,
            reply_markup=get_main_keyboard(),
            parse_mode="HTML"
        )
        
        logger.info(f"‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}", exc_info=True)


# Webhook –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–µ–π
async def yookassa_webhook_handler(request):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ webhook –æ—Ç –Æ–ö–∞—Å—Å–∞"""
    try:
        data = await request.json()
        payment_id = data.get('object', {}).get('id')
        status = data.get('object', {}).get('status')
        
        logger.info(f"–ü–æ–ª—É—á–µ–Ω webhook –æ—Ç –Æ–ö–∞—Å—Å–∞: payment_id={payment_id}, status={status}")
        
        if status == 'succeeded' and payment_id:
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–ª–∞—Ç–µ–∂–µ
            payment = await payment_manager.check_payment_status(payment_id)
            if payment and payment_manager.is_payment_successful(payment):
                metadata = payment.metadata or {}
                user_id = int(metadata.get('user_id', 0))
                payment_type = metadata.get('payment_type', '')
                
                logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞: user_id={user_id}, payment_type={payment_type}")
                
                if user_id and payment_type == "subscription":
                    # –ü–æ–ª—É—á–∞–µ–º —Ç–∏–ø –ø–æ–¥–ø–∏—Å–∫–∏ –∏–∑ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
                    subscription_type = metadata.get('subscription_type', 'basic')
                    
                    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Database –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–∞
                    from database import Database
                    from config import config
                    db = Database(config.DATABASE_PATH)
                    
                    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —É—Å–ø–µ—à–Ω—ã–π –ø–ª–∞—Ç–µ–∂
                    success, plan_name, monthly_limit = await process_successful_payment(
                        payment_id, payment_type, user_id, 
                        db,
                        subscription_type
                    )
                    
                    if success:
                        # –ü–æ–ª—É—á–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
                        from telegram_bot.bot import bot
                        await notify_user_about_payment_success(user_id, payment_id, plan_name, monthly_limit, bot, db)
                        logger.info(f"–ü–ª–∞—Ç–µ–∂ {payment_id} —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                    else:
                        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –ø–ª–∞—Ç–µ–∂ {payment_id} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                else:
                    logger.warning(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –ø–ª–∞—Ç–µ–∂–∞ –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç user_id: {payment_type}, user_id: {user_id}")
        
        return web.Response(text="OK")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ webhook –Æ–ö–∞—Å—Å–∞: {e}")
        return web.Response(text="ERROR", status=500)


async def nowpayments_webhook_handler(request):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ webhook –æ—Ç NOWPayments"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥–ø–∏—Å—å –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
        signature = request.headers.get('x-nowpayments-sig')
        payload = await request.text()
        
        logger.info(f"–ü–æ–ª—É—á–µ–Ω webhook –æ—Ç NOWPayments: signature={bool(signature)}")
        
        if not signature:
            logger.warning("–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–¥–ø–∏—Å—å –≤ webhook NOWPayments")
            return web.Response(text="No signature", status=400)
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º IPN —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        payment = await payment_manager.nowpayments.process_ipn_notification(payload, signature)
        
        if payment and payment_manager.is_crypto_payment_successful(payment):
            metadata = payment.metadata or {}
            user_id = int(metadata.get('user_id', 0))
            payment_type = metadata.get('payment_type', '')
            
            logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ–≥–æ –∫—Ä–∏–ø—Ç–æ–ø–ª–∞—Ç–µ–∂–∞: user_id={user_id}, payment_type={payment_type}")
            
            if user_id and payment_type == "subscription":
                # –ü–æ–ª—É—á–∞–µ–º —Ç–∏–ø –ø–æ–¥–ø–∏—Å–∫–∏ –∏–∑ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
                subscription_type = metadata.get('subscription_type', 'basic')
                
                # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Database –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–∞
                from database import Database
                from config import config
                db = Database(config.DATABASE_PATH)
                
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —É—Å–ø–µ—à–Ω—ã–π –∫—Ä–∏–ø—Ç–æ–ø–ª–∞—Ç–µ–∂
                success, plan_name, monthly_limit = await process_successful_payment(
                    payment.payment_id, payment_type, user_id,
                    db,
                    subscription_type
                )
                
                if success:
                    # –ü–æ–ª—É—á–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
                    from telegram_bot.bot import bot
                    await notify_user_about_payment_success(user_id, payment.payment_id, plan_name, monthly_limit, bot, db)
                    logger.info(f"–ö—Ä–∏–ø—Ç–æ–ø–ª–∞—Ç–µ–∂ {payment.payment_id} —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                else:
                    logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∫—Ä–∏–ø—Ç–æ–ø–ª–∞—Ç–µ–∂ {payment.payment_id} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            else:
                logger.warning(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –∫—Ä–∏–ø—Ç–æ–ø–ª–∞—Ç–µ–∂–∞ –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç user_id: {payment_type}, user_id: {user_id}")
        
        return web.Response(text="OK")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ webhook NOWPayments: {e}")
        return web.Response(text="ERROR", status=500)


@router.message(Command("subscribe"))
@router.message(F.text == "üíé –ü–æ–¥–ø–∏—Å–∫–∞")
async def show_subscription_options(message: Message, state: FSMContext, db: Database):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç—ã –ø–æ–¥–ø–∏—Å–∫–∏"""
    await state.clear()
    
    user_id = message.from_user.id
    user_data = await db.get_user(user_id)
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–¥–ø–∏—Å–∫–µ
    subscription_plan = await db.get_user_subscription_plan(user_id)
    is_premium = user_data.get('is_premium', 0)
    premium_until = user_data.get('premium_until')
    additional_analyses = await db.get_additional_analyses(user_id)
    
    # –ü–æ–ª—É—á–∞–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –∞–Ω–∞–ª–∏–∑—ã
    from datetime import date
    current_month = date.today().replace(day=1)
    monthly_analyses = await db.get_monthly_analyses_count(user_id, current_month)
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ª–∏–º–∏—Ç—ã –∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–ª–∞–Ω–∞
    if subscription_plan == 'free':
        limit = config.FREE_ANALYSES_PER_MONTH
        plan_name = "Free"
    elif subscription_plan == 'basic':
        plan_name = "Basic"
        limit = config.BASIC_ANALYSES_PER_MONTH
    elif subscription_plan == 'trader':
        plan_name = "Trader"
        limit = config.TRADER_ANALYSES_PER_MONTH
    elif subscription_plan == 'pro':
        plan_name = "Pro"
        limit = config.PRO_ANALYSES_PER_MONTH
    elif subscription_plan == 'elite':
        plan_name = "Elite"
        limit = config.ELITE_ANALYSES_PER_MONTH
    elif subscription_plan == 'premium':
        # –î–ª—è –æ–±—â–µ–≥–æ –ø—Ä–µ–º–∏—É–º —Å—Ç–∞—Ç—É—Å–∞ –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º –∞–Ω–∞–ª–∏–∑–∞–º
        if additional_analyses >= 500:
            plan_name = "Elite"
            limit = config.ELITE_ANALYSES_PER_MONTH
        elif additional_analyses >= 150:
            plan_name = "Pro"
            limit = config.PRO_ANALYSES_PER_MONTH
        elif additional_analyses >= 50:
            plan_name = "Trader"
            limit = config.TRADER_ANALYSES_PER_MONTH
        else:
            plan_name = "Basic"
            limit = config.BASIC_ANALYSES_PER_MONTH
    else:
        plan_name = "Free"
        limit = config.FREE_ANALYSES_PER_MONTH
    
    remaining_analyses = max(0, limit - monthly_analyses + additional_analyses)
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å
    if is_premium and premium_until:
        from datetime import datetime
        try:
            premium_until_dt = datetime.fromisoformat(premium_until.replace('Z', '+00:00'))
            if premium_until_dt > datetime.now():
                status_text = f"‚úÖ {plan_name} –∞–∫—Ç–∏–≤–Ω–∞ –¥–æ {premium_until_dt.strftime('%d.%m.%Y')}\n–û—Å—Ç–∞–ª–æ—Å—å –∞–Ω–∞–ª–∏–∑–æ–≤: {remaining_analyses}"
            else:
                status_text = "‚ùå –ü–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞"
        except:
            status_text = f"‚úÖ {plan_name} –∞–∫—Ç–∏–≤–Ω–∞\n–û—Å—Ç–∞–ª–æ—Å—å –∞–Ω–∞–ª–∏–∑–æ–≤: {remaining_analyses}"
    else:
        status_text = f"‚ùå –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π —Ç–∞—Ä–∏—Ñ\n–û—Å—Ç–∞–ª–æ—Å—å –∞–Ω–∞–ª–∏–∑–æ–≤: {remaining_analyses}"
    
    subscription_text = f"""
üíé <b>–¢–ê–†–ò–§–ù–´–ï –ü–õ–ê–ù–´</b>

<b>–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å:</b> {status_text}

<b>üÜì Free:</b>
‚Ä¢ 3 –∞–Ω–∞–ª–∏–∑–∞ –≤ –º–µ—Å—è—Ü
‚Ä¢ –ë–∞–∑–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑

<b>üíé –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∞—Ä–∏—Ñ—ã:</b>
‚Ä¢ ü•â Basic - 299‚ÇΩ/–º–µ—Å (15 –∞–Ω–∞–ª–∏–∑–æ–≤)
‚Ä¢ ü•à Trader - 899‚ÇΩ/–º–µ—Å (50 –∞–Ω–∞–ª–∏–∑–æ–≤)
‚Ä¢ ü•á Pro - 1590‚ÇΩ/–º–µ—Å (150 –∞–Ω–∞–ª–∏–∑–æ–≤)
‚Ä¢ üíé Elite - 2990‚ÇΩ/–º–µ—Å (500 –∞–Ω–∞–ª–∏–∑–æ–≤)

üí° <b>–í–∞–∂–Ω–æ:</b> –ü—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–∫—É–ø–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏ –∞–Ω–∞–ª–∏–∑—ã –Ω–∞–∫–∞–ø–ª–∏–≤–∞—é—Ç—Å—è!
–≠—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞–∫–æ–ø–∏—Ç—å –±–æ–ª—å—à–µ –∞–Ω–∞–ª–∏–∑–æ–≤, –ø–æ–∫—É–ø–∞—è –ø–æ–¥–ø–∏—Å–∫—É –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑.

–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Ç–∞—Ä–∏—Ñ:
"""
    
    await message.answer(
        subscription_text,
        reply_markup=get_subscription_keyboard(),
        parse_mode="HTML"
    )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –ø–æ–∫—É–ø–∫–∏
@router.callback_query(F.data == "show_subscriptions")
async def show_subscription_plans(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø–ª–∞–Ω—ã –ø–æ–¥–ø–∏—Å–∫–∏"""
    await callback.answer()
    
    plans_text = """
üíé <b>–¢–ê–†–ò–§–ù–´–ï –ü–õ–ê–ù–´</b>

<b>üÜì Free - 0‚ÇΩ/–º–µ—Å</b>
‚Ä¢ 3 –∞–Ω–∞–ª–∏–∑–∞ –≤ –º–µ—Å—è—Ü
‚Ä¢ –ë–∞–∑–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑

<b>ü•â Basic - 299‚ÇΩ/–º–µ—Å</b>
‚Ä¢ 15 –∞–Ω–∞–ª–∏–∑–æ–≤ –≤ –º–µ—Å—è—Ü
‚Ä¢ –ë–∞–∑–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑
‚Ä¢ Email –ø–æ–¥–¥–µ—Ä–∂–∫–∞

<b>ü•à Trader - 899‚ÇΩ/–º–µ—Å</b>
‚Ä¢ 50 –∞–Ω–∞–ª–∏–∑–æ–≤ –≤ –º–µ—Å—è—Ü
‚Ä¢ –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑
‚Ä¢ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞
‚Ä¢ –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã

<b>ü•á Pro - 1590‚ÇΩ/–º–µ—Å</b>
‚Ä¢ 150 –∞–Ω–∞–ª–∏–∑–æ–≤ –≤ –º–µ—Å—è—Ü
‚Ä¢ –ü–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑
‚Ä¢ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞
‚Ä¢ –†–∞–Ω–Ω–∏–π –¥–æ—Å—Ç—É–ø –∫ –Ω–æ–≤—ã–º —Ñ—É–Ω–∫—Ü–∏—è–º
‚Ä¢ API –¥–æ—Å—Ç—É–ø

<b>üíé Elite - 2990‚ÇΩ/–º–µ—Å</b>
‚Ä¢ 500 –∞–Ω–∞–ª–∏–∑–æ–≤ –≤ –º–µ—Å—è—Ü
‚Ä¢ VIP –∞–Ω–∞–ª–∏–∑
‚Ä¢ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä
‚Ä¢ –≠–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
‚Ä¢ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–π API
‚Ä¢ –ö–∞—Å—Ç–æ–º–Ω—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã

üí° <b>–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç—å:</b> –ü—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–∫—É–ø–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏ –∞–Ω–∞–ª–∏–∑—ã –Ω–∞–∫–∞–ø–ª–∏–≤–∞—é—Ç—Å—è!
–≠—Ç–æ –ø–æ–∑–≤–æ–ª—è–µ—Ç –Ω–∞–∫–æ–ø–∏—Ç—å –±–æ–ª—å—à–µ –∞–Ω–∞–ª–∏–∑–æ–≤ –¥–ª—è –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è.

–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ:
    """
    
    await callback.message.edit_text(
        plans_text,
        reply_markup=get_subscription_plans_keyboard(),
        parse_mode="HTML"
    )




@router.callback_query(F.data == "back_to_subscription_menu")
async def back_to_subscription_menu(callback: CallbackQuery):
    """–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≥–ª–∞–≤–Ω–æ–º—É –º–µ–Ω—é –ø–æ–¥–ø–∏—Å–∫–∏"""
    await callback.answer()
    
    subscription_text = """
üíé <b>–¢–ê–†–ò–§–ù–´–ï –ü–õ–ê–ù–´</b>

<b>üÜì Free:</b>
‚Ä¢ 3 –∞–Ω–∞–ª–∏–∑–∞ –≤ –º–µ—Å—è—Ü
‚Ä¢ –ë–∞–∑–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑

<b>üíé –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∞—Ä–∏—Ñ—ã:</b>
‚Ä¢ ü•â Basic - 299‚ÇΩ/–º–µ—Å (15 –∞–Ω–∞–ª–∏–∑–æ–≤)
‚Ä¢ ü•à Trader - 899‚ÇΩ/–º–µ—Å (50 –∞–Ω–∞–ª–∏–∑–æ–≤)
‚Ä¢ ü•á Pro - 1590‚ÇΩ/–º–µ—Å (150 –∞–Ω–∞–ª–∏–∑–æ–≤)
‚Ä¢ üíé Elite - 2990‚ÇΩ/–º–µ—Å (500 –∞–Ω–∞–ª–∏–∑–æ–≤)

–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Ç–∞—Ä–∏—Ñ:
    """
    
    await callback.message.edit_text(
        subscription_text,
        reply_markup=get_subscription_keyboard(),
        parse_mode="HTML"
    )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –ø–ª–∞–Ω–æ–≤ –ø–æ–¥–ø–∏—Å–∫–∏
@router.callback_query(F.data == "subscribe_basic")
async def process_basic_subscription(callback: CallbackQuery, db: Database, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ Basic"""
    await callback.answer()
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –ø–ª–∞–Ω–µ
    plan = config.SUBSCRIPTION_PLANS['basic']
    await state.update_data(
        purchase_type="subscription",
        plan_id="basic",
        plan_name="Basic",
        amount=plan['price'],
        days=30
    )
    
    plan = config.SUBSCRIPTION_PLANS['basic']
    payment_text = f"""
ü•â <b>{plan['name']}</b>

<b>–°—Ç–æ–∏–º–æ—Å—Ç—å:</b> {plan['price']}‚ÇΩ/–º–µ—Å

<b>–ß—Ç–æ –≤—Ö–æ–¥–∏—Ç:</b>
{chr(10).join([f"‚úÖ {feature}" for feature in plan['features']])}

üí° <b>–ë–æ–Ω—É—Å:</b> –ü—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–∫—É–ø–∫–µ –∞–Ω–∞–ª–∏–∑—ã –Ω–∞–∫–∞–ø–ª–∏–≤–∞—é—Ç—Å—è!

–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:
    """
    
    await callback.message.edit_text(
        payment_text,
        reply_markup=get_payment_method_keyboard(),
        parse_mode="HTML"
    )


@router.callback_query(F.data == "subscribe_trader")
async def process_trader_subscription(callback: CallbackQuery, db: Database, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ Trader"""
    await callback.answer()
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –ø–ª–∞–Ω–µ
    plan = config.SUBSCRIPTION_PLANS['trader']
    await state.update_data(
        purchase_type="subscription",
        plan_id="trader",
        plan_name="Trader",
        amount=plan['price'],
        days=30
    )
    
    plan = config.SUBSCRIPTION_PLANS['trader']
    payment_text = f"""
ü•à <b>{plan['name']}</b>

<b>–°—Ç–æ–∏–º–æ—Å—Ç—å:</b> {plan['price']}‚ÇΩ/–º–µ—Å

<b>–ß—Ç–æ –≤—Ö–æ–¥–∏—Ç:</b>
{chr(10).join([f"‚úÖ {feature}" for feature in plan['features']])}

üí° <b>–ë–æ–Ω—É—Å:</b> –ü—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–∫—É–ø–∫–µ –∞–Ω–∞–ª–∏–∑—ã –Ω–∞–∫–∞–ø–ª–∏–≤–∞—é—Ç—Å—è!

–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:
    """
    
    await callback.message.edit_text(
        payment_text,
        reply_markup=get_payment_method_keyboard(),
        parse_mode="HTML"
    )


@router.callback_query(F.data == "subscribe_pro")
async def process_pro_subscription(callback: CallbackQuery, db: Database, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ Pro"""
    await callback.answer()
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –ø–ª–∞–Ω–µ
    plan = config.SUBSCRIPTION_PLANS['pro']
    await state.update_data(
        purchase_type="subscription",
        plan_id="pro",
        plan_name="Pro",
        amount=plan['price'],
        days=30
    )
    
    plan = config.SUBSCRIPTION_PLANS['pro']
    payment_text = f"""
ü•á <b>{plan['name']}</b>

<b>–°—Ç–æ–∏–º–æ—Å—Ç—å:</b> {plan['price']}‚ÇΩ/–º–µ—Å

<b>–ß—Ç–æ –≤—Ö–æ–¥–∏—Ç:</b>
{chr(10).join([f"‚úÖ {feature}" for feature in plan['features']])}

üí° <b>–ë–æ–Ω—É—Å:</b> –ü—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–∫—É–ø–∫–µ –∞–Ω–∞–ª–∏–∑—ã –Ω–∞–∫–∞–ø–ª–∏–≤–∞—é—Ç—Å—è!

–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:
    """
    
    await callback.message.edit_text(
        payment_text,
        reply_markup=get_payment_method_keyboard(),
        parse_mode="HTML"
    )


@router.callback_query(F.data == "subscribe_elite")
async def process_elite_subscription(callback: CallbackQuery, db: Database, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ Elite"""
    await callback.answer()
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –ø–ª–∞–Ω–µ
    plan = config.SUBSCRIPTION_PLANS['elite']
    await state.update_data(
        purchase_type="subscription",
        plan_id="elite",
        plan_name="Elite",
        amount=plan['price'],
        days=30
    )
    
    plan = config.SUBSCRIPTION_PLANS['elite']
    payment_text = f"""
üíé <b>{plan['name']}</b>

<b>–°—Ç–æ–∏–º–æ—Å—Ç—å:</b> {plan['price']}‚ÇΩ/–º–µ—Å

<b>–ß—Ç–æ –≤—Ö–æ–¥–∏—Ç:</b>
{chr(10).join([f"‚úÖ {feature}" for feature in plan['features']])}

üí° <b>–ë–æ–Ω—É—Å:</b> –ü—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–∫—É–ø–∫–µ –∞–Ω–∞–ª–∏–∑—ã –Ω–∞–∫–∞–ø–ª–∏–≤–∞—é—Ç—Å—è!

–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:
    """
    
    await callback.message.edit_text(
        payment_text,
        reply_markup=get_payment_method_keyboard(),
        parse_mode="HTML"
    )




@router.callback_query(F.data.startswith("check_payment_"))
async def check_payment_status(callback: CallbackQuery, db: Database):
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞ (—Ä—É—á–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞)"""
    # –°—Ä–∞–∑—É –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –Ω–∞–∂–∞—Ç–∏–π
    await callback.answer("üîÑ –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞...", show_alert=False)
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –ø–ª–∞—Ç–µ–∂–∞ –∏–∑ callback_data
    payment_id = callback.data.replace("check_payment_", "")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é YooKassa
    if not payment_manager.yookassa:
        logger.error("YooKassa –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–ª–∞—Ç–µ–∂–∞")
        await callback.message.edit_text(
            "‚ùå <b>–°–∏—Å—Ç–µ–º–∞ –ø–ª–∞—Ç–µ–∂–µ–π –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞</b>\n\n"
            "YooKassa –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
            parse_mode="HTML"
        )
        return
    
    try:
        logger.info(f"–†—É—á–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞ {payment_id} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {callback.from_user.id}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞
        payment = await payment_manager.check_payment_status(payment_id)
        
        if not payment:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∞ {payment_id}")
            await callback.message.edit_text(
                "‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–ª–∞—Ç–µ–∂–∞</b>\n\n"
                f"–ü–ª–∞—Ç–µ–∂ <code>{payment_id}</code> –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.\n\n"
                "–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:\n"
                "‚Ä¢ –ü–ª–∞—Ç–µ–∂ –µ—â–µ –Ω–µ —Å–æ–∑–¥–∞–Ω\n"
                "‚Ä¢ –ü—Ä–æ–±–ª–µ–º—ã —Å API YooKassa\n"
                "‚Ä¢ –ù–µ–≤–µ—Ä–Ω—ã–π ID –ø–ª–∞—Ç–µ–∂–∞\n"
                "‚Ä¢ –ü–ª–∞—Ç–µ–∂ –±—ã–ª –æ—Ç–º–µ–Ω–µ–Ω\n\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π.",
                parse_mode="HTML"
            )
            return
        
        logger.info(f"–ü–æ–ª—É—á–µ–Ω —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞ {payment_id}: {payment.status.value}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ø–µ—à–Ω–æ—Å—Ç—å –ø–ª–∞—Ç–µ–∂–∞
        if payment_manager.is_payment_successful(payment):
            # –£–¥–∞–ª—è–µ–º –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫, –µ—Å–ª–∏ –µ—Å—Ç—å
            if payment_id in active_payment_checks:
                del active_payment_checks[payment_id]
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —É—Å–ø–µ—à–Ω—ã–π –ø–ª–∞—Ç–µ–∂
            user_id = callback.from_user.id
            metadata = payment.metadata or {}
            payment_type = metadata.get("payment_type", "")
            
            logger.info(f"–†—É—á–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞ {payment_id} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}, —Ç–∏–ø: {payment_type}")
            
            # ‚úÖ –ü–†–û–í–ï–†–Ø–ï–ú: –±—ã–ª –ª–∏ –ø–ª–∞—Ç–µ–∂ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω —Ä–∞–Ω–µ–µ
            already_processed = await db.is_payment_processed(payment_id)
            
            if already_processed:
                # –ü–ª–∞—Ç–µ–∂ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω - –ø—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
                logger.info(f"‚úÖ –ü–ª–∞—Ç–µ–∂ {payment_id} —É–∂–µ –±—ã–ª –æ–±—Ä–∞–±–æ—Ç–∞–Ω —Ä–∞–Ω–µ–µ, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é")
                processed_info = await db.get_processed_payment(payment_id)
                
                if processed_info and payment_type == "subscription":
                    subscription_type = processed_info['subscription_type']
                    plan = config.SUBSCRIPTION_PLANS.get(subscription_type, config.SUBSCRIPTION_PLANS['basic'])
                    
                    # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∞–Ω–∞–ª–∏–∑–æ–≤
                    updated_user_data = await db.get_user(user_id)
                    additional_analyses = updated_user_data.get('additional_analyses', 0)
                    
                    success_text = f"""
‚úÖ <b>–ü–ª–∞—Ç–µ–∂ —É–∂–µ –±—ã–ª –æ–±—Ä–∞–±–æ—Ç–∞–Ω —Ä–∞–Ω–µ–µ</b>

üíé <b>–ü–æ–¥–ø–∏—Å–∫–∞ {processed_info['plan_name']} –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞</b>

üìä <b>–ú–µ—Å—è—á–Ω—ã–π –ª–∏–º–∏—Ç:</b> {plan['analyses_per_month']} –∞–Ω–∞–ª–∏–∑–æ–≤
{f'üí∞ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∞–Ω–∞–ª–∏–∑—ã: <b>{additional_analyses}</b>' if additional_analyses > 0 else ''}

<b>ID –ø–ª–∞—Ç–µ–∂–∞:</b> <code>{payment.id}</code>

<i>–ü–æ–¥–ø–∏—Å–∫–∞ —É–∂–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞, –ø–æ–≤—Ç–æ—Ä–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è.</i>
                    """
                else:
                    success_text = f"""
‚úÖ <b>–ü–ª–∞—Ç–µ–∂ —É–∂–µ –±—ã–ª –æ–±—Ä–∞–±–æ—Ç–∞–Ω —Ä–∞–Ω–µ–µ</b>

<b>ID –ø–ª–∞—Ç–µ–∂–∞:</b> <code>{payment.id}</code>
                    """
                
                # –£–¥–∞–ª—è–µ–º inline-—Å–æ–æ–±—â–µ–Ω–∏–µ
                try:
                    await callback.message.delete()
                except:
                    pass
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                await callback.message.answer(
                    success_text,
                    reply_markup=get_main_keyboard(),
                    parse_mode="HTML"
                )
                return
            
            # –ü–ª–∞—Ç–µ–∂ –µ—â–µ –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω - –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –µ–≥–æ
            if payment_type == "subscription":
                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–¥–ø–∏—Å–∫–µ –∏–∑ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
                subscription_type = metadata.get("subscription_type", "basic")
                
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –µ–¥–∏–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–∞
                success, plan_name, monthly_limit = await process_successful_payment(
                    payment_id, payment_type, user_id, db, subscription_type
                )
                
                if success:
                    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∞–Ω–∞–ª–∏–∑–æ–≤
                    updated_user_data = await db.get_user(user_id)
                    additional_analyses = updated_user_data.get('additional_analyses', 0)
                    
                    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–ª–∞–Ω–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
                    plan = config.SUBSCRIPTION_PLANS.get(subscription_type, config.SUBSCRIPTION_PLANS['basic'])
                    
                    success_text = f"""
‚úÖ <b>–ü–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω!</b>

üíé <b>–ü–æ–¥–ø–∏—Å–∫–∞ {plan_name} –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞!</b>

üìä <b>–ú–µ—Å—è—á–Ω—ã–π –ª–∏–º–∏—Ç:</b> {monthly_limit} –∞–Ω–∞–ª–∏–∑–æ–≤
{f'üí∞ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∞–Ω–∞–ª–∏–∑—ã: <b>{additional_analyses}</b>' if additional_analyses > 0 else ''}

<b>–ß—Ç–æ –≤—Ö–æ–¥–∏—Ç:</b>
{chr(10).join([f"‚Ä¢ {feature}" for feature in plan['features']])}

<b>ID –ø–ª–∞—Ç–µ–∂–∞:</b> <code>{payment.id}</code>

üí° <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:</b>
‚Ä¢ –ú–µ—Å—è—á–Ω—ã–π –ª–∏–º–∏—Ç –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –∫–∞–∂–¥—ã–π –º–µ—Å—è—Ü
‚Ä¢ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∞–Ω–∞–ª–∏–∑—ã –º–æ–∂–Ω–æ –∫—É–ø–∏—Ç—å –æ—Ç–¥–µ–ª—å–Ω–æ
                    """
                    
                    logger.info(f"–ü–ª–∞—Ç–µ–∂ {payment_id} —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                else:
                    logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –ø–ª–∞—Ç–µ–∂ {payment_id} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                    success_text = f"""
‚ùå <b>–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–∞</b>

–ù–µ —É–¥–∞–ª–æ—Å—å –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø–æ–¥–ø–∏—Å–∫—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π.

<b>ID –ø–ª–∞—Ç–µ–∂–∞:</b> <code>{payment.id}</code>
                    """
            else:
                success_text = f"""
‚úÖ <b>–ü–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω!</b>

<b>ID –ø–ª–∞—Ç–µ–∂–∞:</b> <code>{payment.id}</code>
                """
            
            # –£–¥–∞–ª—è–µ–º inline-—Å–æ–æ–±—â–µ–Ω–∏–µ
            try:
                await callback.message.delete()
            except:
                pass
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≥–ª–∞–≤–Ω—ã–º –º–µ–Ω—é
            await callback.message.answer(
                success_text,
                reply_markup=get_main_keyboard(),
                parse_mode="HTML"
            )
            
        else:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∏–¥–µ—Ç –ª–∏ —É–∂–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
            if payment_id in active_payment_checks:
                status_text = f"""
üîÑ <b>–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —É–∂–µ –∞–∫—Ç–∏–≤–Ω–∞</b>

<b>–°—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞:</b> {payment.status.value}
<b>ID –ø–ª–∞—Ç–µ–∂–∞:</b> <code>{payment.id}</code>

–°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–æ–≤–µ—Ä–∏—Ç –æ–ø–ª–∞—Ç—É –≤ —Ç–µ—á–µ–Ω–∏–µ 10 –º–∏–Ω—É—Ç.
–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ.
                """
            else:
                # –ü–ª–∞—Ç–µ–∂ –µ—â–µ –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω
                status_text = f"""
üîÑ <b>–°—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞: {payment.status.value}</b>

<b>ID –ø–ª–∞—Ç–µ–∂–∞:</b> <code>{payment.id}</code>

–ü–ª–∞—Ç–µ–∂ –µ—â–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç.

<i>–û–±—ã—á–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø–ª–∞—Ç–µ–∂–∞ –∑–∞–Ω–∏–º–∞–µ—Ç 1-3 –º–∏–Ω—É—Ç—ã.</i>
                """
            
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(
                    text="üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–Ω–æ–≤–∞",
                    callback_data=f"check_payment_{payment.id}"
                )],
                [InlineKeyboardButton(
                    text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å",
                    callback_data="cancel_subscription"
                )]
            ])
            
            await callback.message.edit_text(
                status_text,
                reply_markup=keyboard,
                parse_mode="HTML"
            )
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞ {payment_id}: {e}", exc_info=True)
        await callback.message.edit_text(
            "‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–ª–∞—Ç–µ–∂–∞</b>\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π.\n\n"
            f"<i>–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏: {str(e)[:100]}</i>",
            parse_mode="HTML"
        )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å–ø–æ—Å–æ–±–∞ –æ–ø–ª–∞—Ç—ã
@router.callback_query(F.data == "payment_method_yookassa")
async def process_yookassa_payment(callback: CallbackQuery, db: Database, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–ø–ª–∞—Ç—ã —á–µ—Ä–µ–∑ –Æ–ö–∞—Å—Å–∞"""
    await callback.answer()
    
    user_id = callback.from_user.id
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–∫—É–ø–∫–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    purchase_type = data.get('purchase_type')
    plan_id = data.get('plan_id')
    plan_name = data.get('plan_name')
    amount = data.get('amount')
    
    try:
        if purchase_type == "subscription":
            # –°–æ–∑–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂ –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏
            days = data.get('days')
            # –ü–æ–ª—É—á–∞–µ–º email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
            user_data = await db.get_user(user_id)
            user_email = user_data.get('email') if user_data else None
            
            # –ï—Å–ª–∏ email –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º Telegram username
            if not user_email and user_data:
                username = user_data.get('username')
                if username:
                    user_email = f"{username}@telegram.user"
            
            payment = await payment_manager.create_subscription_payment(
                user_id=user_id,
                subscription_type=plan_id,
                amount=float(amount),
                description=f"{plan_name} –Ω–∞ {days} –¥–Ω–µ–π",
                user_email=user_email
            )
        else:
            raise ValueError("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –ø–æ–∫—É–ø–∫–∏")
        
        if not payment:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–ª–∞—Ç–µ–∂ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}, –ø–ª–∞–Ω: {plan_id}")
            await callback.message.edit_text(
                "‚ùå <b>–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞</b>\n\n"
                "–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:\n"
                "‚Ä¢ –ü—Ä–æ–±–ª–µ–º—ã —Å API –Æ–ö–∞—Å—Å–∞\n"
                "‚Ä¢ –ù–µ–≤–µ—Ä–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã\n"
                "‚Ä¢ –í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã\n\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π.",
                parse_mode="HTML"
            )
            return
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –æ–ø–ª–∞—Ç—ã
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(
                text="üí≥ –û–ø–ª–∞—Ç–∏—Ç—å –∫–∞—Ä—Ç–æ–π",
                url=payment.confirmation_url
            )],
            [InlineKeyboardButton(
                text="üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å",
                callback_data=f"check_payment_{payment.id}"
            )],
            [InlineKeyboardButton(
                text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å",
                callback_data="cancel_subscription"
            )]
        ])
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø–ª–∞—Ç–µ–∂–∞
        await start_payment_monitoring(
            payment_id=payment.id,
            user_id=user_id,
            payment_type="yookassa",
            db=db,
            bot=callback.bot,
            timeout_minutes=10
        )
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏
        plan = config.SUBSCRIPTION_PLANS.get(plan_id, {})
        features = plan.get('features', [])
        payment_text = f"""
üíé <b>{plan_name}</b>

<b>–°—Ç–æ–∏–º–æ—Å—Ç—å:</b> {amount}‚ÇΩ/–º–µ—Å
<b>–°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:</b> üí≥ –ë–∞–Ω–∫–æ–≤—Å–∫–∞—è –∫–∞—Ä—Ç–∞

<b>–ß—Ç–æ –≤—Ö–æ–¥–∏—Ç:</b>
{chr(10).join([f"‚úÖ {feature}" for feature in features])}

<b>–°—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞:</b> {payment.status.value}
<b>ID –ø–ª–∞—Ç–µ–∂–∞:</b> <code>{payment.id}</code>

üîÑ <b>–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞</b>
–°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–æ–≤–µ—Ä–∏—Ç –æ–ø–ª–∞—Ç—É –≤ —Ç–µ—á–µ–Ω–∏–µ 10 –º–∏–Ω—É—Ç.

–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–û–ø–ª–∞—Ç–∏—Ç—å –∫–∞—Ä—Ç–æ–π" –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –æ–ø–ª–∞—Ç–µ.
–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã —Å–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∞–µ—Ç –ø–ª–∞—Ç–µ–∂.
        """
        
        await callback.message.edit_text(
            payment_text,
            reply_markup=keyboard,
            parse_mode="HTML"
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞ –Æ–ö–∞—Å—Å–∞: {e}")
        await callback.message.edit_text(
            "‚ùå <b>–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞</b>\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π.",
            parse_mode="HTML"
        )


@router.callback_query(F.data == "payment_method_crypto")
async def process_crypto_payment_selection(callback: CallbackQuery, db: Database):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫—Ä–∏–ø—Ç–æ–ø–ª–∞—Ç–µ–∂–∞"""
    await callback.answer()
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã
        available_currencies = await payment_manager.get_available_crypto_currencies()
        
        if not available_currencies:
            await callback.message.edit_text(
                "‚ùå <b>–ö—Ä–∏–ø—Ç–æ–ø–ª–∞—Ç–µ–∂–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã</b>\n\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–ø–ª–∞—Ç–∏—Ç—å –∫–∞—Ä—Ç–æ–π –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π.",
                parse_mode="HTML"
            )
            return
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã
        crypto_text = """
‚Çø <b>–û–ø–ª–∞—Ç–∞ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–æ–π</b>

–í—ã–±–µ—Ä–∏—Ç–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É –¥–ª—è –æ–ø–ª–∞—Ç—ã:

<b>–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã:</b>
        """
        
        await callback.message.edit_text(
            crypto_text,
            reply_markup=get_crypto_currency_keyboard(available_currencies),
            parse_mode="HTML"
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç: {e}")
        await callback.message.edit_text(
            "‚ùå <b>–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç</b>\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –æ–ø–ª–∞—Ç—É –∫–∞—Ä—Ç–æ–π.",
            parse_mode="HTML"
        )


@router.callback_query(F.data.startswith("crypto_currency_"))
async def process_crypto_currency_selection(callback: CallbackQuery, db: Database, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã"""
    await callback.answer()
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –≤–∞–ª—é—Ç—É –∏–∑ callback_data
    currency = callback.data.replace("crypto_currency_", "")
    user_id = callback.from_user.id
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–∫—É–ø–∫–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    purchase_type = data.get('purchase_type')
    plan_id = data.get('plan_id')
    plan_name = data.get('plan_name')
    amount = data.get('amount')
    
    try:
        if purchase_type == "subscription":
            # –°–æ–∑–¥–∞–µ–º –∫—Ä–∏–ø—Ç–æ–ø–ª–∞—Ç–µ–∂ –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏
            days = data.get('days')
            payment = await payment_manager.create_crypto_subscription_payment(
                user_id=user_id,
                subscription_type=plan_id,
                amount=float(amount),
                description=f"{plan_name} –Ω–∞ {days} –¥–Ω–µ–π",
                crypto_currency=currency
            )
        else:
            raise ValueError("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –ø–æ–∫—É–ø–∫–∏")
        
        if not payment:
            await callback.message.edit_text(
                "‚ùå <b>–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫—Ä–∏–ø—Ç–æ–ø–ª–∞—Ç–µ–∂–∞</b>\n\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π.",
                parse_mode="HTML"
            )
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∏–º–µ—Ä–Ω—É—é —Ü–µ–Ω—É –≤ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–µ
        crypto_amount = await payment_manager.get_crypto_price_estimate(float(amount), currency)
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –æ–ø–ª–∞—Ç—ã
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(
                text=f"‚Çø –û–ø–ª–∞—Ç–∏—Ç—å {currency}",
                url=payment.payment_url
            )],
            [InlineKeyboardButton(
                text="üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å",
                callback_data=f"check_crypto_payment_{payment.payment_id}"
            )],
            [InlineKeyboardButton(
                text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å",
                callback_data="cancel_subscription"
            )]
        ])
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∫—Ä–∏–ø—Ç–æ–ø–ª–∞—Ç–µ–∂–∞
        await start_payment_monitoring(
            payment_id=payment.payment_id,
            user_id=user_id,
            payment_type="crypto",
            db=db,
            bot=callback.bot,
            timeout_minutes=10
        )
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏
        plan = config.SUBSCRIPTION_PLANS.get(plan_id, {})
        features = plan.get('features', [])
        payment_text = f"""
üíé <b>{plan_name}</b>

<b>–°—Ç–æ–∏–º–æ—Å—Ç—å:</b> {amount}‚ÇΩ/–º–µ—Å
<b>–°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:</b> ‚Çø {currency}
{f'<b>–ü—Ä–∏–º–µ—Ä–Ω–∞—è —Å—É–º–º–∞:</b> {crypto_amount:.8f} {currency}' if crypto_amount else ''}

<b>–ß—Ç–æ –≤—Ö–æ–¥–∏—Ç:</b>
{chr(10).join([f"‚úÖ {feature}" for feature in features])}

<b>–°—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞:</b> {payment.status.value}
<b>ID –ø–ª–∞—Ç–µ–∂–∞:</b> <code>{payment.payment_id}</code>

üîÑ <b>–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞</b>
–°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–æ–≤–µ—Ä–∏—Ç –æ–ø–ª–∞—Ç—É –≤ —Ç–µ—á–µ–Ω–∏–µ 10 –º–∏–Ω—É—Ç.

–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–û–ø–ª–∞—Ç–∏—Ç—å {currency}" –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –æ–ø–ª–∞—Ç–µ.
–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã —Å–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∞–µ—Ç –ø–ª–∞—Ç–µ–∂.
        """
        
        await callback.message.edit_text(
            payment_text,
            reply_markup=keyboard,
            parse_mode="HTML"
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫—Ä–∏–ø—Ç–æ–ø–ª–∞—Ç–µ–∂–∞: {e}")
        await callback.message.edit_text(
            "‚ùå <b>–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫—Ä–∏–ø—Ç–æ–ø–ª–∞—Ç–µ–∂–∞</b>\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π.",
            parse_mode="HTML"
        )


@router.callback_query(F.data.startswith("check_crypto_payment_"))
async def check_crypto_payment_status(callback: CallbackQuery, db: Database):
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∫—Ä–∏–ø—Ç–æ–ø–ª–∞—Ç–µ–∂–∞ (—Ä—É—á–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞)"""
    await callback.answer()
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –ø–ª–∞—Ç–µ–∂–∞ –∏–∑ callback_data
    payment_id = callback.data.replace("check_crypto_payment_", "")
    
    try:
        logger.info(f"–†—É—á–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∫—Ä–∏–ø—Ç–æ–ø–ª–∞—Ç–µ–∂–∞ {payment_id} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {callback.from_user.id}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∫—Ä–∏–ø—Ç–æ–ø–ª–∞—Ç–µ–∂–∞
        payment = await payment_manager.check_crypto_payment_status(payment_id)
        
        if not payment:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∫—Ä–∏–ø—Ç–æ–ø–ª–∞—Ç–µ–∂–∞ {payment_id}")
            await callback.message.edit_text(
                "‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫—Ä–∏–ø—Ç–æ–ø–ª–∞—Ç–µ–∂–∞</b>\n\n"
                f"–ö—Ä–∏–ø—Ç–æ–ø–ª–∞—Ç–µ–∂ <code>{payment_id}</code> –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.\n\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π.",
                parse_mode="HTML"
            )
            return
        
        logger.info(f"–ü–æ–ª—É—á–µ–Ω —Å—Ç–∞—Ç—É—Å –∫—Ä–∏–ø—Ç–æ–ø–ª–∞—Ç–µ–∂–∞ {payment_id}: {payment.status.value}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ø–µ—à–Ω–æ—Å—Ç—å –ø–ª–∞—Ç–µ–∂–∞
        if payment_manager.is_crypto_payment_successful(payment):
            # –£–¥–∞–ª—è–µ–º –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫, –µ—Å–ª–∏ –µ—Å—Ç—å
            if payment_id in active_payment_checks:
                del active_payment_checks[payment_id]
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —É—Å–ø–µ—à–Ω—ã–π –ø–ª–∞—Ç–µ–∂
            user_id = callback.from_user.id
            metadata = payment.metadata or {}
            payment_type = metadata.get("payment_type", "")
            
            logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ–≥–æ –∫—Ä–∏–ø—Ç–æ–ø–ª–∞—Ç–µ–∂–∞ {payment_id} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}, —Ç–∏–ø: {payment_type}")
            
            if payment_type == "subscription":
                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–¥–ø–∏—Å–∫–µ –∏–∑ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
                subscription_type = metadata.get("subscription_type", "basic")
                
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –µ–¥–∏–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–∞
                success, plan_name, monthly_limit = await process_successful_payment(
                    payment_id, payment_type, user_id, db, subscription_type
                )
                
                if success:
                    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∞–Ω–∞–ª–∏–∑–æ–≤
                    updated_user_data = await db.get_user(user_id)
                    additional_analyses = updated_user_data.get('additional_analyses', 0)
                    
                    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–ª–∞–Ω–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
                    plan = config.SUBSCRIPTION_PLANS.get(subscription_type, config.SUBSCRIPTION_PLANS['basic'])
                    
                    success_text = f"""
‚úÖ <b>–ö—Ä–∏–ø—Ç–æ–ø–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω!</b>

üíé <b>–ü–æ–¥–ø–∏—Å–∫–∞ {plan_name} –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞!</b>

üìä <b>–ú–µ—Å—è—á–Ω—ã–π –ª–∏–º–∏—Ç:</b> {monthly_limit} –∞–Ω–∞–ª–∏–∑–æ–≤
{f'üí∞ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∞–Ω–∞–ª–∏–∑—ã: <b>{additional_analyses}</b>' if additional_analyses > 0 else ''}

<b>–ß—Ç–æ –≤—Ö–æ–¥–∏—Ç:</b>
{chr(10).join([f"‚Ä¢ {feature}" for feature in plan['features']])}

<b>ID –ø–ª–∞—Ç–µ–∂–∞:</b> <code>{payment.payment_id}</code>

üí° <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:</b>
‚Ä¢ –ú–µ—Å—è—á–Ω—ã–π –ª–∏–º–∏—Ç –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –∫–∞–∂–¥—ã–π –º–µ—Å—è—Ü
‚Ä¢ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∞–Ω–∞–ª–∏–∑—ã –º–æ–∂–Ω–æ –∫—É–ø–∏—Ç—å –æ—Ç–¥–µ–ª—å–Ω–æ
                    """
                    
                    logger.info(f"–ö—Ä–∏–ø—Ç–æ–ø–ª–∞—Ç–µ–∂ {payment_id} —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                else:
                    logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∫—Ä–∏–ø—Ç–æ–ø–ª–∞—Ç–µ–∂ {payment_id} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                    success_text = f"""
‚ùå <b>–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫—Ä–∏–ø—Ç–æ–ø–ª–∞—Ç–µ–∂–∞</b>

–ù–µ —É–¥–∞–ª–æ—Å—å –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø–æ–¥–ø–∏—Å–∫—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π.

<b>ID –ø–ª–∞—Ç–µ–∂–∞:</b> <code>{payment.payment_id}</code>
                    """
            else:
                success_text = f"""
‚úÖ <b>–ö—Ä–∏–ø—Ç–æ–ø–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω!</b>

<b>ID –ø–ª–∞—Ç–µ–∂–∞:</b> <code>{payment.payment_id}</code>
                """
            
            # –£–¥–∞–ª—è–µ–º inline-—Å–æ–æ–±—â–µ–Ω–∏–µ
            try:
                await callback.message.delete()
            except:
                pass
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≥–ª–∞–≤–Ω—ã–º –º–µ–Ω—é
            await callback.message.answer(
                success_text,
                reply_markup=get_main_keyboard(),
                parse_mode="HTML"
            )
            
        else:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∏–¥–µ—Ç –ª–∏ —É–∂–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
            if payment_id in active_payment_checks:
                status_text = f"""
üîÑ <b>–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —É–∂–µ –∞–∫—Ç–∏–≤–Ω–∞</b>

<b>–°—Ç–∞—Ç—É—Å –∫—Ä–∏–ø—Ç–æ–ø–ª–∞—Ç–µ–∂–∞:</b> {payment.status.value}
<b>ID –ø–ª–∞—Ç–µ–∂–∞:</b> <code>{payment.payment_id}</code>

–°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–æ–≤–µ—Ä–∏—Ç –æ–ø–ª–∞—Ç—É –≤ —Ç–µ—á–µ–Ω–∏–µ 10 –º–∏–Ω—É—Ç.
–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ.
                """
            else:
                # –ü–ª–∞—Ç–µ–∂ –µ—â–µ –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω
                status_text = f"""
üîÑ <b>–°—Ç–∞—Ç—É—Å –∫—Ä–∏–ø—Ç–æ–ø–ª–∞—Ç–µ–∂–∞: {payment.status.value}</b>

<b>ID –ø–ª–∞—Ç–µ–∂–∞:</b> <code>{payment.payment_id}</code>

–ö—Ä–∏–ø—Ç–æ–ø–ª–∞—Ç–µ–∂ –µ—â–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç.

<i>–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫—Ä–∏–ø—Ç–æ–ø–ª–∞—Ç–µ–∂–∞ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –¥–æ 30 –º–∏–Ω—É—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –±–ª–æ–∫—á–µ–π–Ω–∞.</i>
                """
            
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(
                    text="üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–Ω–æ–≤–∞",
                    callback_data=f"check_crypto_payment_{payment.payment_id}"
                )],
                [InlineKeyboardButton(
                    text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å",
                    callback_data="cancel_subscription"
                )]
            ])
            
            await callback.message.edit_text(
                status_text,
                reply_markup=keyboard,
                parse_mode="HTML"
            )
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –∫—Ä–∏–ø—Ç–æ–ø–ª–∞—Ç–µ–∂–∞ {payment_id}: {e}", exc_info=True)
        await callback.message.edit_text(
            "‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫—Ä–∏–ø—Ç–æ–ø–ª–∞—Ç–µ–∂–∞</b>\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π.\n\n"
            f"<i>–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏: {str(e)[:100]}</i>",
            parse_mode="HTML"
        )


@router.callback_query(F.data == "show_all_crypto")
async def show_all_crypto_currencies(callback: CallbackQuery, db: Database):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã"""
    await callback.answer()
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã
        available_currencies = await payment_manager.get_available_crypto_currencies()
        
        if not available_currencies:
            await callback.message.edit_text(
                "‚ùå <b>–ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã</b>\n\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –æ–ø–ª–∞—Ç—É –∫–∞—Ä—Ç–æ–π.",
                parse_mode="HTML"
            )
            return
        
        crypto_text = f"""
‚Çø <b>–í—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã</b>

–í—ã–±–µ—Ä–∏—Ç–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É –¥–ª—è –æ–ø–ª–∞—Ç—ã:

<b>–î–æ—Å—Ç—É–ø–Ω–æ:</b> {len(available_currencies)} –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç
        """
        
        await callback.message.edit_text(
            crypto_text,
            reply_markup=get_all_crypto_currencies_keyboard(available_currencies),
            parse_mode="HTML"
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç: {e}")
        await callback.message.edit_text(
            "‚ùå <b>–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç</b>\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –æ–ø–ª–∞—Ç—É –∫–∞—Ä—Ç–æ–π.",
            parse_mode="HTML"
        )


@router.callback_query(F.data.startswith("manual_check_payment_"))
async def manual_check_payment(callback: CallbackQuery, db: Database):
    """–†—É—á–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–ª–∞—Ç–µ–∂–∞ –ø–æ—Å–ª–µ —Ç–∞–π–º–∞—É—Ç–∞"""
    await callback.answer()
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –ø–ª–∞—Ç–µ–∂–∞ –∏–∑ callback_data
    payment_id = callback.data.replace("manual_check_payment_", "")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é YooKassa
    if not payment_manager.yookassa:
        logger.error("YooKassa –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ –ø—Ä–∏ —Ä—É—á–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–ª–∞—Ç–µ–∂–∞")
        await callback.message.edit_text(
            "‚ùå <b>–°–∏—Å—Ç–µ–º–∞ –ø–ª–∞—Ç–µ–∂–µ–π –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞</b>\n\n"
            "YooKassa –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
            parse_mode="HTML"
        )
        return
    
    try:
        logger.info(f"–†—É—á–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–ª–∞—Ç–µ–∂–∞ {payment_id} –ø–æ—Å–ª–µ —Ç–∞–π–º–∞—É—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {callback.from_user.id}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞
        payment = await payment_manager.check_payment_status(payment_id)
        
        if not payment:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∞ {payment_id}")
            await callback.message.edit_text(
                "‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–ª–∞—Ç–µ–∂–∞</b>\n\n"
                f"–ü–ª–∞—Ç–µ–∂ <code>{payment_id}</code> –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.\n\n"
                "–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:\n"
                "‚Ä¢ –ü–ª–∞—Ç–µ–∂ –µ—â–µ –Ω–µ —Å–æ–∑–¥–∞–Ω\n"
                "‚Ä¢ –ü—Ä–æ–±–ª–µ–º—ã —Å API YooKassa\n"
                "‚Ä¢ –ù–µ–≤–µ—Ä–Ω—ã–π ID –ø–ª–∞—Ç–µ–∂–∞\n"
                "‚Ä¢ –ü–ª–∞—Ç–µ–∂ –±—ã–ª –æ—Ç–º–µ–Ω–µ–Ω\n\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π.",
                parse_mode="HTML"
            )
            return
        
        logger.info(f"–ü–æ–ª—É—á–µ–Ω —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞ {payment_id}: {payment.status.value}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ø–µ—à–Ω–æ—Å—Ç—å –ø–ª–∞—Ç–µ–∂–∞
        if payment_manager.is_payment_successful(payment):
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —É—Å–ø–µ—à–Ω—ã–π –ø–ª–∞—Ç–µ–∂
            user_id = callback.from_user.id
            metadata = payment.metadata or {}
            payment_type = metadata.get("payment_type", "")
            
            logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞ {payment_id} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}, —Ç–∏–ø: {payment_type}")
            
            if payment_type == "subscription":
                subscription_type = metadata.get("subscription_type", "basic")
                
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –µ–¥–∏–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–∞
                success, plan_name, monthly_limit = await process_successful_payment(
                    payment_id, payment_type, user_id, db, subscription_type
                )
                
                if success:
                    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∞–Ω–∞–ª–∏–∑–æ–≤
                    updated_user_data = await db.get_user(user_id)
                    additional_analyses = updated_user_data.get('additional_analyses', 0)
                    
                    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–ª–∞–Ω–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
                    plan = config.SUBSCRIPTION_PLANS.get(subscription_type, config.SUBSCRIPTION_PLANS['basic'])
                    
                    success_text = f"""
‚úÖ <b>–ü–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω!</b>

üíé <b>–ü–æ–¥–ø–∏—Å–∫–∞ {plan_name} –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞!</b>

üìä <b>–ú–µ—Å—è—á–Ω—ã–π –ª–∏–º–∏—Ç:</b> {monthly_limit} –∞–Ω–∞–ª–∏–∑–æ–≤
{f'üí∞ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∞–Ω–∞–ª–∏–∑—ã: <b>{additional_analyses}</b>' if additional_analyses > 0 else ''}

<b>–ß—Ç–æ –≤—Ö–æ–¥–∏—Ç:</b>
{chr(10).join([f"‚Ä¢ {feature}" for feature in plan['features']])}

<b>ID –ø–ª–∞—Ç–µ–∂–∞:</b> <code>{payment.id}</code>

üí° <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:</b>
‚Ä¢ –ú–µ—Å—è—á–Ω—ã–π –ª–∏–º–∏—Ç –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –∫–∞–∂–¥—ã–π –º–µ—Å—è—Ü
‚Ä¢ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∞–Ω–∞–ª–∏–∑—ã –º–æ–∂–Ω–æ –∫—É–ø–∏—Ç—å –æ—Ç–¥–µ–ª—å–Ω–æ
                    """
                    
                    logger.info(f"–ü–ª–∞—Ç–µ–∂ {payment_id} —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                else:
                    logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –ø–ª–∞—Ç–µ–∂ {payment_id} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                    success_text = f"""
‚ùå <b>–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–∞</b>

–ù–µ —É–¥–∞–ª–æ—Å—å –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø–æ–¥–ø–∏—Å–∫—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π.

<b>ID –ø–ª–∞—Ç–µ–∂–∞:</b> <code>{payment.id}</code>
                    """
            else:
                success_text = f"""
‚úÖ <b>–ü–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω!</b>

<b>ID –ø–ª–∞—Ç–µ–∂–∞:</b> <code>{payment.id}</code>
                """
            
            # –£–¥–∞–ª—è–µ–º inline-—Å–æ–æ–±—â–µ–Ω–∏–µ
            try:
                await callback.message.delete()
            except:
                pass
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≥–ª–∞–≤–Ω—ã–º –º–µ–Ω—é
            await callback.message.answer(
                success_text,
                reply_markup=get_main_keyboard(),
                parse_mode="HTML"
            )
            
        else:
            # –ü–ª–∞—Ç–µ–∂ –µ—â–µ –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω
            status_text = f"""
üîÑ <b>–°—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞: {payment.status.value}</b>

<b>ID –ø–ª–∞—Ç–µ–∂–∞:</b> <code>{payment.id}</code>

–ü–ª–∞—Ç–µ–∂ –µ—â–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç.

<i>–û–±—ã—á–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø–ª–∞—Ç–µ–∂–∞ –∑–∞–Ω–∏–º–∞–µ—Ç 1-3 –º–∏–Ω—É—Ç—ã.</i>
            """
            
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(
                    text="üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–Ω–æ–≤–∞",
                    callback_data=f"manual_check_payment_{payment.id}"
                )],
                [InlineKeyboardButton(
                    text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å",
                    callback_data="cancel_subscription"
                )]
            ])
            
            await callback.message.edit_text(
                status_text,
                reply_markup=keyboard,
                parse_mode="HTML"
            )
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ä—É—á–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–ª–∞—Ç–µ–∂–∞ {payment_id}: {e}", exc_info=True)
        await callback.message.edit_text(
            "‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–ª–∞—Ç–µ–∂–∞</b>\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π.\n\n"
            f"<i>–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏: {str(e)[:100]}</i>",
            parse_mode="HTML"
        )


@router.callback_query(F.data == "cancel_subscription")
async def cancel_subscription(callback: CallbackQuery):
    """–û—Ç–º–µ–Ω–∏—Ç—å –≤—ã–±–æ—Ä –ø–æ–¥–ø–∏—Å–∫–∏"""
    await callback.answer("–û—Ç–º–µ–Ω–µ–Ω–æ")
    await callback.message.edit_text(
        "‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ",
    )


# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–π –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø—Ä–µ–º–∏—É–º–∞ (–¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏)
@router.message(Command("activate_premium_test"))
async def activate_premium_test(message: Message, db: Database):
    """–¢–µ—Å—Ç–æ–≤–∞—è –∞–∫—Ç–∏–≤–∞—Ü–∏—è –ø—Ä–µ–º–∏—É–º–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏)"""
    user_id = message.from_user.id
    
    # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø—Ä–µ–º–∏—É–º –Ω–∞ 30 –¥–Ω–µ–π
    await db.grant_premium(user_id, days=30)
    
    await message.answer(
        "‚úÖ Premium –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –Ω–∞ 30 –¥–Ω–µ–π!\n\n"
        "–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏.\n"
        f"–¢–µ–ø–µ—Ä—å –¥–æ—Å—Ç—É–ø–Ω–æ {config.PREMIUM_ANALYSES_PER_DAY} –∞–Ω–∞–ª–∏–∑–æ–≤ –≤ –¥–µ–Ω—å.",
        reply_markup=get_main_keyboard()
    )


@router.message(Command("deactivate_premium_test"))
async def deactivate_premium_test(message: Message, db: Database):
    """–¢–µ—Å—Ç–æ–≤–∞—è –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏—è –ø—Ä–µ–º–∏—É–º–∞"""
    user_id = message.from_user.id
    
    await db.revoke_premium(user_id)
    
    await message.answer(
        "‚ùå Premium –ø–æ–¥–ø–∏—Å–∫–∞ –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞.\n\n"
        f"–í–µ—Ä–Ω—É–ª–∏—Å—å {config.FREE_ANALYSES_PER_DAY} –∞–Ω–∞–ª–∏–∑–æ–≤ –≤ –¥–µ–Ω—å.",
        reply_markup=get_main_keyboard()
    )


@router.message(Command("payment_status"))
async def payment_system_status(message: Message):
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã"""
    try:
        yookassa_status = payment_manager.get_yookassa_status()
        
        status_text = f"""
üîß <b>–°—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã</b>

<b>YooKassa:</b>
‚Ä¢ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞: {'‚úÖ' if yookassa_status['initialized'] else '‚ùå'}
‚Ä¢ Shop ID –Ω–∞—Å—Ç—Ä–æ–µ–Ω: {'‚úÖ' if yookassa_status['shop_id_configured'] else '‚ùå'}
‚Ä¢ Secret Key –Ω–∞—Å—Ç—Ä–æ–µ–Ω: {'‚úÖ' if yookassa_status['secret_key_configured'] else '‚ùå'}
‚Ä¢ –¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º: {'‚úÖ' if yookassa_status['test_mode'] else '‚ùå'}
‚Ä¢ Shop ID: {yookassa_status.get('shop_id_preview', '–ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω')}
‚Ä¢ Secret Key: {yookassa_status.get('secret_key_preview', '–ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω')}

<b>NOWPayments:</b>
‚Ä¢ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞: {'‚úÖ' if payment_manager.nowpayments else '‚ùå'}

<b>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:</b>
"""
        
        if not yookassa_status['initialized']:
            status_text += "\n‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ YOOKASSA_SHOP_ID –∏ YOOKASSA_SECRET_KEY –≤ .env"
        
        if not yookassa_status['shop_id_configured']:
            status_text += "\n‚Ä¢ –î–æ–±–∞–≤—å—Ç–µ YOOKASSA_SHOP_ID –≤ .env —Ñ–∞–π–ª"
            
        if not yookassa_status['secret_key_configured']:
            status_text += "\n‚Ä¢ –î–æ–±–∞–≤—å—Ç–µ YOOKASSA_SECRET_KEY –≤ .env —Ñ–∞–π–ª"
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        if yookassa_status.get('shop_id_length', 0) < 4:
            status_text += "\n‚Ä¢ Shop ID —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π - –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å"
            
        if yookassa_status.get('secret_key_length', 0) < 8:
            status_text += "\n‚Ä¢ Secret Key —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π - –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å"
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ä–µ–∂–∏–º–∞
        if yookassa_status.get('test_mode', True):
            status_text += "\n‚Ä¢ –í–∫–ª—é—á–µ–Ω —Ç–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º - –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ YOOKASSA_TEST_MODE=false"
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ NOWPayments
        if not payment_manager.nowpayments:
            status_text += "\n‚Ä¢ NOWPayments –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ - –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫—Ä–∏–ø—Ç–æ–ø–ª–∞—Ç–µ–∂–µ–π"
        
        await message.answer(status_text, parse_mode="HTML")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã: {e}")
        await message.answer(
            "‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞</b>\n\n"
            "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ.\n\n"
            f"–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏: {str(e)}",
            parse_mode="HTML"
        )

