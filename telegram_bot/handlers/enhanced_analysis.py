"""
–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å —É—á–µ—Ç–æ–º –Ω–æ–≤–æ—Å—Ç–µ–π, –≤—ã–±–æ—Ä –∫—Ä–∞—Ç–∫–æ–≥–æ/–¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞ –∏ PDF.
"""

from aiogram import Router, F
from aiogram.types import Message, ReplyKeyboardRemove, BufferedInputFile
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext

from config import config
from database.db import Database
from data_collectors import NewsCollector, RateLimiter, NewsPipeline, CryptoCollector, DataFormatter
from analysis.sentiment_analyzer import SentimentAnalyzer
from analysis.enhanced_engine import EnhancedAnalysisEngine
from AI_block.analyzer import AIAnalyzer
from reports.generator import ReportGenerator


router = Router()
_rate_limiter = RateLimiter()


@router.message(Command("enhanced"))
async def enhanced_entry(message: Message, state: FSMContext, db: Database):
    await message.answer(
        "üìä –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑: –æ—Ç–ø—Ä–∞–≤—å —Å–∏–º–≤–æ–ª (–Ω–∞–ø—Ä–∏–º–µ—Ä: BTC).\n"
        "–ó–∞—Ç–µ–º –≤—ã–±–µ—Ä–∏ —Ñ–æ—Ä–º–∞—Ç: –∫—Ä–∞—Ç–∫–∏–π —Ç–µ–∫—Å—Ç –∏–ª–∏ –ø–æ–¥—Ä–æ–±–Ω—ã–π PDF.",
        reply_markup=ReplyKeyboardRemove()
    )
    await state.update_data(enhanced_mode=True)
    # –ü–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–∑ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞, —á—Ç–æ–±—ã –Ω–µ –¥—É–±–ª–∏—Ä–æ–≤–∞—Ç—å FSM
    from ..states import AnalysisStates
    await state.set_state(AnalysisStates.waiting_for_symbol)


@router.message(Command("refresh_news"))
async def refresh_news(message: Message, db: Database):
    parts = (message.text or "").split()
    if len(parts) < 2:
        await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /refresh_news SYMBOL")
        return
    symbol = parts[1].upper()
    try:
        pipeline = NewsPipeline(db=db, collector=NewsCollector(rate_limiter=_rate_limiter), analyzer=SentimentAnalyzer())
        count = await pipeline.fetch_analyze_store(symbol=symbol, days=7)
        await message.answer(f"–û–±–Ω–æ–≤–ª–µ–Ω–æ —Å—Ç–∞—Ç–µ–π: {count}")
    except Exception as e:
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –Ω–æ–≤–æ—Å—Ç–∏ (–≤–æ–∑–º–æ–∂–Ω–æ, –∫–≤–æ—Ç–∞ –∏—Å—á–µ—Ä–ø–∞–Ω–∞)")


async def _run_enhanced(symbol: str, db: Database) -> tuple[dict, bytes, object]:
    crypto_collector = CryptoCollector(timeframe=config.DEFAULT_TIMEFRAME, period=config.DEFAULT_PERIOD)
    market_df = crypto_collector.get_crypto_data(symbol)

    news_collector = NewsCollector(rate_limiter=_rate_limiter)
    pipeline = NewsPipeline(db=db, collector=news_collector, analyzer=SentimentAnalyzer())
    try:
        await pipeline.fetch_analyze_store(symbol=symbol, days=7)
    except Exception:
        # –ù–æ–≤–æ—Å—Ç–∏ –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã ‚Äî –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º
        pass

    engine = EnhancedAnalysisEngine(
        ai_analyzer=AIAnalyzer(api_key=config.OPENROUTER_API_KEY, model=config.AI_MODEL),
        db=db,
        crypto_collector=crypto_collector,
        sentiment_analyzer=SentimentAnalyzer(),
    )
    analysis_dict = await engine.analyze_crypto_comprehensive(symbol)

    rg = ReportGenerator()
    # –î–ª—è –≥—Ä–∞—Ñ–∏–∫–∞ —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –ø—Ä–æ–±—É–µ–º –ø–æ–¥—Ç—è–Ω—É—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ –∏–∑ –ë–î
    try:
        news_articles = await db.get_recent_news(symbol=symbol, hours=24*7, limit=200)
    except Exception:
        news_articles = []
    charts = rg.create_charts(market_df, news_articles=news_articles)
    pdf_bytes = rg.generate_pdf_report(analysis_dict, charts)
    return analysis_dict, pdf_bytes, charts


@router.message(F.text.regexp(r"^(brief|detailed|pdf)$"))
async def format_choice(message: Message):
    # –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏; —Ñ–æ—Ä–º–∞—Ç –≤—ã–±–∏—Ä–∞–µ—Ç—Å—è —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –∞–Ω–∞–ª–∏–∑–∞
    await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∏–º–≤–æ–ª –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: BTC)")


@router.message(F.text.regexp(r"^[A-Za-z0-9]{2,10}$"))
async def enhanced_symbol_auto(message: Message, state: FSMContext, db: Database):
    data = await state.get_data()
    if not data.get("enhanced_mode"):
        return  # –Ω–µ –ø–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ø–æ—Ç–æ–∫

    symbol = message.text.strip().upper()
    await message.answer("üîÑ –ó–∞–ø—É—Å–∫–∞—é —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑... –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –¥–æ 30 —Å–µ–∫—É–Ω–¥.")

    # –ö—ç—à –∫—Ä–∞—Ç–∫–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –Ω–∞ 1 —á–∞—Å
    cached = await db.get_cached_analysis(symbol, analysis_type="brief_text")
    if cached:
        await message.answer(cached)
        await state.clear()
        return

    try:
        analysis_dict, pdf_bytes, _charts = await _run_enhanced(symbol, db)
    except Exception as e:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        await state.clear()
        return

    rg = ReportGenerator()
    text_summary = rg.add_timeframe_disclaimer(rg.generate_text_summary(analysis_dict))
    await message.answer(text_summary)
    try:
        # –ö—ç—à–∏—Ä—É–µ–º –∫—Ä–∞—Ç–∫–∏–π —Ç–µ–∫—Å—Ç –Ω–∞ 1 —á–∞—Å
        await db.set_cached_analysis(symbol, analysis_type="brief_text", result_data=text_summary, ttl_seconds=3600)
    except Exception:
        pass

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º PDF
    pdf_file = BufferedInputFile(pdf_bytes, filename=f"analysis_{symbol}.pdf")
    await message.answer_document(pdf_file, caption=f"–ü–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç—á–µ—Ç –ø–æ {symbol}")

    await state.clear()


