"""
–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ AI
"""

import pandas as pd
from typing import Dict, Optional
from datetime import datetime


class DataFormatter:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç"""
    
    @staticmethod
    def format_for_analysis(data: pd.DataFrame, symbol: str, 
                           current_price: Optional[float] = None) -> str:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ AI
        
        Args:
            data: DataFrame —Å –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏
            symbol: –°–∏–º–≤–æ–ª –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã
            current_price: –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            
        Returns:
            –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ —Å –¥–∞–Ω–Ω—ã–º–∏
        """
        if data is None or data.empty:
            return f"–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {symbol}"
        
        # –ë–∞–∑–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        latest = data.iloc[-1]
        oldest = data.iloc[0]
        
        # –†–∞—Å—á–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π
        price_change = latest['close'] - oldest['close']
        price_change_pct = (price_change / oldest['close']) * 100
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –ø–µ—Ä–∏–æ–¥
        high = data['high'].max()
        low = data['low'].min()
        avg_volume = data['volume'].mean() if 'volume' in data.columns else 0
        
        # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π
        last_7_days = data.tail(7)
        recent_trend = DataFormatter._calculate_trend(last_7_days)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
        text = f"""
–ê–Ω–∞–ª–∏–∑ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã: {symbol}

–¢–ï–ö–£–©–ò–ï –î–ê–ù–ù–´–ï:
{'–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: $' + f'{current_price:.2f}' if current_price else ''}
–ü–æ—Å–ª–µ–¥–Ω—è—è –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ü–µ–Ω–∞: ${latest['close']:.2f}
–î–∞—Ç–∞: {latest.name.strftime('%Y-%m-%d') if hasattr(latest.name, 'strftime') else 'N/A'}

–°–¢–ê–¢–ò–°–¢–ò–ö–ê –ó–ê –ü–ï–†–ò–û–î ({len(data)} –¥–Ω–µ–π):
–ù–∞—á–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞: ${oldest['close']:.2f}
–ò–∑–º–µ–Ω–µ–Ω–∏–µ: ${price_change:.2f} ({price_change_pct:+.2f}%)
–ú–∞–∫—Å–∏–º—É–º: ${high:.2f}
–ú–∏–Ω–∏–º—É–º: ${low:.2f}
–°—Ä–µ–¥–Ω–∏–π –æ–±—ä–µ–º: {avg_volume:,.0f}

–ü–û–°–õ–ï–î–ù–ò–ï 7 –î–ù–ï–ô:
–¢—Ä–µ–Ω–¥: {recent_trend}
–û—Ç–∫—Ä—ã—Ç–∏–µ: ${last_7_days.iloc[0]['open']:.2f}
–ó–∞–∫—Ä—ã—Ç–∏–µ: ${last_7_days.iloc[-1]['close']:.2f}
–ò–∑–º–µ–Ω–µ–Ω–∏–µ: {DataFormatter._calculate_change_pct(last_7_days.iloc[0]['open'], last_7_days.iloc[-1]['close']):+.2f}%

–î–ï–¢–ê–õ–¨–ù–ê–Ø –ò–°–¢–û–†–ò–Ø (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 –¥–Ω–µ–π):
{DataFormatter._format_history_table(data.tail(10))}

–¢–ï–•–ù–ò–ß–ï–°–ö–ò–ï –ò–ù–î–ò–ö–ê–¢–û–†–´:
{DataFormatter._calculate_indicators(data)}
"""
        return text.strip()
    
    @staticmethod
    def _calculate_trend(data: pd.DataFrame) -> str:
        """–û–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç—Ä–µ–Ω–¥"""
        if data.empty or len(data) < 2:
            return "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö"
        
        first_price = data.iloc[0]['close']
        last_price = data.iloc[-1]['close']
        change_pct = ((last_price - first_price) / first_price) * 100
        
        if change_pct > 5:
            return f"–í–æ—Å—Ö–æ–¥—è—â–∏–π (+{change_pct:.2f}%)"
        elif change_pct < -5:
            return f"–ù–∏—Å—Ö–æ–¥—è—â–∏–π ({change_pct:.2f}%)"
        else:
            return f"–ë–æ–∫–æ–≤–æ–π ({change_pct:+.2f}%)"
    
    @staticmethod
    def _calculate_change_pct(old_price: float, new_price: float) -> float:
        """–†–∞—Å—Å—á–∏—Ç–∞—Ç—å –ø—Ä–æ—Ü–µ–Ω—Ç–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ"""
        if old_price == 0:
            return 0.0
        return ((new_price - old_price) / old_price) * 100
    
    @staticmethod
    def _format_history_table(data: pd.DataFrame) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É –∏—Å—Ç–æ—Ä–∏–∏"""
        lines = []
        lines.append("–î–∞—Ç–∞       | –û—Ç–∫—Ä—ã—Ç–∏–µ  | –ú–∞–∫—Å–∏–º—É–º  | –ú–∏–Ω–∏–º—É–º   | –ó–∞–∫—Ä—ã—Ç–∏–µ  | –û–±—ä–µ–º")
        lines.append("-" * 75)
        
        for idx, row in data.iterrows():
            date_str = idx.strftime('%Y-%m-%d') if hasattr(idx, 'strftime') else str(idx)[:10]
            lines.append(
                f"{date_str} | "
                f"${row['open']:8.2f} | "
                f"${row['high']:8.2f} | "
                f"${row['low']:8.2f} | "
                f"${row['close']:8.2f} | "
                f"{row.get('volume', 0):>10,.0f}"
            )
        
        return "\n".join(lines)
    
    @staticmethod
    def _calculate_indicators(data: pd.DataFrame) -> str:
        """–†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã"""
        if data.empty or len(data) < 20:
            return "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤"
        
        indicators = []
        
        # –ü—Ä–æ—Å—Ç–∞—è —Å–∫–æ–ª—å–∑—è—â–∞—è —Å—Ä–µ–¥–Ω—è—è (SMA)
        sma_20 = data['close'].tail(20).mean()
        current_price = data['close'].iloc[-1]
        sma_position = "–≤—ã—à–µ" if current_price > sma_20 else "–Ω–∏–∂–µ"
        indicators.append(f"SMA(20): ${sma_20:.2f} (—Ü–µ–Ω–∞ {sma_position} SMA)")
        
        # –í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å (—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ)
        volatility = data['close'].tail(20).std()
        volatility_pct = (volatility / current_price) * 100
        indicators.append(f"–í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å (20–¥): {volatility_pct:.2f}%")
        
        # RSI —É–ø—Ä–æ—â–µ–Ω–Ω—ã–π
        price_changes = data['close'].diff().tail(14)
        gains = price_changes[price_changes > 0].mean()
        losses = abs(price_changes[price_changes < 0].mean())
        
        if losses != 0:
            rs = gains / losses
            rsi = 100 - (100 / (1 + rs))
            rsi_signal = "–ø–µ—Ä–µ–∫—É–ø–ª–µ–Ω" if rsi > 70 else "–ø–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω" if rsi < 30 else "–Ω–µ–π—Ç—Ä–∞–ª–µ–Ω"
            indicators.append(f"RSI(14): {rsi:.2f} ({rsi_signal})")
        
        return "\n".join(indicators)
    
    @staticmethod
    def format_short_summary(symbol: str, current_price: float, 
                            price_change_pct: float) -> str:
        """
        –ö–æ—Ä–æ—Ç–∫–æ–µ —Ä–µ–∑—é–º–µ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
        
        Args:
            symbol: –°–∏–º–≤–æ–ª –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã
            current_price: –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞
            price_change_pct: –ò–∑–º–µ–Ω–µ–Ω–∏–µ –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö
            
        Returns:
            –ö–æ—Ä–æ—Ç–∫–∞—è —Å—Ç—Ä–æ–∫–∞ —Å —Ä–µ–∑—é–º–µ
        """
        trend_emoji = "üìà" if price_change_pct > 0 else "üìâ"
        return (
            f"{trend_emoji} {symbol}: ${current_price:.2f} "
            f"({price_change_pct:+.2f}% –∑–∞ –ø–µ—Ä–∏–æ–¥)"
        )

