"""
–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.
–ó–∞–≥—Ä—É–∂–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ .env —Ñ–∞–π–ª–∞.
"""

import os
from pathlib import Path
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
BASE_DIR = Path(__file__).resolve().parent
load_dotenv(BASE_DIR / '.env')


class Config:
    """–ö–ª–∞—Å—Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    
    # Debug Mode
    DEBUG_MODE = os.getenv('DEBUG_MODE', 'false').lower() in ('true', '1', 'yes', 'on')
    
    # Telegram Bot
    TELEGRAM_BOT_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')
    
    # OpenRouter API
    OPENROUTER_API_KEY = os.getenv('OPENROUTER_API_KEY')
    AI_MODEL = os.getenv('AI_MODEL', 'meta-llama/llama-3.1-8b-instruct:free')
    
    # Twelve Data API
    TWELVE_DATA_API_KEY = os.getenv('TWELVE_DATA_API_KEY')
    
    # NewsAPI (–Ω–æ–≤–æ—Å—Ç–Ω–æ–π —Ñ–æ–Ω –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞)
    NEWSAPI_KEY = os.getenv('NEWSAPI_KEY')
    NEWSAPI_BASE_URL = os.getenv('NEWSAPI_BASE_URL', 'https://newsapi.org/v2')
    NEWSAPI_TIMEOUT_SECONDS = float(os.getenv('NEWSAPI_TIMEOUT_SECONDS', 10))
    NEWSAPI_MAX_RETRIES = int(os.getenv('NEWSAPI_MAX_RETRIES', 3))
    NEWSAPI_BACKOFF_SECONDS = float(os.getenv('NEWSAPI_BACKOFF_SECONDS', 1.0))
    
    # NewsAPI Rate Limits
    NEWSAPI_MONTHLY_LIMIT = int(os.getenv('NEWSAPI_MONTHLY_LIMIT', 500))
    NEWSAPI_DAILY_LIMIT = int(os.getenv('NEWSAPI_DAILY_LIMIT', 50))
    NEWSAPI_RESERVED_USER_PERCENT = int(os.getenv('NEWSAPI_RESERVED_USER_PERCENT', 20))  # % –∫–≤–æ—Ç—ã –∑–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–æ –ø–æ–¥ –∑–∞–ø—Ä–æ—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    NEWS_CACHE_HOURS = int(os.getenv('NEWS_CACHE_HOURS', 24))

    # Report Generation
    PDF_TEMPLATE_PATH = os.getenv('PDF_TEMPLATE_PATH', './templates/')
    CHART_CACHE_DIR = os.getenv('CHART_CACHE_DIR', './charts/')
    
    # YooKassa Payment System
    YOOKASSA_SHOP_ID = os.getenv('YOOKASSA_SHOP_ID')
    YOOKASSA_SECRET_KEY = os.getenv('YOOKASSA_SECRET_KEY')
    YOOKASSA_TEST_MODE = os.getenv('YOOKASSA_TEST_MODE', 'true').lower() in ('true', '1', 'yes', 'on')
    TELEGRAM_BOT_USERNAME = os.getenv('TELEGRAM_BOT_USERNAME')
    
    # NOWPayments Crypto Payment System
    NOWPAYMENTS_API_KEY = os.getenv('NOWPAYMENTS_API_KEY')
    NOWPAYMENTS_PUBLIC_API_KEY = os.getenv('NOWPAYMENTS_PUBLIC_API_KEY')
    NOWPAYMENTS_IPN_SECRET = os.getenv('NOWPAYMENTS_IPN_SECRET')
    NOWPAYMENTS_SANDBOX = os.getenv('NOWPAYMENTS_SANDBOX', 'true').lower() in ('true', '1', 'yes', 'on')
    NOWPAYMENTS_PAYOUT_ADDRESS = os.getenv('NOWPAYMENTS_PAYOUT_ADDRESS')
    NOWPAYMENTS_PAYOUT_CURRENCY = os.getenv('NOWPAYMENTS_PAYOUT_CURRENCY', 'BTC')
    
    # Database
    DATABASE_PATH = BASE_DIR / os.getenv('DATABASE_PATH', 'crypto_analysis.db')
    
    # Subscription Limits (Monthly)
    FREE_ANALYSES_PER_MONTH = int(os.getenv('FREE_ANALYSES_PER_MONTH', 3))
    BASIC_ANALYSES_PER_MONTH = int(os.getenv('BASIC_ANALYSES_PER_MONTH', 15))
    TRADER_ANALYSES_PER_MONTH = int(os.getenv('TRADER_ANALYSES_PER_MONTH', 50))
    PRO_ANALYSES_PER_MONTH = int(os.getenv('PRO_ANALYSES_PER_MONTH', 150))
    ELITE_ANALYSES_PER_MONTH = int(os.getenv('ELITE_ANALYSES_PER_MONTH', 500))
    
    # Subscription Plans (Monthly)
    SUBSCRIPTION_PLANS = {
        'free': {
            'name': 'Free',
            'days': 30,
            'price': 0,
            'analyses_per_month': 3,
            'features': ['3 –∞–Ω–∞–ª–∏–∑–∞ –≤ –º–µ—Å—è—Ü', '–ë–∞–∑–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑']
        },
        'basic': {
            'name': 'Basic',
            'days': 30,
            'price': 299,
            'analyses_per_month': 15,
            'features': ['15 –∞–Ω–∞–ª–∏–∑–æ–≤ –≤ –º–µ—Å—è—Ü', '–ë–∞–∑–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑']
        },
        'trader': {
            'name': 'Trader',
            'days': 30,
            'price': 899,
            'analyses_per_month': 50,
            'features': ['50 –∞–Ω–∞–ª–∏–∑–æ–≤ –≤ –º–µ—Å—è—Ü', '–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑']
        },
        'pro': {
            'name': 'Pro',
            'days': 30,
            'price': 1,
            'analyses_per_month': 150,
            'features': ['150 –∞–Ω–∞–ª–∏–∑–æ–≤ –≤ –º–µ—Å—è—Ü', '–ü–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑', '–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å']
        },
        'elite': {
            'name': 'Elite',
            'days': 30,
            'price': 2990,
            'analyses_per_month': 500,
            'features': ['500 –∞–Ω–∞–ª–∏–∑–æ–≤ –≤ –º–µ—Å—è—Ü', '–ü–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑', '–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å', "–†–∞–Ω–Ω–∏–π –¥–æ—Å—Ç—É–ø –∫ —Ñ—É–Ω–∫—Ü–∏—è–º"]
        }
    }
    
    # Timeframe
    DEFAULT_TIMEFRAME = '1day'  # 1 day
    DEFAULT_PERIOD = 30  # 30 days history
    
    # Debug Settings
    DEBUG_LOG_LEVEL = os.getenv('DEBUG_LOG_LEVEL', 'DEBUG' if DEBUG_MODE else 'INFO')
    DEBUG_USE_MOCK_DATA = os.getenv('DEBUG_USE_MOCK_DATA', 'false').lower() in ('true', '1', 'yes', 'on')
    DEBUG_SKIP_VALIDATION = os.getenv('DEBUG_SKIP_VALIDATION', 'false').lower() in ('true', '1', 'yes', 'on')
    
    @classmethod
    def validate(cls):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
        if cls.DEBUG_SKIP_VALIDATION:
            print("üîß DEBUG: –ü—Ä–æ–ø—É—Å–∫ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
            return True
            
        if not cls.TELEGRAM_BOT_TOKEN:
            raise ValueError("TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env —Ñ–∞–π–ª–µ")
        if not cls.OPENROUTER_API_KEY:
            raise ValueError("OPENROUTER_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env —Ñ–∞–π–ª–µ")
        if not cls.TWELVE_DATA_API_KEY:
            raise ValueError("TWELVE_DATA_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env —Ñ–∞–π–ª–µ")
        return True
    
    @classmethod
    def get_debug_info(cls):
        """–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ debug —Ä–µ–∂–∏–º–µ"""
        return {
            'debug_mode': cls.DEBUG_MODE,
            'log_level': cls.DEBUG_LOG_LEVEL,
            'use_mock_data': cls.DEBUG_USE_MOCK_DATA,
            'skip_validation': cls.DEBUG_SKIP_VALIDATION
        }


# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
config = Config()

