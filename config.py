"""
–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.
–ó–∞–≥—Ä—É–∂–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ .env —Ñ–∞–π–ª–∞.
"""

import os
from pathlib import Path
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
BASE_DIR = Path(__file__).resolve().parent
load_dotenv(BASE_DIR / '.env')


class Config:
    """–ö–ª–∞—Å—Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    
    # Debug Mode
    DEBUG_MODE = os.getenv('DEBUG_MODE', 'false').lower() in ('true', '1', 'yes', 'on')
    
    # Telegram Bot
    TELEGRAM_BOT_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')
    
    # OpenRouter API
    OPENROUTER_API_KEY = os.getenv('OPENROUTER_API_KEY')
    AI_MODEL = os.getenv('AI_MODEL', 'meta-llama/llama-3.1-8b-instruct:free')
    
    # Twelve Data API
    TWELVE_DATA_API_KEY = os.getenv('TWELVE_DATA_API_KEY')
    
    # Database
    DATABASE_PATH = BASE_DIR / os.getenv('DATABASE_PATH', 'crypto_analysis.db')
    
    # Subscription Limits
    FREE_ANALYSES_PER_DAY = int(os.getenv('FREE_ANALYSES_PER_DAY', 3))
    PREMIUM_ANALYSES_PER_DAY = int(os.getenv('PREMIUM_ANALYSES_PER_DAY', 50))
    
    # Timeframe
    DEFAULT_TIMEFRAME = '1day'  # 1 day
    DEFAULT_PERIOD = 30  # 30 days history
    
    # Debug Settings
    DEBUG_LOG_LEVEL = os.getenv('DEBUG_LOG_LEVEL', 'DEBUG' if DEBUG_MODE else 'INFO')
    DEBUG_USE_MOCK_DATA = os.getenv('DEBUG_USE_MOCK_DATA', 'false').lower() in ('true', '1', 'yes', 'on')
    DEBUG_SKIP_VALIDATION = os.getenv('DEBUG_SKIP_VALIDATION', 'false').lower() in ('true', '1', 'yes', 'on')
    
    @classmethod
    def validate(cls):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
        if cls.DEBUG_SKIP_VALIDATION:
            print("üîß DEBUG: –ü—Ä–æ–ø—É—Å–∫ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
            return True
            
        if not cls.TELEGRAM_BOT_TOKEN:
            raise ValueError("TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env —Ñ–∞–π–ª–µ")
        if not cls.OPENROUTER_API_KEY:
            raise ValueError("OPENROUTER_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env —Ñ–∞–π–ª–µ")
        if not cls.TWELVE_DATA_API_KEY:
            raise ValueError("TWELVE_DATA_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env —Ñ–∞–π–ª–µ")
        return True
    
    @classmethod
    def get_debug_info(cls):
        """–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ debug —Ä–µ–∂–∏–º–µ"""
        return {
            'debug_mode': cls.DEBUG_MODE,
            'log_level': cls.DEBUG_LOG_LEVEL,
            'use_mock_data': cls.DEBUG_USE_MOCK_DATA,
            'skip_validation': cls.DEBUG_SKIP_VALIDATION
        }


# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
config = Config()

